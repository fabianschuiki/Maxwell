/** Collections in Maxwell. */

//The three basic collections are built in types of the language.
x array;
y set;
z map;

//The following defines an array.
x := [a, b, c];

//Arrays may contain the same element multiple times.
x := [a, b, c, c, b, a];


//The following defines a set.
y := {a, b, c};

//Elements in a set are unique.
y := {a, b, c, c, b, a}; //yields {a, b, c}


//The following defines a map.
z := {firstname: a, lastname: b, age: c};


/**
 * GENERICS
 *
 * Collections are actually generic classes whose default collected type is the dynamic type.
 */

//The class definition could look something like the following:
type array          <value = ~> { ... }
type set            <value = ~> { ... }
type map   <key = ~, value = ~> { ... }

//The inline collection constructors will try to create a collection whith types as specific as possible.
{1.2, 3.4};                  //yields set<value: double>
{"hello", "world"};          //yields set<value: string>
{1.2, "world"};              //yields set<value: ~>
{hello: "world"};            //yields map<key: string, value: string>
{hello: "world", 4: "four"}; //yields map<key: ~, value: string>

//Nevertheless, inline collections will sacrifice specialization if the destination type of where they are used requires it.
a array <string> = ["hello", "world"]; //creates an inline array<value: string>
b               := ["hello", "world"]; //creates an inline array<value: string>
c array          = ["hello", "world"]; //creates an inline array<value: ~> though

//Wrong specializations throw compiler errors:
a map <key: int, value: string> = {"hello": "world"}; //causes the compiler to complain that "hello" is not an int key.
