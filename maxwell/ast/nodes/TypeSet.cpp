/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/TypeSet.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::TypeSet;
using ast::NodePtr;
using ast::NodeVector;

TypeSet::TypeSet() : Node() {}

bool TypeSet::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kTypeSet;
}

bool TypeSet::implements(Interface i) {
	if (Node::implements(i)) return true;
	return false;
}

NodePtr TypeSet::copy() {
	Ptr c (new TypeSet);
	Node::copy(this->types, c->types);
	return c;
}

bool TypeSet::equalTo(const NodePtr& o) {
	const shared_ptr<TypeSet>& other = boost::dynamic_pointer_cast<TypeSet>(o);
	if (!other) return false;
	if (!equal(this->types, other->types)) return false;
	return true;
}

std::string TypeSet::describe(int depth) {
	std::stringstream str, b;
				str << "{";			bool first = true;			for (NodeVector::iterator it = types.begin(); it != types.end(); it++) {				if (!first) str << ", ";				first = false;				str << (*it)->describe(depth-1);			}			str << "}";
	return str.str();
}


void TypeSet::setTypes(const NodeVector& v) {
	if (!equal(v, types)) {
		modify("types");
		types = v;
	}
}

const NodeVector& TypeSet::getTypes(bool required) {
	const NodeVector& v = types;
	return v;
}


void TypeSet::encode(Encoder& e) {
	e.encode(this->types);
}

void TypeSet::decode(Decoder& d) {
	d.decode(this->types);
}


void TypeSet::updateHierarchyOfChildren() {
	for (unsigned i = 0; i < this->types.size(); i++) {
		char buf[32]; snprintf(buf, 31, "%i", i);
		this->types[i]->updateHierarchy((id + "types") + buf, repository, this);
	}
}

const NodePtr& TypeSet::resolvePath(const std::string& path) {
	size_t size = path.size();
	// types.*
	if (size >= 5 && path[0] == 't' && path[1] == 'y' && path[2] == 'p' && path[3] == 'e' && path[4] == 's') {
		// types
		if (size == 5) {
			throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
		} else if (path[5] == '.') {
			size_t dot = path.find(".", 6);
			string idx_str = path.substr(6, dot);
			int idx = atoi(idx_str.c_str());
			const NodeVector& a = getTypes();
			if (idx < 0 || idx >= (int)a.size()) {
				throw std::runtime_error("Index into array '" + path.substr(0, 5) + "' is out of bounds.");
			}
			if (dot == string::npos) {
				return a[idx];
			} else {
				return a[idx]->resolvePath(path.substr(dot + 1));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector TypeSet::getChildren() {
	NodeVector v;
	v.insert(v.end(), this->types.begin(), this->types.end());
	return v;
}

