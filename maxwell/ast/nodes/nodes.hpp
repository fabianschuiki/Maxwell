/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "maxwell/ast/nodes/ArrayConstExpr.hpp"
#include "maxwell/ast/nodes/AssignmentExpr.hpp"
#include "maxwell/ast/nodes/BinaryOpExpr.hpp"
#include "maxwell/ast/nodes/BlockExpr.hpp"
#include "maxwell/ast/nodes/CallArg.hpp"
#include "maxwell/ast/nodes/CallCandidate.hpp"
#include "maxwell/ast/nodes/CallCandidateArg.hpp"
#include "maxwell/ast/nodes/CallExpr.hpp"
#include "maxwell/ast/nodes/CallExprArg.hpp"
#include "maxwell/ast/nodes/CastType.hpp"
#include "maxwell/ast/nodes/DefinedType.hpp"
#include "maxwell/ast/nodes/ForExpr.hpp"
#include "maxwell/ast/nodes/FuncArg.hpp"
#include "maxwell/ast/nodes/FuncDef.hpp"
#include "maxwell/ast/nodes/FuncExpr.hpp"
#include "maxwell/ast/nodes/FuncType.hpp"
#include "maxwell/ast/nodes/FuncTypeExpr.hpp"
#include "maxwell/ast/nodes/GenericType.hpp"
#include "maxwell/ast/nodes/IdentifierExpr.hpp"
#include "maxwell/ast/nodes/IfCaseExpr.hpp"
#include "maxwell/ast/nodes/IfCaseExprCond.hpp"
#include "maxwell/ast/nodes/IfExpr.hpp"
#include "maxwell/ast/nodes/ImplAccessor.hpp"
#include "maxwell/ast/nodes/IndexOpExpr.hpp"
#include "maxwell/ast/nodes/InterfaceQualifier.hpp"
#include "maxwell/ast/nodes/InvalidType.hpp"
#include "maxwell/ast/nodes/MapConstExpr.hpp"
#include "maxwell/ast/nodes/MapConstExprPair.hpp"
#include "maxwell/ast/nodes/MemberAccessExpr.hpp"
#include "maxwell/ast/nodes/NamedTypeExpr.hpp"
#include "maxwell/ast/nodes/NativeFuncDef.hpp"
#include "maxwell/ast/nodes/NativeQualifier.hpp"
#include "maxwell/ast/nodes/NativeType.hpp"
#include "maxwell/ast/nodes/NativeTypeDef.hpp"
#include "maxwell/ast/nodes/NativeTypeExpr.hpp"
#include "maxwell/ast/nodes/NilType.hpp"
#include "maxwell/ast/nodes/NilTypeExpr.hpp"
#include "maxwell/ast/nodes/NumberConstExpr.hpp"
#include "maxwell/ast/nodes/OneTupleMappedType.hpp"
#include "maxwell/ast/nodes/QualifiedType.hpp"
#include "maxwell/ast/nodes/QualifiedTypeExpr.hpp"
#include "maxwell/ast/nodes/QualifiedTypeMember.hpp"
#include "maxwell/ast/nodes/QualifiedTypeNative.hpp"
#include "maxwell/ast/nodes/RangeQualifier.hpp"
#include "maxwell/ast/nodes/SetConstExpr.hpp"
#include "maxwell/ast/nodes/SpecializedType.hpp"
#include "maxwell/ast/nodes/SpecializedTypeExpr.hpp"
#include "maxwell/ast/nodes/StringConstExpr.hpp"
#include "maxwell/ast/nodes/StructureQualifier.hpp"
#include "maxwell/ast/nodes/StructureQualifierMember.hpp"
#include "maxwell/ast/nodes/TupleExpr.hpp"
#include "maxwell/ast/nodes/TupleExprArg.hpp"
#include "maxwell/ast/nodes/TupleType.hpp"
#include "maxwell/ast/nodes/TupleTypeArg.hpp"
#include "maxwell/ast/nodes/TupleTypeExpr.hpp"
#include "maxwell/ast/nodes/TupleTypeExprArg.hpp"
#include "maxwell/ast/nodes/TypeDef.hpp"
#include "maxwell/ast/nodes/TypeSet.hpp"
#include "maxwell/ast/nodes/TypelessVarDefExpr.hpp"
#include "maxwell/ast/nodes/UnaryOpExpr.hpp"
#include "maxwell/ast/nodes/UnionMappedType.hpp"
#include "maxwell/ast/nodes/UnionType.hpp"
#include "maxwell/ast/nodes/UnionTypeExpr.hpp"
#include "maxwell/ast/nodes/VarDefExpr.hpp"
#include <string>

namespace ast {

NodePtr makeNode(const std::string& name);

} // namespace ast

