/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "Node.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using boost::shared_ptr;
using std::runtime_error;

class FuncArg : public Node
{
public:
	FuncArg() : Node() {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kFuncArg;
	}

	void setName(const string& v)
	{
		if (v != name) {
			modify();
			name = v;
		}
	}
	const string& getName()
	{
		return name;
	}

	void setType(const string& v)
	{
		if (v != type) {
			modify();
			type = v;
		}
	}
	const string& getType()
	{
		return type;
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "FuncArg{â€¦}";
		stringstream str, b;
		str << "FuncArg{";
		if (!this->name.empty()) b << endl << "  \033[1mname\033[0m = '\033[33m" << this->name << "\033[0m'";
		if (!this->type.empty()) b << endl << "  \033[1mtype\033[0m = '\033[33m" << this->type << "\033[0m'";
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}
protected:
	string name;
	string type;
};

} // namespace ast