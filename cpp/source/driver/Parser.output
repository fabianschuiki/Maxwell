Terminals which are not used

   "real number constant"
   "integer number constant"
   "string constant"
   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: "func keyword" "identifier" body
    7          | "func keyword" "identifier" func_arg_tuple body
    8          | "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )"
   11               | func_arg
   12               | "opening paranthesis (" func_args "closing paranthesis )"

   13 func_args: func_arg
   14          | func_args "," func_arg

   15 func_arg: "identifier"
   16         | "identifier" typeexpr

   17 type_decl: "type keyword" "identifier"

   18 body: "opening braces {" "closing braces }"
   19     | "opening braces {" stmts "closing braces }"

   20 stmts: stmt
   21      | stmts stmt

   22 stmt: expr ";"

   23 primary_expr: "identifier"
   24             | "opening paranthesis (" expr "closing paranthesis )"

   25 postfix_expr: primary_expr
   26             | postfix_expr OPERATOR
   27             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | postfix_expr "." "identifier"
   30             | "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   32 call_args: call_arg
   33          | call_args "," call_arg

   34 call_arg: "identifier" ":" expr
   35         | expr

   36 prefix_expr: postfix_expr
   37            | prefix_op prefix_expr

   38 prefix_op: MULTIPLICATIVE_OPERATOR
   39          | ADDITIVE_OPERATOR
   40          | RELATIONAL_OPERATOR
   41          | OPERATOR

   42 multiplicative_expr: prefix_expr
   43                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   44 additive_expr: multiplicative_expr
   45              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   46 relational_expr: additive_expr
   47                | relational_expr RELATIONAL_OPERATOR additive_expr

   48 expr: relational_expr
   49     | var_expr
   50     | var_expr "assignment operator =" relational_expr

   51 var_expr: "var keyword" "identifier" typeexpr
   52         | "var keyword" "identifier"

   53 typeexpr: nonunion_typeexpr
   54         | union_typeexpr

   55 nonunion_typeexpr: "identifier"
   56                  | tuple_typeexpr

   57 union_typeexpr: union_typeexprs

   58 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   60 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   61 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   62                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   63 tuple_typeexpr_arg: typeexpr
   64                   | "identifier" ":" typeexpr


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 6 7 8 9 15 16 17 23 27 28 29 30 31 34 51 52 55 64
"real number constant" (259)
"integer number constant" (260)
"string constant" (261)
MULTIPLICATIVE_OPERATOR (262) 38 43
ADDITIVE_OPERATOR (263) 39 45
RELATIONAL_OPERATOR (264) 40 47
OPERATOR (265) 26 41
"symbol" (266)
"func keyword" (267) 6 7 8 9
"var keyword" (268) 51 52
"type keyword" (269) 17
"opening paranthesis (" (270) 10 12 24 27 28 30 31 60
"closing paranthesis )" (271) 10 12 24 27 28 30 31 60
"opening braces {" (272) 18 19
"closing braces }" (273) 18 19
"opening bracket [" (274)
"closing bracket ]" (275)
"vertical pipe |" (276) 58 59
"." (277) 27 28 29
"," (278) 14 33 61 62
":" (279) 34 64
";" (280) 22
"right arrow ->" (281) 8 9
"assignment operator =" (282) 50


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
root (29)
    on left: 1, on right: 0
root_stmts (30)
    on left: 2 3, on right: 1 2
root_stmt (31)
    on left: 4 5, on right: 2 3
func_decl (32)
    on left: 6 7 8 9, on right: 4
func_arg_tuple (33)
    on left: 10 11 12, on right: 7 8 9
func_args (34)
    on left: 13 14, on right: 12 14
func_arg (35)
    on left: 15 16, on right: 11 13 14
type_decl (36)
    on left: 17, on right: 5
body (37)
    on left: 18 19, on right: 6 7 8 9
stmts (38)
    on left: 20 21, on right: 19 21
stmt (39)
    on left: 22, on right: 20 21
primary_expr (40)
    on left: 23 24, on right: 25
postfix_expr (41)
    on left: 25 26 27 28 29 30 31, on right: 26 27 28 29 36
call_args (42)
    on left: 32 33, on right: 28 31 33
call_arg (43)
    on left: 34 35, on right: 32 33
prefix_expr (44)
    on left: 36 37, on right: 37 42 43
prefix_op (45)
    on left: 38 39 40 41, on right: 37
multiplicative_expr (46)
    on left: 42 43, on right: 43 44 45
additive_expr (47)
    on left: 44 45, on right: 45 46 47
relational_expr (48)
    on left: 46 47, on right: 47 48 50
expr (49)
    on left: 48 49 50, on right: 22 24 34 35
var_expr (50)
    on left: 51 52, on right: 49 50
typeexpr (51)
    on left: 53 54, on right: 16 51 63 64
nonunion_typeexpr (52)
    on left: 55 56, on right: 53 58 59
union_typeexpr (53)
    on left: 57, on right: 54
union_typeexprs (54)
    on left: 58 59, on right: 57 59
tuple_typeexpr (55)
    on left: 60, on right: 56
tuple_typeexpr_args (56)
    on left: 61 62, on right: 60 62
tuple_typeexpr_arg (57)
    on left: 63 64, on right: 61 62


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root        go to state 3
    root_stmts  go to state 4
    root_stmt   go to state 5
    func_decl   go to state 6
    type_decl   go to state 7


state 1

    6 func_decl: "func keyword" . "identifier" body
    7          | "func keyword" . "identifier" func_arg_tuple body
    8          | "func keyword" . "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" . "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

    "identifier"  shift, and go to state 8


state 2

   17 type_decl: "type keyword" . "identifier"

    "identifier"  shift, and go to state 9


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 10


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt  go to state 11
    func_decl  go to state 6
    type_decl  go to state 7


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 8

    6 func_decl: "func keyword" "identifier" . body
    7          | "func keyword" "identifier" . func_arg_tuple body
    8          | "func keyword" "identifier" . "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" . func_arg_tuple "right arrow ->" func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" typeexpr
   18 body: . "opening braces {" "closing braces }"
   19     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13
    "opening braces {"       shift, and go to state 14
    "right arrow ->"         shift, and go to state 15

    func_arg_tuple  go to state 16
    func_arg        go to state 17
    body            go to state 18


state 9

   17 type_decl: "type keyword" "identifier" .

    $default  reduce using rule 17 (type_decl)


state 10

    0 $accept: root "end of input" .

    $default  accept


state 11

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 12

   15 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   16         | "identifier" . typeexpr
   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    $default  reduce using rule 15 (func_arg)

    typeexpr           go to state 21
    nonunion_typeexpr  go to state 22
    union_typeexpr     go to state 23
    union_typeexprs    go to state 24
    tuple_typeexpr     go to state 25


state 13

   10 func_arg_tuple: "opening paranthesis (" . "closing paranthesis )"
   12               | "opening paranthesis (" . func_args "closing paranthesis )"
   13 func_args: . func_arg
   14          | . func_args "," func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" typeexpr

    "identifier"             shift, and go to state 12
    "closing paranthesis )"  shift, and go to state 26

    func_args  go to state 27
    func_arg   go to state 28


state 14

   18 body: "opening braces {" . "closing braces }"
   19     | "opening braces {" . stmts "closing braces }"
   20 stmts: . stmt
   21      | . stmts stmt
   22 stmt: . expr ";"
   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35
    "closing braces }"       shift, and go to state 36

    stmts                go to state 37
    stmt                 go to state 38
    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 46
    var_expr             go to state 47


state 15

    8 func_decl: "func keyword" "identifier" "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" typeexpr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 48
    func_arg        go to state 17


state 16

    7 func_decl: "func keyword" "identifier" func_arg_tuple . body
    9          | "func keyword" "identifier" func_arg_tuple . "right arrow ->" func_arg_tuple body
   18 body: . "opening braces {" "closing braces }"
   19     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14
    "right arrow ->"    shift, and go to state 49

    body  go to state 50


state 17

   11 func_arg_tuple: func_arg .

    $default  reduce using rule 11 (func_arg_tuple)


state 18

    6 func_decl: "func keyword" "identifier" body .

    $default  reduce using rule 6 (func_decl)


state 19

   55 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 55 (nonunion_typeexpr)


state 20

   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   60               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   61 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   62                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   63 tuple_typeexpr_arg: . typeexpr
   64                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 51
    "opening paranthesis ("  shift, and go to state 20

    typeexpr             go to state 52
    nonunion_typeexpr    go to state 22
    union_typeexpr       go to state 23
    union_typeexprs      go to state 24
    tuple_typeexpr       go to state 25
    tuple_typeexpr_args  go to state 53
    tuple_typeexpr_arg   go to state 54


state 21

   16 func_arg: "identifier" typeexpr .

    $default  reduce using rule 16 (func_arg)


state 22

   53 typeexpr: nonunion_typeexpr .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   58 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 55

    $default  reduce using rule 53 (typeexpr)


state 23

   54 typeexpr: union_typeexpr .

    $default  reduce using rule 54 (typeexpr)


state 24

   57 union_typeexpr: union_typeexprs .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   59 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 56

    $default  reduce using rule 57 (union_typeexpr)


state 25

   56 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 56 (nonunion_typeexpr)


state 26

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 10 (func_arg_tuple)


state 27

   12 func_arg_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   14 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 57
    ","                      shift, and go to state 58


state 28

   13 func_args: func_arg .

    $default  reduce using rule 13 (func_args)


state 29

   23 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]
   30 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   31             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 59

    $default  reduce using rule 23 (primary_expr)


state 30

   38 prefix_op: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 38 (prefix_op)


state 31

   39 prefix_op: ADDITIVE_OPERATOR .

    $default  reduce using rule 39 (prefix_op)


state 32

   40 prefix_op: RELATIONAL_OPERATOR .

    $default  reduce using rule 40 (prefix_op)


state 33

   41 prefix_op: OPERATOR .

    $default  reduce using rule 41 (prefix_op)


state 34

   51 var_expr: "var keyword" . "identifier" typeexpr
   52         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 60


state 35

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   24             | "opening paranthesis (" . expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 61
    var_expr             go to state 47


state 36

   18 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 18 (body)


state 37

   19 body: "opening braces {" stmts . "closing braces }"
   21 stmts: stmts . stmt
   22 stmt: . expr ";"
   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35
    "closing braces }"       shift, and go to state 62

    stmt                 go to state 63
    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 46
    var_expr             go to state 47


state 38

   20 stmts: stmt .

    $default  reduce using rule 20 (stmts)


state 39

   25 postfix_expr: primary_expr .

    $default  reduce using rule 25 (postfix_expr)


state 40

   26 postfix_expr: postfix_expr . OPERATOR
   27             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | postfix_expr . "." "identifier"
   36 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    OPERATOR  shift, and go to state 64
    "."       shift, and go to state 65

    $default  reduce using rule 36 (prefix_expr)


state 41

   42 multiplicative_expr: prefix_expr .

    $default  reduce using rule 42 (multiplicative_expr)


state 42

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   37            | prefix_op . prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 35

    primary_expr  go to state 39
    postfix_expr  go to state 40
    prefix_expr   go to state 66
    prefix_op     go to state 42


state 43

   43 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 67

    $default  reduce using rule 44 (additive_expr)


state 44

   45 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 68

    $default  reduce using rule 46 (relational_expr)


state 45

   47 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   48 expr: relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 69

    $default  reduce using rule 48 (expr)


state 46

   22 stmt: expr . ";"

    ";"  shift, and go to state 70


state 47

   49 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   50     | var_expr . "assignment operator =" relational_expr

    "assignment operator ="  shift, and go to state 71

    $default  reduce using rule 49 (expr)


state 48

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple . body
   18 body: . "opening braces {" "closing braces }"
   19     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 72


state 49

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" typeexpr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 73
    func_arg        go to state 17


state 50

    7 func_decl: "func keyword" "identifier" func_arg_tuple body .

    $default  reduce using rule 7 (func_decl)


state 51

   55 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   64 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 74

    $default  reduce using rule 55 (nonunion_typeexpr)


state 52

   63 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 63 (tuple_typeexpr_arg)


state 53

   60 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   62 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 75
    ","                      shift, and go to state 76


state 54

   61 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 77


state 55

   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   58 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    nonunion_typeexpr  go to state 78
    tuple_typeexpr     go to state 25


state 56

   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   59 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    nonunion_typeexpr  go to state 79
    tuple_typeexpr     go to state 25


state 57

   12 func_arg_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 12 (func_arg_tuple)


state 58

   14 func_args: func_args "," . func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" typeexpr

    "identifier"  shift, and go to state 12

    func_arg  go to state 80


state 59

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   30             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   31             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   32 call_args: . call_arg
   33          | . call_args "," call_arg
   34 call_arg: . "identifier" ":" expr
   35         | . expr
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 81
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35
    "closing paranthesis )"  shift, and go to state 82

    primary_expr         go to state 39
    postfix_expr         go to state 40
    call_args            go to state 83
    call_arg             go to state 84
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 85
    var_expr             go to state 47


state 60

   51 var_expr: "var keyword" "identifier" . typeexpr
   52         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]
   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    $default  reduce using rule 52 (var_expr)

    typeexpr           go to state 86
    nonunion_typeexpr  go to state 22
    union_typeexpr     go to state 23
    union_typeexprs    go to state 24
    tuple_typeexpr     go to state 25


state 61

   24 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 87


state 62

   19 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 19 (body)


state 63

   21 stmts: stmts stmt .

    $default  reduce using rule 21 (stmts)


state 64

   26 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 26 (postfix_expr)


state 65

   27 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 88


state 66

   37 prefix_expr: prefix_op prefix_expr .

    $default  reduce using rule 37 (prefix_expr)


state 67

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   43 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 35

    primary_expr  go to state 39
    postfix_expr  go to state 40
    prefix_expr   go to state 89
    prefix_op     go to state 42


state 68

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   45 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 90


state 69

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   47 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 91


state 70

   22 stmt: expr ";" .

    $default  reduce using rule 22 (stmt)


state 71

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   50 expr: var_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 92


state 72

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 8 (func_decl)


state 73

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple . body
   18 body: . "opening braces {" "closing braces }"
   19     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 93


state 74

   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   64 tuple_typeexpr_arg: "identifier" ":" . typeexpr

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    typeexpr           go to state 94
    nonunion_typeexpr  go to state 22
    union_typeexpr     go to state 23
    union_typeexprs    go to state 24
    tuple_typeexpr     go to state 25


state 75

   60 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 60 (tuple_typeexpr)


state 76

   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   62 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   63 tuple_typeexpr_arg: . typeexpr
   64                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 51
    "opening paranthesis ("  shift, and go to state 20

    typeexpr            go to state 52
    nonunion_typeexpr   go to state 22
    union_typeexpr      go to state 23
    union_typeexprs     go to state 24
    tuple_typeexpr      go to state 25
    tuple_typeexpr_arg  go to state 95


state 77

   53 typeexpr: . nonunion_typeexpr
   54         | . union_typeexpr
   55 nonunion_typeexpr: . "identifier"
   56                  | . tuple_typeexpr
   57 union_typeexpr: . union_typeexprs
   58 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   59                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   60 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   61 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   63 tuple_typeexpr_arg: . typeexpr
   64                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 51
    "opening paranthesis ("  shift, and go to state 20

    typeexpr            go to state 52
    nonunion_typeexpr   go to state 22
    union_typeexpr      go to state 23
    union_typeexprs     go to state 24
    tuple_typeexpr      go to state 25
    tuple_typeexpr_arg  go to state 96


state 78

   58 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 58 (union_typeexprs)


state 79

   59 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 59 (union_typeexprs)


state 80

   14 func_args: func_args "," func_arg .

    $default  reduce using rule 14 (func_args)


state 81

   23 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ","]
   30 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   31             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   34 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 59
    ":"                      shift, and go to state 97

    $default  reduce using rule 23 (primary_expr)


state 82

   30 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 30 (postfix_expr)


state 83

   31 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   33 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 98
    ","                      shift, and go to state 99


state 84

   32 call_args: call_arg .

    $default  reduce using rule 32 (call_args)


state 85

   35 call_arg: expr .

    $default  reduce using rule 35 (call_arg)


state 86

   51 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 51 (var_expr)


state 87

   24 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 24 (primary_expr)


state 88

   27 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   28             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   29             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]

    "opening paranthesis ("  shift, and go to state 100

    $default  reduce using rule 29 (postfix_expr)


state 89

   43 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 43 (multiplicative_expr)


state 90

   43 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   45 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 67

    $default  reduce using rule 45 (additive_expr)


state 91

   45 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   47 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 68

    $default  reduce using rule 47 (relational_expr)


state 92

   47 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   50 expr: var_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 69

    $default  reduce using rule 50 (expr)


state 93

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 9 (func_decl)


state 94

   64 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 64 (tuple_typeexpr_arg)


state 95

   62 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 62 (tuple_typeexpr_args)


state 96

   61 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 61 (tuple_typeexpr_args)


state 97

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34 call_arg: "identifier" ":" . expr
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 29
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 101
    var_expr             go to state 47


state 98

   31 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 31 (postfix_expr)


state 99

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   33 call_args: call_args "," . call_arg
   34 call_arg: . "identifier" ":" expr
   35         | . expr
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 81
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35

    primary_expr         go to state 39
    postfix_expr         go to state 40
    call_arg             go to state 102
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 85
    var_expr             go to state 47


state 100

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" expr "closing paranthesis )"
   25 postfix_expr: . primary_expr
   26             | . postfix_expr OPERATOR
   27             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   27             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   28             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   28             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   29             | . postfix_expr "." "identifier"
   30             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32 call_args: . call_arg
   33          | . call_args "," call_arg
   34 call_arg: . "identifier" ":" expr
   35         | . expr
   36 prefix_expr: . postfix_expr
   37            | . prefix_op prefix_expr
   38 prefix_op: . MULTIPLICATIVE_OPERATOR
   39          | . ADDITIVE_OPERATOR
   40          | . RELATIONAL_OPERATOR
   41          | . OPERATOR
   42 multiplicative_expr: . prefix_expr
   43                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   44 additive_expr: . multiplicative_expr
   45              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   46 relational_expr: . additive_expr
   47                | . relational_expr RELATIONAL_OPERATOR additive_expr
   48 expr: . relational_expr
   49     | . var_expr
   50     | . var_expr "assignment operator =" relational_expr
   51 var_expr: . "var keyword" "identifier" typeexpr
   52         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 81
    MULTIPLICATIVE_OPERATOR  shift, and go to state 30
    ADDITIVE_OPERATOR        shift, and go to state 31
    RELATIONAL_OPERATOR      shift, and go to state 32
    OPERATOR                 shift, and go to state 33
    "var keyword"            shift, and go to state 34
    "opening paranthesis ("  shift, and go to state 35
    "closing paranthesis )"  shift, and go to state 103

    primary_expr         go to state 39
    postfix_expr         go to state 40
    call_args            go to state 104
    call_arg             go to state 84
    prefix_expr          go to state 41
    prefix_op            go to state 42
    multiplicative_expr  go to state 43
    additive_expr        go to state 44
    relational_expr      go to state 45
    expr                 go to state 85
    var_expr             go to state 47


state 101

   34 call_arg: "identifier" ":" expr .

    $default  reduce using rule 34 (call_arg)


state 102

   33 call_args: call_args "," call_arg .

    $default  reduce using rule 33 (call_args)


state 103

   27 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 27 (postfix_expr)


state 104

   28 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   33 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 105
    ","                      shift, and go to state 99


state 105

   28 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 28 (postfix_expr)
