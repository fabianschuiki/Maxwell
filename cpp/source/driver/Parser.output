Terminals which are not used

   "symbol"
   "incase keyword"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_def
    5          | type_def

    6 func_def: func_def_signature block_expr
    7         | func_def_signature "assignment operator =" body_expr

    8 func_def_signature: func_def_name
    9                   | func_def_name func_args_tuple
   10                   | func_def_name "right arrow ->" func_args_tuple
   11                   | func_def_name func_args_tuple "right arrow ->" func_args_tuple

   12 func_def_name: "func keyword" "identifier"
   13              | "func keyword" any_operator
   14              | "func keyword" "unary keyword" any_operator

   15 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   16                | func_arg
   17                | "opening paranthesis (" func_args "closing paranthesis )"

   18 func_args: func_arg
   19          | func_args "," func_arg

   20 func_arg: "identifier"
   21         | "identifier" typeexpr

   22 type_def: type_def_name
   23         | type_def_name typeexpr

   24 type_def_name: "type keyword" "identifier"

   25 primary_expr: "identifier"
   26             | "opening paranthesis (" any_expr "closing paranthesis )"
   27             | "number constant"
   28             | "string constant"
   29             | "opening bracket [" expr_list "closing bracket ]"
   30             | "opening braces {" expr_list "closing braces }"
   31             | "opening braces {" map_expr_pairs "closing braces }"
   32             | ifcase_expr

   33 map_expr_pairs: map_expr_pair
   34               | map_expr_pairs "," map_expr_pair

   35 map_expr_pair: primary_expr ":" expr

   36 ifcase_expr: "opening braces {" ifcase_expr_conds "closing braces }"
   37            | "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"

   38 ifcase_expr_conds: ifcase_expr_cond
   39                  | ifcase_expr_conds "," ifcase_expr_cond

   40 ifcase_expr_cond: expr "if keyword" expr

   41 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr

   43 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr

   45 body_expr: block_expr
   46          | expr ";"

   47 block_expr: "opening braces {" "closing braces }"
   48           | "opening braces {" block_expr_exprs "closing braces }"

   49 block_expr_exprs: block_expr_expr
   50                 | block_expr_exprs block_expr_expr

   51 block_expr_expr: expr ";"
   52                | macro_expr

   53 postfix_expr: primary_expr
   54             | postfix_expr OPERATOR
   55             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | postfix_expr "." "identifier"
   58             | "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   60 call_args: call_arg
   61          | call_args "," call_arg

   62 call_arg: "identifier" ":" expr
   63         | expr

   64 prefix_expr: postfix_expr
   65            | any_operator prefix_expr

   66 any_operator: MULTIPLICATIVE_OPERATOR
   67             | ADDITIVE_OPERATOR
   68             | RELATIONAL_OPERATOR
   69             | OPERATOR

   70 multiplicative_expr: prefix_expr
   71                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   72 additive_expr: multiplicative_expr
   73              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   74 relational_expr: additive_expr
   75                | relational_expr RELATIONAL_OPERATOR additive_expr

   76 equality_expr: relational_expr
   77              | equality_expr EQUALITY_OPERATOR relational_expr

   78 and_expr: equality_expr
   79         | and_expr AND_OPERATOR equality_expr

   80 or_expr: and_expr
   81        | or_expr OR_OPERATOR and_expr

   82 assignment_expr: or_expr
   83                | assignment_expr "assignment operator =" or_expr

   84 var_expr: "var keyword" "identifier" typeexpr
   85         | "var keyword" "identifier"

   86 expr: assignment_expr
   87     | var_expr
   88     | var_expr "assignment operator =" assignment_expr

   89 macro_expr: if_expr
   90           | for_expr

   91 any_expr: macro_expr
   92         | expr

   93 expr_list: expr
   94          | expr_list "," expr

   95 typeexpr: nonunion_typeexpr
   96         | union_typeexpr

   97 nonunion_typeexpr: "identifier"
   98                  | "nil constant"
   99                  | tuple_typeexpr
  100                  | qualified_typeexpr
  101                  | specialized_typeexpr

  102 union_typeexpr: union_typeexprs

  103 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | union_typeexprs "vertical pipe |" nonunion_typeexpr

  105 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

  106 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
  107                    | tuple_typeexpr_args "," tuple_typeexpr_arg

  108 tuple_typeexpr_arg: typeexpr
  109                   | "identifier" ":" typeexpr

  110 qualified_typeexpr: qualified_typeexpr_qualifiers

  111 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
  112                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

  113 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

  114 specialized_typeexpr_specs: typeexpr
  115                           | specialized_typeexpr_specs "," typeexpr

  116 qualified_typeexpr_qualifier: structure_qualifier
  117                             | interface_qualifier
  118                             | native_qualifier
  119                             | range_qualifier

  120 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

  122 structure_qualifier_decl: "value keyword"
  123                         | "object keyword"

  124 structure_qualifier_stmts: structure_qualifier_stmt
  125                          | structure_qualifier_stmts structure_qualifier_stmt

  126 structure_qualifier_stmt: "identifier" ";"
  127                         | "identifier" typeexpr ";"

  128 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
  129                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

  130 interface_qualifier_stmts: interface_qualifier_stmt
  131                          | interface_qualifier_stmts interface_qualifier_stmt

  132 interface_qualifier_stmt: "identifier"

  133 native_qualifier: "native keyword" "identifier"

  134 range_qualifier: range_qualifier_decl
  135                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

  136 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 12 20 21 24 25 55 56 57 58 59 62 84 85 97 109 126
    127 132 133 136
"number constant" (259) 27 135
"string constant" (260) 28
MULTIPLICATIVE_OPERATOR (261) 66 71
ADDITIVE_OPERATOR (262) 67 73
RELATIONAL_OPERATOR (263) 68 75
EQUALITY_OPERATOR (264) 77
AND_OPERATOR (265) 79
OR_OPERATOR (266) 81
OPERATOR (267) 54 69
"symbol" (268)
"func keyword" (269) 12 13 14
"var keyword" (270) 84 85
"type keyword" (271) 24
"unary keyword" (272) 14
"value keyword" (273) 122
"object keyword" (274) 123
"interface keyword" (275) 128 129
"native keyword" (276) 133
"range keyword" (277) 136
"if keyword" (278) 40 41 42
"else keyword" (279) 42
"for keyword" (280) 43 44
"nil constant" (281) 98
"incase keyword" (282)
"otherwise keyword" (283) 37
"opening paranthesis (" (284) 15 17 26 41 42 43 44 55 56 58 59 105
    135
"closing paranthesis )" (285) 15 17 26 41 42 43 44 55 56 58 59 105
    135
"opening braces {" (286) 30 31 36 37 47 48 120 121 128 129
"closing braces }" (287) 30 31 36 37 47 48 120 121 128 129
"opening bracket [" (288) 29 113
"closing bracket ]" (289) 29 113
"vertical pipe |" (290) 103 104
"." (291) 55 56 57
"," (292) 19 34 37 39 61 94 106 107 115 135
":" (293) 35 62 109
";" (294) 44 46 51 126 127
"right arrow ->" (295) 10 11
"assignment operator =" (296) 7 83 88


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
root (43)
    on left: 1, on right: 0
root_stmts (44)
    on left: 2 3, on right: 1 2
root_stmt (45)
    on left: 4 5, on right: 2 3
func_def (46)
    on left: 6 7, on right: 4
func_def_signature (47)
    on left: 8 9 10 11, on right: 6 7
func_def_name (48)
    on left: 12 13 14, on right: 8 9 10 11
func_args_tuple (49)
    on left: 15 16 17, on right: 9 10 11
func_args (50)
    on left: 18 19, on right: 17 19
func_arg (51)
    on left: 20 21, on right: 16 18 19
type_def (52)
    on left: 22 23, on right: 5
type_def_name (53)
    on left: 24, on right: 22 23
primary_expr (54)
    on left: 25 26 27 28 29 30 31 32, on right: 35 53
map_expr_pairs (55)
    on left: 33 34, on right: 31 34
map_expr_pair (56)
    on left: 35, on right: 33 34
ifcase_expr (57)
    on left: 36 37, on right: 32
ifcase_expr_conds (58)
    on left: 38 39, on right: 36 37 39
ifcase_expr_cond (59)
    on left: 40, on right: 38 39
if_expr (60)
    on left: 41 42, on right: 89
for_expr (61)
    on left: 43 44, on right: 90
body_expr (62)
    on left: 45 46, on right: 7 41 42 43 44
block_expr (63)
    on left: 47 48, on right: 6 45
block_expr_exprs (64)
    on left: 49 50, on right: 48 50
block_expr_expr (65)
    on left: 51 52, on right: 49 50
postfix_expr (66)
    on left: 53 54 55 56 57 58 59, on right: 54 55 56 57 64
call_args (67)
    on left: 60 61, on right: 56 59 61
call_arg (68)
    on left: 62 63, on right: 60 61
prefix_expr (69)
    on left: 64 65, on right: 65 70 71
any_operator (70)
    on left: 66 67 68 69, on right: 13 14 65
multiplicative_expr (71)
    on left: 70 71, on right: 71 72 73
additive_expr (72)
    on left: 72 73, on right: 73 74 75
relational_expr (73)
    on left: 74 75, on right: 75 76 77
equality_expr (74)
    on left: 76 77, on right: 77 78 79
and_expr (75)
    on left: 78 79, on right: 79 80 81
or_expr (76)
    on left: 80 81, on right: 81 82 83
assignment_expr (77)
    on left: 82 83, on right: 83 86 88
var_expr (78)
    on left: 84 85, on right: 87 88
expr (79)
    on left: 86 87 88, on right: 35 37 40 41 42 43 44 46 51 62 63 92
    93 94
macro_expr (80)
    on left: 89 90, on right: 52 91
any_expr (81)
    on left: 91 92, on right: 26
expr_list (82)
    on left: 93 94, on right: 29 30 94
typeexpr (83)
    on left: 95 96, on right: 21 23 84 108 109 114 115 127
nonunion_typeexpr (84)
    on left: 97 98 99 100 101, on right: 95 103 104 113
union_typeexpr (85)
    on left: 102, on right: 96
union_typeexprs (86)
    on left: 103 104, on right: 102 104
tuple_typeexpr (87)
    on left: 105, on right: 99
tuple_typeexpr_args (88)
    on left: 106 107, on right: 105 107
tuple_typeexpr_arg (89)
    on left: 108 109, on right: 106 107
qualified_typeexpr (90)
    on left: 110, on right: 100
qualified_typeexpr_qualifiers (91)
    on left: 111 112, on right: 110 112
specialized_typeexpr (92)
    on left: 113, on right: 101
specialized_typeexpr_specs (93)
    on left: 114 115, on right: 113 115
qualified_typeexpr_qualifier (94)
    on left: 116 117 118 119, on right: 111 112
structure_qualifier (95)
    on left: 120 121, on right: 116
structure_qualifier_decl (96)
    on left: 122 123, on right: 120 121
structure_qualifier_stmts (97)
    on left: 124 125, on right: 121 125
structure_qualifier_stmt (98)
    on left: 126 127, on right: 124 125
interface_qualifier (99)
    on left: 128 129, on right: 117
interface_qualifier_stmts (100)
    on left: 130 131, on right: 129 131
interface_qualifier_stmt (101)
    on left: 132, on right: 130 131
native_qualifier (102)
    on left: 133, on right: 118
range_qualifier (103)
    on left: 134 135, on right: 119
range_qualifier_decl (104)
    on left: 136, on right: 134 135


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_def
    5          | . type_def
    6 func_def: . func_def_signature block_expr
    7         | . func_def_signature "assignment operator =" body_expr
    8 func_def_signature: . func_def_name
    9                   | . func_def_name func_args_tuple
   10                   | . func_def_name "right arrow ->" func_args_tuple
   11                   | . func_def_name func_args_tuple "right arrow ->" func_args_tuple
   12 func_def_name: . "func keyword" "identifier"
   13              | . "func keyword" any_operator
   14              | . "func keyword" "unary keyword" any_operator
   22 type_def: . type_def_name
   23         | . type_def_name typeexpr
   24 type_def_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root                go to state 3
    root_stmts          go to state 4
    root_stmt           go to state 5
    func_def            go to state 6
    func_def_signature  go to state 7
    func_def_name       go to state 8
    type_def            go to state 9
    type_def_name       go to state 10


state 1

   12 func_def_name: "func keyword" . "identifier"
   13              | "func keyword" . any_operator
   14              | "func keyword" . "unary keyword" any_operator
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR

    "identifier"             shift, and go to state 11
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "unary keyword"          shift, and go to state 16

    any_operator  go to state 17


state 2

   24 type_def_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 18


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 19


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_def
    5          | . type_def
    6 func_def: . func_def_signature block_expr
    7         | . func_def_signature "assignment operator =" body_expr
    8 func_def_signature: . func_def_name
    9                   | . func_def_name func_args_tuple
   10                   | . func_def_name "right arrow ->" func_args_tuple
   11                   | . func_def_name func_args_tuple "right arrow ->" func_args_tuple
   12 func_def_name: . "func keyword" "identifier"
   13              | . "func keyword" any_operator
   14              | . "func keyword" "unary keyword" any_operator
   22 type_def: . type_def_name
   23         | . type_def_name typeexpr
   24 type_def_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt           go to state 20
    func_def            go to state 6
    func_def_signature  go to state 7
    func_def_name       go to state 8
    type_def            go to state 9
    type_def_name       go to state 10


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_def .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_def: func_def_signature . block_expr
    7         | func_def_signature . "assignment operator =" body_expr
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"

    "opening braces {"       shift, and go to state 21
    "assignment operator ="  shift, and go to state 22

    block_expr  go to state 23


state 8

    8 func_def_signature: func_def_name .  ["opening braces {", "assignment operator ="]
    9                   | func_def_name . func_args_tuple
   10                   | func_def_name . "right arrow ->" func_args_tuple
   11                   | func_def_name . func_args_tuple "right arrow ->" func_args_tuple
   15 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   16                | . func_arg
   17                | . "opening paranthesis (" func_args "closing paranthesis )"
   20 func_arg: . "identifier"
   21         | . "identifier" typeexpr

    "identifier"             shift, and go to state 24
    "opening paranthesis ("  shift, and go to state 25
    "right arrow ->"         shift, and go to state 26

    $default  reduce using rule 8 (func_def_signature)

    func_args_tuple  go to state 27
    func_arg         go to state 28


state 9

    5 root_stmt: type_def .

    $default  reduce using rule 5 (root_stmt)


state 10

   22 type_def: type_def_name .  ["end of input", "func keyword", "type keyword"]
   23         | type_def_name . typeexpr
   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    $default  reduce using rule 22 (type_def)

    typeexpr                       go to state 37
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 11

   12 func_def_name: "func keyword" "identifier" .

    $default  reduce using rule 12 (func_def_name)


state 12

   66 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 66 (any_operator)


state 13

   67 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 67 (any_operator)


state 14

   68 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 68 (any_operator)


state 15

   69 any_operator: OPERATOR .

    $default  reduce using rule 69 (any_operator)


state 16

   14 func_def_name: "func keyword" "unary keyword" . any_operator
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15

    any_operator  go to state 52


state 17

   13 func_def_name: "func keyword" any_operator .

    $default  reduce using rule 13 (func_def_name)


state 18

   24 type_def_name: "type keyword" "identifier" .

    $default  reduce using rule 24 (type_def_name)


state 19

    0 $accept: root "end of input" .

    $default  accept


state 20

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 21

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   43 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   47 block_expr: "opening braces {" . "closing braces }"
   48           | "opening braces {" . block_expr_exprs "closing braces }"
   49 block_expr_exprs: . block_expr_expr
   50                 | . block_expr_exprs block_expr_expr
   51 block_expr_expr: . expr ";"
   52                | . macro_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   89 macro_expr: . if_expr
   90           | . for_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "if keyword"             shift, and go to state 57
    "for keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "closing braces }"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    if_expr              go to state 65
    for_expr             go to state 66
    block_expr_exprs     go to state 67
    block_expr_expr      go to state 68
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 80
    macro_expr           go to state 81


state 22

    7 func_def: func_def_signature "assignment operator =" . body_expr
   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   45 body_expr: . block_expr
   46          | . expr ";"
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 82
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    body_expr            go to state 83
    block_expr           go to state 84
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 85


state 23

    6 func_def: func_def_signature block_expr .

    $default  reduce using rule 6 (func_def)


state 24

   20 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->", "assignment operator ="]
   21         | "identifier" . typeexpr
   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    $default  reduce using rule 20 (func_arg)

    typeexpr                       go to state 86
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 25

   15 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   17                | "opening paranthesis (" . func_args "closing paranthesis )"
   18 func_args: . func_arg
   19          | . func_args "," func_arg
   20 func_arg: . "identifier"
   21         | . "identifier" typeexpr

    "identifier"             shift, and go to state 24
    "closing paranthesis )"  shift, and go to state 87

    func_args  go to state 88
    func_arg   go to state 89


state 26

   10 func_def_signature: func_def_name "right arrow ->" . func_args_tuple
   15 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   16                | . func_arg
   17                | . "opening paranthesis (" func_args "closing paranthesis )"
   20 func_arg: . "identifier"
   21         | . "identifier" typeexpr

    "identifier"             shift, and go to state 24
    "opening paranthesis ("  shift, and go to state 25

    func_args_tuple  go to state 90
    func_arg         go to state 28


state 27

    9 func_def_signature: func_def_name func_args_tuple .  ["opening braces {", "assignment operator ="]
   11                   | func_def_name func_args_tuple . "right arrow ->" func_args_tuple

    "right arrow ->"  shift, and go to state 91

    $default  reduce using rule 9 (func_def_signature)


state 28

   16 func_args_tuple: func_arg .

    $default  reduce using rule 16 (func_args_tuple)


state 29

   97 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 97 (nonunion_typeexpr)


state 30

  122 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 122 (structure_qualifier_decl)


state 31

  123 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 123 (structure_qualifier_decl)


state 32

  128 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
  129                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 92


state 33

  133 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 93


state 34

  136 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 94


state 35

   98 nonunion_typeexpr: "nil constant" .

    $default  reduce using rule 98 (nonunion_typeexpr)


state 36

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  105               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
  106 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
  107                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
  108 tuple_typeexpr_arg: . typeexpr
  109                   | . "identifier" ":" typeexpr
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 95
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 96
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    tuple_typeexpr_args            go to state 97
    tuple_typeexpr_arg             go to state 98
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 37

   23 type_def: type_def_name typeexpr .

    $default  reduce using rule 23 (type_def)


state 38

   95 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
  103 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr
  113 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 99
    "vertical pipe |"    shift, and go to state 100

    $default  reduce using rule 95 (typeexpr)


state 39

   96 typeexpr: union_typeexpr .

    $default  reduce using rule 96 (typeexpr)


state 40

  102 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
  104 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 101

    $default  reduce using rule 102 (union_typeexpr)


state 41

   99 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 99 (nonunion_typeexpr)


state 42

  100 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 100 (nonunion_typeexpr)


state 43

  110 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  112 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 30
    "object keyword"     shift, and go to state 31
    "interface keyword"  shift, and go to state 32
    "native keyword"     shift, and go to state 33
    "range keyword"      shift, and go to state 34

    $default  reduce using rule 110 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 102
    structure_qualifier           go to state 46
    structure_qualifier_decl      go to state 47
    interface_qualifier           go to state 48
    native_qualifier              go to state 49
    range_qualifier               go to state 50
    range_qualifier_decl          go to state 51


state 44

  101 nonunion_typeexpr: specialized_typeexpr .

    $default  reduce using rule 101 (nonunion_typeexpr)


state 45

  111 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 111 (qualified_typeexpr_qualifiers)


state 46

  116 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 116 (qualified_typeexpr_qualifier)


state 47

  120 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
  121                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 103


state 48

  117 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 117 (qualified_typeexpr_qualifier)


state 49

  118 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 118 (qualified_typeexpr_qualifier)


state 50

  119 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 119 (qualified_typeexpr_qualifier)


state 51

  134 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  135                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 104

    $default  reduce using rule 134 (range_qualifier)


state 52

   14 func_def_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 14 (func_def_name)


state 53

   25 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ":", ";", "assignment operator ="]
   58 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   59             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 105

    $default  reduce using rule 25 (primary_expr)


state 54

   27 primary_expr: "number constant" .

    $default  reduce using rule 27 (primary_expr)


state 55

   28 primary_expr: "string constant" .

    $default  reduce using rule 28 (primary_expr)


state 56

   84 var_expr: "var keyword" . "identifier" typeexpr
   85         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 106


state 57

   41 if_expr: "if keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | "if keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr

    "opening paranthesis ("  shift, and go to state 107


state 58

   43 for_expr: "for keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | "for keyword" . "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr

    "opening paranthesis ("  shift, and go to state 108


state 59

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   26             | "opening paranthesis (" . any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   43 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   89 macro_expr: . if_expr
   90           | . for_expr
   91 any_expr: . macro_expr
   92         | . expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "if keyword"             shift, and go to state 57
    "for keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    if_expr              go to state 65
    for_expr             go to state 66
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 109
    macro_expr           go to state 110
    any_expr             go to state 111


state 60

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   30             | "opening braces {" . expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   31             | "opening braces {" . map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   33 map_expr_pairs: . map_expr_pair
   34               | . map_expr_pairs "," map_expr_pair
   35 map_expr_pair: . primary_expr ":" expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   36            | "opening braces {" . ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   37            | "opening braces {" . ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   38 ifcase_expr_conds: . ifcase_expr_cond
   39                  | . ifcase_expr_conds "," ifcase_expr_cond
   40 ifcase_expr_cond: . expr "if keyword" expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   93 expr_list: . expr
   94          | . expr_list "," expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 112
    map_expr_pairs       go to state 113
    map_expr_pair        go to state 114
    ifcase_expr          go to state 64
    ifcase_expr_conds    go to state 115
    ifcase_expr_cond     go to state 116
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 117
    expr_list            go to state 118


state 61

   47 block_expr: "opening braces {" "closing braces }" .

    $default  reduce using rule 47 (block_expr)


state 62

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   29             | "opening bracket [" . expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   93 expr_list: . expr
   94          | . expr_list "," expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 119
    expr_list            go to state 120


state 63

   53 postfix_expr: primary_expr .

    $default  reduce using rule 53 (postfix_expr)


state 64

   32 primary_expr: ifcase_expr .

    $default  reduce using rule 32 (primary_expr)


state 65

   89 macro_expr: if_expr .

    $default  reduce using rule 89 (macro_expr)


state 66

   90 macro_expr: for_expr .

    $default  reduce using rule 90 (macro_expr)


state 67

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   43 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   48 block_expr: "opening braces {" block_expr_exprs . "closing braces }"
   50 block_expr_exprs: block_expr_exprs . block_expr_expr
   51 block_expr_expr: . expr ";"
   52                | . macro_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   89 macro_expr: . if_expr
   90           | . for_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "if keyword"             shift, and go to state 57
    "for keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "closing braces }"       shift, and go to state 121
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    if_expr              go to state 65
    for_expr             go to state 66
    block_expr_expr      go to state 122
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 80
    macro_expr           go to state 81


state 68

   49 block_expr_exprs: block_expr_expr .

    $default  reduce using rule 49 (block_expr_exprs)


state 69

   54 postfix_expr: postfix_expr . OPERATOR
   55             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | postfix_expr . "." "identifier"
   64 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 123
    "."       shift, and go to state 124

    $default  reduce using rule 64 (prefix_expr)


state 70

   70 multiplicative_expr: prefix_expr .

    $default  reduce using rule 70 (multiplicative_expr)


state 71

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   65            | any_operator . prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr  go to state 63
    ifcase_expr   go to state 64
    postfix_expr  go to state 69
    prefix_expr   go to state 125
    any_operator  go to state 71


state 72

   71 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 126

    $default  reduce using rule 72 (additive_expr)


state 73

   73 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 127

    $default  reduce using rule 74 (relational_expr)


state 74

   75 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   76 equality_expr: relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 128

    $default  reduce using rule 76 (equality_expr)


state 75

   77 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   78 and_expr: equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 129

    $default  reduce using rule 78 (and_expr)


state 76

   79 and_expr: and_expr . AND_OPERATOR equality_expr
   80 or_expr: and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 130

    $default  reduce using rule 80 (or_expr)


state 77

   81 or_expr: or_expr . OR_OPERATOR and_expr
   82 assignment_expr: or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 131

    $default  reduce using rule 82 (assignment_expr)


state 78

   83 assignment_expr: assignment_expr . "assignment operator =" or_expr
   86 expr: assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 132

    $default  reduce using rule 86 (expr)


state 79

   87 expr: var_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]
   88     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 133

    $default  reduce using rule 87 (expr)


state 80

   51 block_expr_expr: expr . ";"

    ";"  shift, and go to state 134


state 81

   52 block_expr_expr: macro_expr .

    $default  reduce using rule 52 (block_expr_expr)


state 82

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   30             | "opening braces {" . expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   31             | "opening braces {" . map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   33 map_expr_pairs: . map_expr_pair
   34               | . map_expr_pairs "," map_expr_pair
   35 map_expr_pair: . primary_expr ":" expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   36            | "opening braces {" . ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   37            | "opening braces {" . ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   38 ifcase_expr_conds: . ifcase_expr_cond
   39                  | . ifcase_expr_conds "," ifcase_expr_cond
   40 ifcase_expr_cond: . expr "if keyword" expr
   41 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   43 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   44         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   47 block_expr: "opening braces {" . "closing braces }"
   48           | "opening braces {" . block_expr_exprs "closing braces }"
   49 block_expr_exprs: . block_expr_expr
   50                 | . block_expr_exprs block_expr_expr
   51 block_expr_expr: . expr ";"
   52                | . macro_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   89 macro_expr: . if_expr
   90           | . for_expr
   93 expr_list: . expr
   94          | . expr_list "," expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "if keyword"             shift, and go to state 57
    "for keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "closing braces }"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 112
    map_expr_pairs       go to state 113
    map_expr_pair        go to state 114
    ifcase_expr          go to state 64
    ifcase_expr_conds    go to state 115
    ifcase_expr_cond     go to state 116
    if_expr              go to state 65
    for_expr             go to state 66
    block_expr_exprs     go to state 67
    block_expr_expr      go to state 68
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 135
    macro_expr           go to state 81
    expr_list            go to state 118


state 83

    7 func_def: func_def_signature "assignment operator =" body_expr .

    $default  reduce using rule 7 (func_def)


state 84

   45 body_expr: block_expr .

    $default  reduce using rule 45 (body_expr)


state 85

   46 body_expr: expr . ";"

    ";"  shift, and go to state 136


state 86

   21 func_arg: "identifier" typeexpr .

    $default  reduce using rule 21 (func_arg)


state 87

   15 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 88

   17 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   19 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 137
    ","                      shift, and go to state 138


state 89

   18 func_args: func_arg .

    $default  reduce using rule 18 (func_args)


state 90

   10 func_def_signature: func_def_name "right arrow ->" func_args_tuple .

    $default  reduce using rule 10 (func_def_signature)


state 91

   11 func_def_signature: func_def_name func_args_tuple "right arrow ->" . func_args_tuple
   15 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   16                | . func_arg
   17                | . "opening paranthesis (" func_args "closing paranthesis )"
   20 func_arg: . "identifier"
   21         | . "identifier" typeexpr

    "identifier"             shift, and go to state 24
    "opening paranthesis ("  shift, and go to state 25

    func_args_tuple  go to state 139
    func_arg         go to state 28


state 92

  128 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
  129                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
  130 interface_qualifier_stmts: . interface_qualifier_stmt
  131                          | . interface_qualifier_stmts interface_qualifier_stmt
  132 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 140
    "closing braces }"  shift, and go to state 141

    interface_qualifier_stmts  go to state 142
    interface_qualifier_stmt   go to state 143


state 93

  133 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 133 (native_qualifier)


state 94

  136 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 136 (range_qualifier_decl)


state 95

   97 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "opening bracket [", "vertical pipe |", ","]
  109 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 144

    $default  reduce using rule 97 (nonunion_typeexpr)


state 96

  108 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 108 (tuple_typeexpr_arg)


state 97

  105 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
  107 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 145
    ","                      shift, and go to state 146


state 98

  106 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 147


state 99

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  113                     | nonunion_typeexpr "opening bracket [" . specialized_typeexpr_specs "closing bracket ]"
  114 specialized_typeexpr_specs: . typeexpr
  115                           | . specialized_typeexpr_specs "," typeexpr
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 148
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    specialized_typeexpr_specs     go to state 149
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 100

   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  103 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    nonunion_typeexpr              go to state 150
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 101

   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  104 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    nonunion_typeexpr              go to state 151
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 102

  112 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 112 (qualified_typeexpr_qualifiers)


state 103

  120 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
  121                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
  124 structure_qualifier_stmts: . structure_qualifier_stmt
  125                          | . structure_qualifier_stmts structure_qualifier_stmt
  126 structure_qualifier_stmt: . "identifier" ";"
  127                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 152
    "closing braces }"  shift, and go to state 153

    structure_qualifier_stmts  go to state 154
    structure_qualifier_stmt   go to state 155


state 104

  135 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 156


state 105

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   59             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   60 call_args: . call_arg
   61          | . call_args "," call_arg
   62 call_arg: . "identifier" ":" expr
   63         | . expr
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 157
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "closing paranthesis )"  shift, and go to state 158
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    call_args            go to state 159
    call_arg             go to state 160
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 161


state 106

   84 var_expr: "var keyword" "identifier" . typeexpr
   85         | "var keyword" "identifier" .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]
   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    $default  reduce using rule 85 (var_expr)

    typeexpr                       go to state 162
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 107

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr: "if keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr
   42        | "if keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr "else keyword" body_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 163


state 108

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   43 for_expr: "for keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr
   44         | "for keyword" "opening paranthesis (" . expr ";" expr ";" expr "closing paranthesis )" body_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 164


state 109

   92 any_expr: expr .

    $default  reduce using rule 92 (any_expr)


state 110

   91 any_expr: macro_expr .

    $default  reduce using rule 91 (any_expr)


state 111

   26 primary_expr: "opening paranthesis (" any_expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 165


state 112

   35 map_expr_pair: primary_expr . ":" expr
   53 postfix_expr: primary_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "closing braces }", ".", ",", ";", "assignment operator ="]

    ":"  shift, and go to state 166

    $default  reduce using rule 53 (postfix_expr)


state 113

   31 primary_expr: "opening braces {" map_expr_pairs . "closing braces }"
   34 map_expr_pairs: map_expr_pairs . "," map_expr_pair

    "closing braces }"  shift, and go to state 167
    ","                 shift, and go to state 168


state 114

   33 map_expr_pairs: map_expr_pair .

    $default  reduce using rule 33 (map_expr_pairs)


state 115

   36 ifcase_expr: "opening braces {" ifcase_expr_conds . "closing braces }"
   37            | "opening braces {" ifcase_expr_conds . "," expr "otherwise keyword" "closing braces }"
   39 ifcase_expr_conds: ifcase_expr_conds . "," ifcase_expr_cond

    "closing braces }"  shift, and go to state 169
    ","                 shift, and go to state 170


state 116

   38 ifcase_expr_conds: ifcase_expr_cond .

    $default  reduce using rule 38 (ifcase_expr_conds)


state 117

   40 ifcase_expr_cond: expr . "if keyword" expr
   93 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 171

    $default  reduce using rule 93 (expr_list)


state 118

   30 primary_expr: "opening braces {" expr_list . "closing braces }"
   94 expr_list: expr_list . "," expr

    "closing braces }"  shift, and go to state 172
    ","                 shift, and go to state 173


state 119

   93 expr_list: expr .

    $default  reduce using rule 93 (expr_list)


state 120

   29 primary_expr: "opening bracket [" expr_list . "closing bracket ]"
   94 expr_list: expr_list . "," expr

    "closing bracket ]"  shift, and go to state 174
    ","                  shift, and go to state 173


state 121

   48 block_expr: "opening braces {" block_expr_exprs "closing braces }" .

    $default  reduce using rule 48 (block_expr)


state 122

   50 block_expr_exprs: block_expr_exprs block_expr_expr .

    $default  reduce using rule 50 (block_expr_exprs)


state 123

   54 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 54 (postfix_expr)


state 124

   55 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 175


state 125

   65 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 65 (prefix_expr)


state 126

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   71 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr  go to state 63
    ifcase_expr   go to state 64
    postfix_expr  go to state 69
    prefix_expr   go to state 176
    any_operator  go to state 71


state 127

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   73 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 177


state 128

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   75 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 178


state 129

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   77 equality_expr: equality_expr EQUALITY_OPERATOR . relational_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 179


state 130

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   79 and_expr: and_expr AND_OPERATOR . equality_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 180


state 131

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   81 or_expr: or_expr OR_OPERATOR . and_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 181


state 132

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   83 assignment_expr: assignment_expr "assignment operator =" . or_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 182


state 133

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   88 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 183


state 134

   51 block_expr_expr: expr ";" .

    $default  reduce using rule 51 (block_expr_expr)


state 135

   40 ifcase_expr_cond: expr . "if keyword" expr
   51 block_expr_expr: expr . ";"
   93 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 171
    ";"           shift, and go to state 134

    $default  reduce using rule 93 (expr_list)


state 136

   46 body_expr: expr ";" .

    $default  reduce using rule 46 (body_expr)


state 137

   17 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 17 (func_args_tuple)


state 138

   19 func_args: func_args "," . func_arg
   20 func_arg: . "identifier"
   21         | . "identifier" typeexpr

    "identifier"  shift, and go to state 24

    func_arg  go to state 184


state 139

   11 func_def_signature: func_def_name func_args_tuple "right arrow ->" func_args_tuple .

    $default  reduce using rule 11 (func_def_signature)


state 140

  132 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 132 (interface_qualifier_stmt)


state 141

  128 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 128 (interface_qualifier)


state 142

  129 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
  131 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
  132 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 140
    "closing braces }"  shift, and go to state 185

    interface_qualifier_stmt  go to state 186


state 143

  130 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 130 (interface_qualifier_stmts)


state 144

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  109 tuple_typeexpr_arg: "identifier" ":" . typeexpr
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 187
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 145

  105 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 105 (tuple_typeexpr)


state 146

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  107 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
  108 tuple_typeexpr_arg: . typeexpr
  109                   | . "identifier" ":" typeexpr
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 95
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 96
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    tuple_typeexpr_arg             go to state 188
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 147

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  106 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
  108 tuple_typeexpr_arg: . typeexpr
  109                   | . "identifier" ":" typeexpr
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 95
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 96
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    tuple_typeexpr_arg             go to state 189
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 148

  114 specialized_typeexpr_specs: typeexpr .

    $default  reduce using rule 114 (specialized_typeexpr_specs)


state 149

  113 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs . "closing bracket ]"
  115 specialized_typeexpr_specs: specialized_typeexpr_specs . "," typeexpr

    "closing bracket ]"  shift, and go to state 190
    ","                  shift, and go to state 191


state 150

  103 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  113 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 99

    $default  reduce using rule 103 (union_typeexprs)


state 151

  104 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  113 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 99

    $default  reduce using rule 104 (union_typeexprs)


state 152

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  126 structure_qualifier_stmt: "identifier" . ";"
  127                         | "identifier" . typeexpr ";"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36
    ";"                      shift, and go to state 192

    typeexpr                       go to state 193
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 153

  120 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 120 (structure_qualifier)


state 154

  121 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
  125 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
  126 structure_qualifier_stmt: . "identifier" ";"
  127                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 152
    "closing braces }"  shift, and go to state 194

    structure_qualifier_stmt  go to state 195


state 155

  124 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 124 (structure_qualifier_stmts)


state 156

  135 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 196


state 157

   25 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   58 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   59             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   62 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 105
    ":"                      shift, and go to state 197

    $default  reduce using rule 25 (primary_expr)


state 158

   58 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 58 (postfix_expr)


state 159

   59 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   61 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 198
    ","                      shift, and go to state 199


state 160

   60 call_args: call_arg .

    $default  reduce using rule 60 (call_args)


state 161

   63 call_arg: expr .

    $default  reduce using rule 63 (call_arg)


state 162

   84 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 84 (var_expr)


state 163

   41 if_expr: "if keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr
   42        | "if keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr "else keyword" body_expr

    "closing paranthesis )"  shift, and go to state 200


state 164

   43 for_expr: "for keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr
   44         | "for keyword" "opening paranthesis (" expr . ";" expr ";" expr "closing paranthesis )" body_expr

    "closing paranthesis )"  shift, and go to state 201
    ";"                      shift, and go to state 202


state 165

   26 primary_expr: "opening paranthesis (" any_expr "closing paranthesis )" .

    $default  reduce using rule 26 (primary_expr)


state 166

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   35 map_expr_pair: primary_expr ":" . expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 203


state 167

   31 primary_expr: "opening braces {" map_expr_pairs "closing braces }" .

    $default  reduce using rule 31 (primary_expr)


state 168

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   34 map_expr_pairs: map_expr_pairs "," . map_expr_pair
   35 map_expr_pair: . primary_expr ":" expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"

    "identifier"             shift, and go to state 204
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr   go to state 205
    map_expr_pair  go to state 206
    ifcase_expr    go to state 64


state 169

   36 ifcase_expr: "opening braces {" ifcase_expr_conds "closing braces }" .

    $default  reduce using rule 36 (ifcase_expr)


state 170

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   37            | "opening braces {" ifcase_expr_conds "," . expr "otherwise keyword" "closing braces }"
   39 ifcase_expr_conds: ifcase_expr_conds "," . ifcase_expr_cond
   40 ifcase_expr_cond: . expr "if keyword" expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    ifcase_expr_cond     go to state 207
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 208


state 171

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   40 ifcase_expr_cond: expr "if keyword" . expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 209


state 172

   30 primary_expr: "opening braces {" expr_list "closing braces }" .

    $default  reduce using rule 30 (primary_expr)


state 173

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr
   94 expr_list: expr_list "," . expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 210


state 174

   29 primary_expr: "opening bracket [" expr_list "closing bracket ]" .

    $default  reduce using rule 29 (primary_expr)


state 175

   55 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   56             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   57             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 211

    $default  reduce using rule 57 (postfix_expr)


state 176

   71 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 71 (multiplicative_expr)


state 177

   71 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   73 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 126

    $default  reduce using rule 73 (additive_expr)


state 178

   73 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   75 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 127

    $default  reduce using rule 75 (relational_expr)


state 179

   75 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   77 equality_expr: equality_expr EQUALITY_OPERATOR relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 128

    $default  reduce using rule 77 (equality_expr)


state 180

   77 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   79 and_expr: and_expr AND_OPERATOR equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 129

    $default  reduce using rule 79 (and_expr)


state 181

   79 and_expr: and_expr . AND_OPERATOR equality_expr
   81 or_expr: or_expr OR_OPERATOR and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 130

    $default  reduce using rule 81 (or_expr)


state 182

   81 or_expr: or_expr . OR_OPERATOR and_expr
   83 assignment_expr: assignment_expr "assignment operator =" or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 131

    $default  reduce using rule 83 (assignment_expr)


state 183

   83 assignment_expr: assignment_expr . "assignment operator =" or_expr
   88 expr: var_expr "assignment operator =" assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 132

    $default  reduce using rule 88 (expr)


state 184

   19 func_args: func_args "," func_arg .

    $default  reduce using rule 19 (func_args)


state 185

  129 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 129 (interface_qualifier)


state 186

  131 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 131 (interface_qualifier_stmts)


state 187

  109 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 109 (tuple_typeexpr_arg)


state 188

  107 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 107 (tuple_typeexpr_args)


state 189

  106 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 106 (tuple_typeexpr_args)


state 190

  113 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]" .

    $default  reduce using rule 113 (specialized_typeexpr)


state 191

   95 typeexpr: . nonunion_typeexpr
   96         | . union_typeexpr
   97 nonunion_typeexpr: . "identifier"
   98                  | . "nil constant"
   99                  | . tuple_typeexpr
  100                  | . qualified_typeexpr
  101                  | . specialized_typeexpr
  102 union_typeexpr: . union_typeexprs
  103 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  104                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  105 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  110 qualified_typeexpr: . qualified_typeexpr_qualifiers
  111 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  112                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  113 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  115 specialized_typeexpr_specs: specialized_typeexpr_specs "," . typeexpr
  116 qualified_typeexpr_qualifier: . structure_qualifier
  117                             | . interface_qualifier
  118                             | . native_qualifier
  119                             | . range_qualifier
  120 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  121                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_decl: . "value keyword"
  123                         | . "object keyword"
  128 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  129                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  133 native_qualifier: . "native keyword" "identifier"
  134 range_qualifier: . range_qualifier_decl
  135                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  136 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 29
    "value keyword"          shift, and go to state 30
    "object keyword"         shift, and go to state 31
    "interface keyword"      shift, and go to state 32
    "native keyword"         shift, and go to state 33
    "range keyword"          shift, and go to state 34
    "nil constant"           shift, and go to state 35
    "opening paranthesis ("  shift, and go to state 36

    typeexpr                       go to state 212
    nonunion_typeexpr              go to state 38
    union_typeexpr                 go to state 39
    union_typeexprs                go to state 40
    tuple_typeexpr                 go to state 41
    qualified_typeexpr             go to state 42
    qualified_typeexpr_qualifiers  go to state 43
    specialized_typeexpr           go to state 44
    qualified_typeexpr_qualifier   go to state 45
    structure_qualifier            go to state 46
    structure_qualifier_decl       go to state 47
    interface_qualifier            go to state 48
    native_qualifier               go to state 49
    range_qualifier                go to state 50
    range_qualifier_decl           go to state 51


state 192

  126 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 126 (structure_qualifier_stmt)


state 193

  127 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 213


state 194

  121 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 121 (structure_qualifier)


state 195

  125 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 125 (structure_qualifier_stmts)


state 196

  135 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 214


state 197

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 call_arg: "identifier" ":" . expr
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 215


state 198

   59 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 59 (postfix_expr)


state 199

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   61 call_args: call_args "," . call_arg
   62 call_arg: . "identifier" ":" expr
   63         | . expr
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 157
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    call_arg             go to state 216
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 161


state 200

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr
   42        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr "else keyword" body_expr
   45 body_expr: . block_expr
   46          | . expr ";"
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 82
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    body_expr            go to state 217
    block_expr           go to state 84
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 85


state 201

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   43 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr
   45 body_expr: . block_expr
   46          | . expr ";"
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 82
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    body_expr            go to state 218
    block_expr           go to state 84
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 85


state 202

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 for_expr: "for keyword" "opening paranthesis (" expr ";" . expr ";" expr "closing paranthesis )" body_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 219


state 203

   35 map_expr_pair: primary_expr ":" expr .

    $default  reduce using rule 35 (map_expr_pair)


state 204

   25 primary_expr: "identifier" .

    $default  reduce using rule 25 (primary_expr)


state 205

   35 map_expr_pair: primary_expr . ":" expr

    ":"  shift, and go to state 166


state 206

   34 map_expr_pairs: map_expr_pairs "," map_expr_pair .

    $default  reduce using rule 34 (map_expr_pairs)


state 207

   39 ifcase_expr_conds: ifcase_expr_conds "," ifcase_expr_cond .

    $default  reduce using rule 39 (ifcase_expr_conds)


state 208

   37 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr . "otherwise keyword" "closing braces }"
   40 ifcase_expr_cond: expr . "if keyword" expr

    "if keyword"         shift, and go to state 171
    "otherwise keyword"  shift, and go to state 220


state 209

   40 ifcase_expr_cond: expr "if keyword" expr .

    $default  reduce using rule 40 (ifcase_expr_cond)


state 210

   94 expr_list: expr_list "," expr .

    $default  reduce using rule 94 (expr_list)


state 211

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   60 call_args: . call_arg
   61          | . call_args "," call_arg
   62 call_arg: . "identifier" ":" expr
   63         | . expr
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 157
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "closing paranthesis )"  shift, and go to state 221
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    call_args            go to state 222
    call_arg             go to state 160
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 161


state 212

  115 specialized_typeexpr_specs: specialized_typeexpr_specs "," typeexpr .

    $default  reduce using rule 115 (specialized_typeexpr_specs)


state 213

  127 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 127 (structure_qualifier_stmt)


state 214

  135 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 223


state 215

   62 call_arg: "identifier" ":" expr .

    $default  reduce using rule 62 (call_arg)


state 216

   61 call_args: call_args "," call_arg .

    $default  reduce using rule 61 (call_args)


state 217

   41 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr .  ["identifier", "number constant", "string constant", MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "var keyword", "if keyword", "for keyword", "opening paranthesis (", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket ["]
   42        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr . "else keyword" body_expr

    "else keyword"  shift, and go to state 224

    $default  reduce using rule 41 (if_expr)


state 218

   43 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr .

    $default  reduce using rule 43 (for_expr)


state 219

   44 for_expr: "for keyword" "opening paranthesis (" expr ";" expr . ";" expr "closing paranthesis )" body_expr

    ";"  shift, and go to state 225


state 220

   37 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" . "closing braces }"

    "closing braces }"  shift, and go to state 226


state 221

   55 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 55 (postfix_expr)


state 222

   56 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   61 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 227
    ","                      shift, and go to state 199


state 223

  135 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 135 (range_qualifier)


state 224

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   42 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" . body_expr
   45 body_expr: . block_expr
   46          | . expr ";"
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 82
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    body_expr            go to state 228
    block_expr           go to state 84
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 85


state 225

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" . expr "closing paranthesis )" body_expr
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 229


state 226

   37 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }" .

    $default  reduce using rule 37 (ifcase_expr)


state 227

   56 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 56 (postfix_expr)


state 228

   42 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr .

    $default  reduce using rule 42 (if_expr)


state 229

   44 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr . "closing paranthesis )" body_expr

    "closing paranthesis )"  shift, and go to state 230


state 230

   25 primary_expr: . "identifier"
   26             | . "opening paranthesis (" any_expr "closing paranthesis )"
   27             | . "number constant"
   28             | . "string constant"
   29             | . "opening bracket [" expr_list "closing bracket ]"
   30             | . "opening braces {" expr_list "closing braces }"
   31             | . "opening braces {" map_expr_pairs "closing braces }"
   32             | . ifcase_expr
   36 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   37            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" . body_expr
   45 body_expr: . block_expr
   46          | . expr ";"
   47 block_expr: . "opening braces {" "closing braces }"
   48           | . "opening braces {" block_expr_exprs "closing braces }"
   53 postfix_expr: . primary_expr
   54             | . postfix_expr OPERATOR
   55             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | . postfix_expr "." "identifier"
   58             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   59             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   64 prefix_expr: . postfix_expr
   65            | . any_operator prefix_expr
   66 any_operator: . MULTIPLICATIVE_OPERATOR
   67             | . ADDITIVE_OPERATOR
   68             | . RELATIONAL_OPERATOR
   69             | . OPERATOR
   70 multiplicative_expr: . prefix_expr
   71                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: . multiplicative_expr
   73              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: . additive_expr
   75                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: . relational_expr
   77              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: . equality_expr
   79         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: . and_expr
   81        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: . or_expr
   83                | . assignment_expr "assignment operator =" or_expr
   84 var_expr: . "var keyword" "identifier" typeexpr
   85         | . "var keyword" "identifier"
   86 expr: . assignment_expr
   87     | . var_expr
   88     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 12
    ADDITIVE_OPERATOR        shift, and go to state 13
    RELATIONAL_OPERATOR      shift, and go to state 14
    OPERATOR                 shift, and go to state 15
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 59
    "opening braces {"       shift, and go to state 82
    "opening bracket ["      shift, and go to state 62

    primary_expr         go to state 63
    ifcase_expr          go to state 64
    body_expr            go to state 231
    block_expr           go to state 84
    postfix_expr         go to state 69
    prefix_expr          go to state 70
    any_operator         go to state 71
    multiplicative_expr  go to state 72
    additive_expr        go to state 73
    relational_expr      go to state 74
    equality_expr        go to state 75
    and_expr             go to state 76
    or_expr              go to state 77
    assignment_expr      go to state 78
    var_expr             go to state 79
    expr                 go to state 85


state 231

   44 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr .

    $default  reduce using rule 44 (for_expr)
