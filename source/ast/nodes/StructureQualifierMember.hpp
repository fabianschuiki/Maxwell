/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include "interfaces.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>
#include <cstdio>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class StructureQualifierMember : public Node
{
public:
	StructureQualifierMember() : Node(),
		interfaceCallable(this),
		interfaceNamed(this),
		interfaceGraph(this) {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kStructureQualifierMember;
	}

	virtual bool implements(Interface i)
	{
		if (Node::implements(i)) return true;
		if (i == kCallableInterface) return true;
		if (i == kNamedInterface) return true;
		if (i == kGraphInterface) return true;
		return false;
	}

	virtual string getClassName() const { return "StructureQualifierMember"; }

	virtual NodePtr copy()
	{
		Ptr c (new StructureQualifierMember);
		Node::copy(this->graphPrev, c->graphPrev);
		Node::copy(this->name, c->name);
		Node::copy(this->type, c->type);
		Node::copy(this->implSetter, c->implSetter);
		Node::copy(this->implGetter, c->implGetter);
		return c;
	}

	void setGraphPrev(const NodePtr& v)
	{
		if (!v && graphPrev) {
			modify("graphPrev");
			graphPrev.reset();
		}
		if (!graphPrev || v->getId() != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	void setGraphPrev(const NodeId& v)
	{
		if (v != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	const NodePtr& getGraphPrev(bool required = true)
	{
		const NodePtr& v = graphPrev.get(repository);
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
		}
		return v;
	}

	void setName(const string& v)
	{
		if (!equal(v, name)) {
			modify("name");
			name = v;
		}
	}
	const string& getName(bool required = true)
	{
		const string& v = name;
		if (required && v.empty()) {
			throw runtime_error("Node " + getId().str() + " is required to have a non-empty string name set.");
		}
		return v;
	}

	void setType(const NodePtr& v)
	{
		if (v && !v->isKindOf(kNamedTypeExpr) && !v->isKindOf(kNilTypeExpr) && !v->isKindOf(kUnionTypeExpr) && !v->isKindOf(kTupleTypeExpr) && !v->isKindOf(kQualifiedTypeExpr) && !v->isKindOf(kSpecializedTypeExpr) && !v->isKindOf(kFuncTypeExpr)) {
			throw runtime_error("'type' of " + id.str() + " needs to be of kind {NamedTypeExpr, NilTypeExpr, UnionTypeExpr, TupleTypeExpr, QualifiedTypeExpr, SpecializedTypeExpr, FuncTypeExpr} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, type)) {
			modify("type");
			type = v;
		}
	}
	const NodePtr& getType(bool required = true)
	{
		const NodePtr& v = type;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have type set to a non-null value.");
		}
		return v;
	}

	void setImplSetter(const NodePtr& v)
	{
		if (v && !v->isKindOf(kImplAccessor)) {
			throw runtime_error("'implSetter' of " + id.str() + " needs to be of kind {ImplAccessor} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, implSetter)) {
			modify("implSetter");
			implSetter = v;
		}
	}
	const NodePtr& getImplSetter(bool required = true)
	{
		const NodePtr& v = implSetter;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have implSetter set to a non-null value.");
		}
		return v;
	}

	void setImplGetter(const NodePtr& v)
	{
		if (v && !v->isKindOf(kImplAccessor)) {
			throw runtime_error("'implGetter' of " + id.str() + " needs to be of kind {ImplAccessor} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, implGetter)) {
			modify("implGetter");
			implGetter = v;
		}
	}
	const NodePtr& getImplGetter(bool required = true)
	{
		const NodePtr& v = implGetter;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have implGetter set to a non-null value.");
		}
		return v;
	}

	virtual string describe(int depth = -1)
	{
		stringstream str, b;
		if (depth == 0) return "StructureQualifierMember{â€¦}";
		str << "StructureQualifierMember{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
		if (!this->name.empty()) b << endl << "  \033[1mname\033[0m = \033[33m\"" << this->name << "\"\033[0m";
		if (this->type) b << endl << "  \033[1mtype\033[0m = " << indent(this->type->describe(depth-1));
		if (this->implSetter) b << endl << "  \033[1mimplSetter\033[0m = " << indent(this->implSetter->describe(depth-1));
		if (this->implGetter) b << endl << "  \033[1mimplGetter\033[0m = " << indent(this->implGetter->describe(depth-1));
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev);
		e.encode(this->name);
		e.encode(this->type);
		e.encode(this->implSetter);
		e.encode(this->implGetter);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev);
		d.decode(this->name);
		d.decode(this->type);
		d.decode(this->implSetter);
		d.decode(this->implGetter);
	}

	virtual void updateHierarchyOfChildren()
	{
		if (this->type) this->type->updateHierarchy(id + "type", repository, this);
		if (this->implSetter) this->implSetter->updateHierarchy(id + "implSetter", repository, this);
		if (this->implGetter) this->implGetter->updateHierarchy(id + "implGetter", repository, this);
	}

	virtual const NodePtr& resolvePath(const string& path)
	{
		size_t size = path.size();
		// .*
		if (true) {
			// graphPrev.*
			if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
				// graphPrev
				if (size == 9) {
					return getGraphPrev();
				} else if (path[9] == '.') {
					return getGraphPrev()->resolvePath(path.substr(10));
				}
			}
			// impl.*
			if (size >= 4 && path[0] == 'i' && path[1] == 'm' && path[2] == 'p' && path[3] == 'l') {
				// implGetter.*
				if (size >= 10 && path[4] == 'G' && path[5] == 'e' && path[6] == 't' && path[7] == 't' && path[8] == 'e' && path[9] == 'r') {
					// implGetter
					if (size == 10) {
						return getImplGetter();
					} else if (path[10] == '.') {
						return getImplGetter()->resolvePath(path.substr(11));
					}
				}
				// implSetter.*
				if (size >= 10 && path[4] == 'S' && path[5] == 'e' && path[6] == 't' && path[7] == 't' && path[8] == 'e' && path[9] == 'r') {
					// implSetter
					if (size == 10) {
						return getImplSetter();
					} else if (path[10] == '.') {
						return getImplSetter()->resolvePath(path.substr(11));
					}
				}
			}
			// type.*
			if (size >= 4 && path[0] == 't' && path[1] == 'y' && path[2] == 'p' && path[3] == 'e') {
				// type
				if (size == 4) {
					return getType();
				} else if (path[4] == '.') {
					return getType()->resolvePath(path.substr(5));
				}
			}
		}
		throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
	}

	virtual NodeVector getChildren()
	{
		NodeVector v;
		if (const NodePtr& n = this->getType(false)) v.push_back(n);
		if (const NodePtr& n = this->getImplSetter(false)) v.push_back(n);
		if (const NodePtr& n = this->getImplGetter(false)) v.push_back(n);
		return v;
	}

	virtual bool equalTo(const NodePtr& o)
	{
		const shared_ptr<StructureQualifierMember>& other = boost::dynamic_pointer_cast<StructureQualifierMember>(o);
		if (!other) return false;
		if (!equal(this->graphPrev, other->graphPrev)) return false;
		if (!equal(this->name, other->name)) return false;
		if (!equal(this->type, other->type)) return false;
		if (!equal(this->implSetter, other->implSetter)) return false;
		if (!equal(this->implGetter, other->implGetter)) return false;
		return true;
	}

	// Interfaces
	virtual CallableInterface* asCallable() { return &this->interfaceCallable; }
	virtual NamedInterface* asNamed() { return &this->interfaceNamed; }
	virtual GraphInterface* asGraph() { return &this->interfaceGraph; }

	typedef boost::shared_ptr<StructureQualifierMember> Ptr;
	template<typename T> static Ptr from(const T& n) { return boost::dynamic_pointer_cast<StructureQualifierMember>(n); }
	template<typename T> static Ptr needFrom(const T& n) { Ptr r = boost::dynamic_pointer_cast<StructureQualifierMember>(n); if (!r) throw std::runtime_error("Node " + n->getId().str() + " cannot be dynamically casted to StructureQualifierMember."); return r; }
protected:
	NodeRef graphPrev;
	string name;
	NodePtr type;
	NodePtr implSetter;
	NodePtr implGetter;

	// Interfaces
	CallableInterfaceImpl<StructureQualifierMember> interfaceCallable;
	NamedInterfaceImpl<StructureQualifierMember> interfaceNamed;
	GraphInterfaceImpl<StructureQualifierMember> interfaceGraph;
};

} // namespace ast