/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "Node.hpp"
#include <vector>
#include <string>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using boost::shared_ptr;
using std::runtime_error;

class FunctionDefinition : public Node
{
public:
	FunctionDefinition() : Node() {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kFunctionDefinition;
	}

	void setName(const string& v)
	{
		if (v != name) {
			modify();
			name = v;
		}
	}
	const string& getName()
	{
		return name;
	}

	void setIn(const shared_ptr<Node>& v)
	{
		if (v && !v->isKindOf(kFuncArgTuple)) {
			throw std::runtime_error("'in' needs to be of kind {FuncArgTuple} or implement interface {}.");
		}
		if (v != in) {
			modify();
			in = v;
		}
	}
	const shared_ptr<Node>& getIn()
	{
		return in;
	}

	void setOut(const shared_ptr<Node>& v)
	{
		if (v && !v->isKindOf(kFuncArgTuple)) {
			throw std::runtime_error("'out' needs to be of kind {FuncArgTuple} or implement interface {}.");
		}
		if (v != out) {
			modify();
			out = v;
		}
	}
	const shared_ptr<Node>& getOut()
	{
		return out;
	}

	void setBody(const shared_ptr<Node>& v)
	{
		if (v && !v->isKindOf(kFuncBody)) {
			throw std::runtime_error("'body' needs to be of kind {FuncBody} or implement interface {}.");
		}
		if (v != body) {
			modify();
			body = v;
		}
	}
	const shared_ptr<Node>& getBody()
	{
		return body;
	}

protected:
	string name;
	shared_ptr<Node> in;
	shared_ptr<Node> out;
	shared_ptr<Node> body;
};

} // namespace ast