/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include "interfaces.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class IfStmt : public Node
{
public:
	IfStmt() : Node(),
		interfaceGraph(this) {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kIfStmt;
	}

	virtual bool implements(Interface i)
	{
		if (Node::implements(i)) return true;
		if (i == kGraphInterface) return true;
		return false;
	}

	virtual string getClassName() const { return "IfStmt"; }

	void setGraphPrev(const NodePtr& v)
	{
		if (!v && graphPrev) {
			modify("graphPrev");
			graphPrev.reset();
		}
		if (!graphPrev || v->getId() != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	void setGraphPrev(const NodeId& v)
	{
		if (v != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	const NodePtr& getGraphPrev(bool required = true)
	{
		const NodePtr& v = graphPrev.get(repository);
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
		}
		return v;
	}

	void setCond(const NodePtr& v)
	{
		if (v && !v->implements(kTypeInterface)) {
			throw runtime_error("'cond' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, cond)) {
			modify("cond");
			cond = v;
		}
	}
	const NodePtr& getCond(bool required = true)
	{
		const NodePtr& v = cond;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have cond set to a non-null value.");
		}
		return v;
	}

	void setBody(const NodePtr& v)
	{
		if (v && !v->isKindOf(kBlockStmt) && !v->isKindOf(kExprStmt) && !v->isKindOf(kIfStmt)) {
			throw runtime_error("'body' of " + id.str() + " needs to be of kind {BlockStmt, ExprStmt, IfStmt} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, body)) {
			modify("body");
			body = v;
		}
	}
	const NodePtr& getBody(bool required = true)
	{
		const NodePtr& v = body;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have body set to a non-null value.");
		}
		return v;
	}

	void setElseStmt(const NodePtr& v)
	{
		if (v && !v->isKindOf(kBlockStmt) && !v->isKindOf(kExprStmt) && !v->isKindOf(kIfStmt)) {
			throw runtime_error("'elseStmt' of " + id.str() + " needs to be of kind {BlockStmt, ExprStmt, IfStmt} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, elseStmt)) {
			modify("elseStmt");
			elseStmt = v;
		}
	}
	const NodePtr& getElseStmt(bool required = true)
	{
		const NodePtr& v = elseStmt;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have elseStmt set to a non-null value.");
		}
		return v;
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "IfStmt{â€¦}";
		stringstream str, b;
		str << "IfStmt{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
		if (this->cond) b << endl << "  \033[1mcond\033[0m = " << indent(this->cond->describe(depth-1));
		if (this->body) b << endl << "  \033[1mbody\033[0m = " << indent(this->body->describe(depth-1));
		if (this->elseStmt) b << endl << "  \033[1melseStmt\033[0m = " << indent(this->elseStmt->describe(depth-1));
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev);
		e.encode(this->cond);
		e.encode(this->body);
		e.encode(this->elseStmt);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev);
		d.decode(this->cond);
		d.decode(this->body);
		d.decode(this->elseStmt);
	}

	virtual void updateHierarchyOfChildren()
	{
		if (this->cond) this->cond->updateHierarchy(id + "cond", repository, this);
		if (this->body) this->body->updateHierarchy(id + "body", repository, this);
		if (this->elseStmt) this->elseStmt->updateHierarchy(id + "elseStmt", repository, this);
	}

	virtual const NodePtr& resolvePath(const string& path)
	{
		size_t size = path.size();
		// .*
		if (true) {
			// body.*
			if (size >= 4 && path[0] == 'b' && path[1] == 'o' && path[2] == 'd' && path[3] == 'y') {
				// body
				if (size == 4) {
					return getBody();
				} else if (path[4] == '.') {
					return getBody()->resolvePath(path.substr(5));
				}
			}
			// cond.*
			if (size >= 4 && path[0] == 'c' && path[1] == 'o' && path[2] == 'n' && path[3] == 'd') {
				// cond
				if (size == 4) {
					return getCond();
				} else if (path[4] == '.') {
					return getCond()->resolvePath(path.substr(5));
				}
			}
			// elseStmt.*
			if (size >= 8 && path[0] == 'e' && path[1] == 'l' && path[2] == 's' && path[3] == 'e' && path[4] == 'S' && path[5] == 't' && path[6] == 'm' && path[7] == 't') {
				// elseStmt
				if (size == 8) {
					return getElseStmt();
				} else if (path[8] == '.') {
					return getElseStmt()->resolvePath(path.substr(9));
				}
			}
			// graphPrev.*
			if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
				// graphPrev
				if (size == 9) {
					return getGraphPrev();
				} else if (path[9] == '.') {
					return getGraphPrev()->resolvePath(path.substr(10));
				}
			}
		}
		throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
	}

	virtual NodeVector getChildren()
	{
		NodeVector v;
		if (const NodePtr& n = this->getCond(false)) v.push_back(n);
		if (const NodePtr& n = this->getBody(false)) v.push_back(n);
		if (const NodePtr& n = this->getElseStmt(false)) v.push_back(n);
		return v;
	}

	virtual bool equalTo(const NodePtr& o)
	{
		const shared_ptr<IfStmt>& other = boost::dynamic_pointer_cast<IfStmt>(o);
		if (!other) return false;
		if (!equal(this->graphPrev, other->graphPrev)) return false;
		if (!equal(this->cond, other->cond)) return false;
		if (!equal(this->body, other->body)) return false;
		if (!equal(this->elseStmt, other->elseStmt)) return false;
		return true;
	}

	// Interfaces
	virtual GraphInterface* asGraph() { return &this->interfaceGraph; }

	typedef boost::shared_ptr<IfStmt> Ptr;
	template<typename T> static Ptr from(const T& n) { return boost::dynamic_pointer_cast<IfStmt>(n); }
	template<typename T> static Ptr needFrom(const T& n) { Ptr r = boost::dynamic_pointer_cast<IfStmt>(n); if (!r) throw std::runtime_error("Node " + n->getId().str() + " cannot be dynamically casted to IfStmt."); return r; }
protected:
	NodeRef graphPrev;
	NodePtr cond;
	NodePtr body;
	NodePtr elseStmt;

	// Interfaces
	GraphInterfaceImpl<IfStmt> interfaceGraph;
};

} // namespace ast