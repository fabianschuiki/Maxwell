Terminals which are not used

   "symbol"
   "incase keyword"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name block_expr
    7          | func_decl_name func_args_tuple block_expr
    8          | func_decl_name "right arrow ->" func_args_tuple block_expr
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple block_expr

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 primary_expr: "identifier"
   24             | "opening paranthesis (" any_expr "closing paranthesis )"
   25             | "number constant"
   26             | "string constant"
   27             | "opening bracket [" expr_list "closing bracket ]"
   28             | "opening braces {" expr_list "closing braces }"
   29             | "opening braces {" map_expr_pairs "closing braces }"
   30             | ifcase_expr

   31 map_expr_pairs: map_expr_pair
   32               | map_expr_pairs "," map_expr_pair

   33 map_expr_pair: primary_expr ":" expr

   34 ifcase_expr: "opening braces {" ifcase_expr_conds "closing braces }"
   35            | "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"

   36 ifcase_expr_conds: ifcase_expr_cond
   37                  | ifcase_expr_conds "," ifcase_expr_cond

   38 ifcase_expr_cond: expr "if keyword" expr

   39 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr

   41 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr

   43 body_expr: block_expr
   44          | expr ";"

   45 block_expr: "opening braces {" "closing braces }"
   46           | "opening braces {" block_expr_exprs "closing braces }"

   47 block_expr_exprs: block_expr_expr
   48                 | block_expr_exprs block_expr_expr

   49 block_expr_expr: expr ";"
   50                | macro_expr

   51 postfix_expr: primary_expr
   52             | postfix_expr OPERATOR
   53             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | postfix_expr "." "identifier"
   56             | "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   58 call_args: call_arg
   59          | call_args "," call_arg

   60 call_arg: "identifier" ":" expr
   61         | expr

   62 prefix_expr: postfix_expr
   63            | any_operator prefix_expr

   64 any_operator: MULTIPLICATIVE_OPERATOR
   65             | ADDITIVE_OPERATOR
   66             | RELATIONAL_OPERATOR
   67             | OPERATOR

   68 multiplicative_expr: prefix_expr
   69                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   70 additive_expr: multiplicative_expr
   71              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   72 relational_expr: additive_expr
   73                | relational_expr RELATIONAL_OPERATOR additive_expr

   74 equality_expr: relational_expr
   75              | equality_expr EQUALITY_OPERATOR relational_expr

   76 and_expr: equality_expr
   77         | and_expr AND_OPERATOR equality_expr

   78 or_expr: and_expr
   79        | or_expr OR_OPERATOR and_expr

   80 assignment_expr: or_expr
   81                | assignment_expr "assignment operator =" or_expr

   82 var_expr: "var keyword" "identifier" typeexpr
   83         | "var keyword" "identifier"

   84 expr: assignment_expr
   85     | var_expr
   86     | var_expr "assignment operator =" assignment_expr

   87 macro_expr: if_expr
   88           | for_expr

   89 any_expr: macro_expr
   90         | expr

   91 expr_list: expr
   92          | expr_list "," expr

   93 typeexpr: nonunion_typeexpr
   94         | union_typeexpr

   95 nonunion_typeexpr: "identifier"
   96                  | "nil constant"
   97                  | tuple_typeexpr
   98                  | qualified_typeexpr
   99                  | specialized_typeexpr

  100 union_typeexpr: union_typeexprs

  101 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | union_typeexprs "vertical pipe |" nonunion_typeexpr

  103 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

  104 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
  105                    | tuple_typeexpr_args "," tuple_typeexpr_arg

  106 tuple_typeexpr_arg: typeexpr
  107                   | "identifier" ":" typeexpr

  108 qualified_typeexpr: qualified_typeexpr_qualifiers

  109 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
  110                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

  111 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

  112 specialized_typeexpr_specs: typeexpr
  113                           | specialized_typeexpr_specs "," typeexpr

  114 qualified_typeexpr_qualifier: structure_qualifier
  115                             | interface_qualifier
  116                             | native_qualifier
  117                             | range_qualifier

  118 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

  120 structure_qualifier_decl: "value keyword"
  121                         | "object keyword"

  122 structure_qualifier_stmts: structure_qualifier_stmt
  123                          | structure_qualifier_stmts structure_qualifier_stmt

  124 structure_qualifier_stmt: "identifier" ";"
  125                         | "identifier" typeexpr ";"

  126 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
  127                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

  128 interface_qualifier_stmts: interface_qualifier_stmt
  129                          | interface_qualifier_stmts interface_qualifier_stmt

  130 interface_qualifier_stmt: "identifier"

  131 native_qualifier: "native keyword" "identifier"

  132 range_qualifier: range_qualifier_decl
  133                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

  134 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 23 53 54 55 56 57 60 82 83 95 107 124
    125 130 131 134
"number constant" (259) 25 133
"string constant" (260) 26
MULTIPLICATIVE_OPERATOR (261) 64 69
ADDITIVE_OPERATOR (262) 65 71
RELATIONAL_OPERATOR (263) 66 73
EQUALITY_OPERATOR (264) 75
AND_OPERATOR (265) 77
OR_OPERATOR (266) 79
OPERATOR (267) 52 67
"symbol" (268)
"func keyword" (269) 10 11 12
"var keyword" (270) 82 83
"type keyword" (271) 22
"unary keyword" (272) 12
"value keyword" (273) 120
"object keyword" (274) 121
"interface keyword" (275) 126 127
"native keyword" (276) 131
"range keyword" (277) 134
"if keyword" (278) 38 39 40
"else keyword" (279) 40
"for keyword" (280) 41 42
"nil constant" (281) 96
"incase keyword" (282)
"otherwise keyword" (283) 35
"opening paranthesis (" (284) 13 15 24 39 40 41 42 53 54 56 57 103
    133
"closing paranthesis )" (285) 13 15 24 39 40 41 42 53 54 56 57 103
    133
"opening braces {" (286) 28 29 34 35 45 46 118 119 126 127
"closing braces }" (287) 28 29 34 35 45 46 118 119 126 127
"opening bracket [" (288) 27 111
"closing bracket ]" (289) 27 111
"vertical pipe |" (290) 101 102
"." (291) 53 54 55
"," (292) 17 32 35 37 59 92 104 105 113 133
":" (293) 33 60 107
";" (294) 42 44 49 124 125
"right arrow ->" (295) 8 9
"assignment operator =" (296) 81 86


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
root (43)
    on left: 1, on right: 0
root_stmts (44)
    on left: 2 3, on right: 1 2
root_stmt (45)
    on left: 4 5, on right: 2 3
func_decl (46)
    on left: 6 7 8 9, on right: 4
func_decl_name (47)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (48)
    on left: 13 14 15, on right: 7 8 9
func_args (49)
    on left: 16 17, on right: 15 17
func_arg (50)
    on left: 18 19, on right: 14 16 17
type_decl (51)
    on left: 20 21, on right: 5
type_decl_name (52)
    on left: 22, on right: 20 21
primary_expr (53)
    on left: 23 24 25 26 27 28 29 30, on right: 33 51
map_expr_pairs (54)
    on left: 31 32, on right: 29 32
map_expr_pair (55)
    on left: 33, on right: 31 32
ifcase_expr (56)
    on left: 34 35, on right: 30
ifcase_expr_conds (57)
    on left: 36 37, on right: 34 35 37
ifcase_expr_cond (58)
    on left: 38, on right: 36 37
if_expr (59)
    on left: 39 40, on right: 87
for_expr (60)
    on left: 41 42, on right: 88
body_expr (61)
    on left: 43 44, on right: 39 40 41 42
block_expr (62)
    on left: 45 46, on right: 6 7 8 9 43
block_expr_exprs (63)
    on left: 47 48, on right: 46 48
block_expr_expr (64)
    on left: 49 50, on right: 47 48
postfix_expr (65)
    on left: 51 52 53 54 55 56 57, on right: 52 53 54 55 62
call_args (66)
    on left: 58 59, on right: 54 57 59
call_arg (67)
    on left: 60 61, on right: 58 59
prefix_expr (68)
    on left: 62 63, on right: 63 68 69
any_operator (69)
    on left: 64 65 66 67, on right: 11 12 63
multiplicative_expr (70)
    on left: 68 69, on right: 69 70 71
additive_expr (71)
    on left: 70 71, on right: 71 72 73
relational_expr (72)
    on left: 72 73, on right: 73 74 75
equality_expr (73)
    on left: 74 75, on right: 75 76 77
and_expr (74)
    on left: 76 77, on right: 77 78 79
or_expr (75)
    on left: 78 79, on right: 79 80 81
assignment_expr (76)
    on left: 80 81, on right: 81 84 86
var_expr (77)
    on left: 82 83, on right: 85 86
expr (78)
    on left: 84 85 86, on right: 33 35 38 39 40 41 42 44 49 60 61 90
    91 92
macro_expr (79)
    on left: 87 88, on right: 50 89
any_expr (80)
    on left: 89 90, on right: 24
expr_list (81)
    on left: 91 92, on right: 27 28 92
typeexpr (82)
    on left: 93 94, on right: 19 21 82 106 107 112 113 125
nonunion_typeexpr (83)
    on left: 95 96 97 98 99, on right: 93 101 102 111
union_typeexpr (84)
    on left: 100, on right: 94
union_typeexprs (85)
    on left: 101 102, on right: 100 102
tuple_typeexpr (86)
    on left: 103, on right: 97
tuple_typeexpr_args (87)
    on left: 104 105, on right: 103 105
tuple_typeexpr_arg (88)
    on left: 106 107, on right: 104 105
qualified_typeexpr (89)
    on left: 108, on right: 98
qualified_typeexpr_qualifiers (90)
    on left: 109 110, on right: 108 110
specialized_typeexpr (91)
    on left: 111, on right: 99
specialized_typeexpr_specs (92)
    on left: 112 113, on right: 111 113
qualified_typeexpr_qualifier (93)
    on left: 114 115 116 117, on right: 109 110
structure_qualifier (94)
    on left: 118 119, on right: 114
structure_qualifier_decl (95)
    on left: 120 121, on right: 118 119
structure_qualifier_stmts (96)
    on left: 122 123, on right: 119 123
structure_qualifier_stmt (97)
    on left: 124 125, on right: 122 123
interface_qualifier (98)
    on left: 126 127, on right: 115
interface_qualifier_stmts (99)
    on left: 128 129, on right: 127 129
interface_qualifier_stmt (100)
    on left: 130, on right: 128 129
native_qualifier (101)
    on left: 131, on right: 116
range_qualifier (102)
    on left: 132 133, on right: 117
range_qualifier_decl (103)
    on left: 134, on right: 132 133


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name block_expr
    7          | . func_decl_name func_args_tuple block_expr
    8          | . func_decl_name "right arrow ->" func_args_tuple block_expr
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple block_expr
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name block_expr
    7          | . func_decl_name func_args_tuple block_expr
    8          | . func_decl_name "right arrow ->" func_args_tuple block_expr
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple block_expr
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . block_expr
    7          | func_decl_name . func_args_tuple block_expr
    8          | func_decl_name . "right arrow ->" func_args_tuple block_expr
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple block_expr
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    block_expr       go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 35
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   64 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 64 (any_operator)


state 12

   65 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 65 (any_operator)


state 13

   66 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 66 (any_operator)


state 14

   67 any_operator: OPERATOR .

    $default  reduce using rule 67 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 50


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 51
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 52

    func_args  go to state 53
    func_arg   go to state 54


state 22

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   39 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   41 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   45 block_expr: "opening braces {" . "closing braces }"
   46           | "opening braces {" . block_expr_exprs "closing braces }"
   47 block_expr_exprs: . block_expr_expr
   48                 | . block_expr_exprs block_expr_expr
   49 block_expr_expr: . expr ";"
   50                | . macro_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   87 macro_expr: . if_expr
   88           | . for_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "if keyword"             shift, and go to state 59
    "for keyword"            shift, and go to state 60
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "closing braces }"       shift, and go to state 63
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    if_expr              go to state 67
    for_expr             go to state 68
    block_expr_exprs     go to state 69
    block_expr_expr      go to state 70
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 82
    macro_expr           go to state 83


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple block_expr
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 84
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . block_expr
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple block_expr
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 85

    block_expr  go to state 86


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name block_expr .

    $default  reduce using rule 6 (func_decl)


state 27

   95 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 95 (nonunion_typeexpr)


state 28

  120 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 120 (structure_qualifier_decl)


state 29

  121 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 121 (structure_qualifier_decl)


state 30

  126 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
  127                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 87


state 31

  131 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 88


state 32

  134 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 89


state 33

   96 nonunion_typeexpr: "nil constant" .

    $default  reduce using rule 96 (nonunion_typeexpr)


state 34

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  103               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
  104 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
  105                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
  106 tuple_typeexpr_arg: . typeexpr
  107                   | . "identifier" ":" typeexpr
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 90
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 91
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    tuple_typeexpr_args            go to state 92
    tuple_typeexpr_arg             go to state 93
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 35

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 36

   93 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
  101 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr
  111 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 94
    "vertical pipe |"    shift, and go to state 95

    $default  reduce using rule 93 (typeexpr)


state 37

   94 typeexpr: union_typeexpr .

    $default  reduce using rule 94 (typeexpr)


state 38

  100 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
  102 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 96

    $default  reduce using rule 100 (union_typeexpr)


state 39

   97 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 97 (nonunion_typeexpr)


state 40

   98 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 98 (nonunion_typeexpr)


state 41

  108 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  110 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 108 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 97
    structure_qualifier           go to state 44
    structure_qualifier_decl      go to state 45
    interface_qualifier           go to state 46
    native_qualifier              go to state 47
    range_qualifier               go to state 48
    range_qualifier_decl          go to state 49


state 42

   99 nonunion_typeexpr: specialized_typeexpr .

    $default  reduce using rule 99 (nonunion_typeexpr)


state 43

  109 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 109 (qualified_typeexpr_qualifiers)


state 44

  114 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 114 (qualified_typeexpr_qualifier)


state 45

  118 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
  119                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 98


state 46

  115 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 115 (qualified_typeexpr_qualifier)


state 47

  116 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 116 (qualified_typeexpr_qualifier)


state 48

  117 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 117 (qualified_typeexpr_qualifier)


state 49

  132 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  133                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 99

    $default  reduce using rule 132 (range_qualifier)


state 50

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 51

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 52

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 53

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 100
    ","                      shift, and go to state 101


state 54

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 55

   23 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ":", ";", "assignment operator ="]
   56 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   57             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 102

    $default  reduce using rule 23 (primary_expr)


state 56

   25 primary_expr: "number constant" .

    $default  reduce using rule 25 (primary_expr)


state 57

   26 primary_expr: "string constant" .

    $default  reduce using rule 26 (primary_expr)


state 58

   82 var_expr: "var keyword" . "identifier" typeexpr
   83         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 103


state 59

   39 if_expr: "if keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | "if keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr

    "opening paranthesis ("  shift, and go to state 104


state 60

   41 for_expr: "for keyword" . "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | "for keyword" . "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr

    "opening paranthesis ("  shift, and go to state 105


state 61

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   24             | "opening paranthesis (" . any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   39 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   41 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   87 macro_expr: . if_expr
   88           | . for_expr
   89 any_expr: . macro_expr
   90         | . expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "if keyword"             shift, and go to state 59
    "for keyword"            shift, and go to state 60
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    if_expr              go to state 67
    for_expr             go to state 68
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 106
    macro_expr           go to state 107
    any_expr             go to state 108


state 62

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   28             | "opening braces {" . expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   29             | "opening braces {" . map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   31 map_expr_pairs: . map_expr_pair
   32               | . map_expr_pairs "," map_expr_pair
   33 map_expr_pair: . primary_expr ":" expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   34            | "opening braces {" . ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   35            | "opening braces {" . ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   36 ifcase_expr_conds: . ifcase_expr_cond
   37                  | . ifcase_expr_conds "," ifcase_expr_cond
   38 ifcase_expr_cond: . expr "if keyword" expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   91 expr_list: . expr
   92          | . expr_list "," expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 109
    map_expr_pairs       go to state 110
    map_expr_pair        go to state 111
    ifcase_expr          go to state 66
    ifcase_expr_conds    go to state 112
    ifcase_expr_cond     go to state 113
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 114
    expr_list            go to state 115


state 63

   45 block_expr: "opening braces {" "closing braces }" .

    $default  reduce using rule 45 (block_expr)


state 64

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   27             | "opening bracket [" . expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   91 expr_list: . expr
   92          | . expr_list "," expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 116
    expr_list            go to state 117


state 65

   51 postfix_expr: primary_expr .

    $default  reduce using rule 51 (postfix_expr)


state 66

   30 primary_expr: ifcase_expr .

    $default  reduce using rule 30 (primary_expr)


state 67

   87 macro_expr: if_expr .

    $default  reduce using rule 87 (macro_expr)


state 68

   88 macro_expr: for_expr .

    $default  reduce using rule 88 (macro_expr)


state 69

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   39 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   41 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   46 block_expr: "opening braces {" block_expr_exprs . "closing braces }"
   48 block_expr_exprs: block_expr_exprs . block_expr_expr
   49 block_expr_expr: . expr ";"
   50                | . macro_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   87 macro_expr: . if_expr
   88           | . for_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "if keyword"             shift, and go to state 59
    "for keyword"            shift, and go to state 60
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "closing braces }"       shift, and go to state 118
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    if_expr              go to state 67
    for_expr             go to state 68
    block_expr_expr      go to state 119
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 82
    macro_expr           go to state 83


state 70

   47 block_expr_exprs: block_expr_expr .

    $default  reduce using rule 47 (block_expr_exprs)


state 71

   52 postfix_expr: postfix_expr . OPERATOR
   53             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | postfix_expr . "." "identifier"
   62 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 120
    "."       shift, and go to state 121

    $default  reduce using rule 62 (prefix_expr)


state 72

   68 multiplicative_expr: prefix_expr .

    $default  reduce using rule 68 (multiplicative_expr)


state 73

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   63            | any_operator . prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr  go to state 65
    ifcase_expr   go to state 66
    postfix_expr  go to state 71
    prefix_expr   go to state 122
    any_operator  go to state 73


state 74

   69 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 123

    $default  reduce using rule 70 (additive_expr)


state 75

   71 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 124

    $default  reduce using rule 72 (relational_expr)


state 76

   73 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   74 equality_expr: relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 125

    $default  reduce using rule 74 (equality_expr)


state 77

   75 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   76 and_expr: equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 126

    $default  reduce using rule 76 (and_expr)


state 78

   77 and_expr: and_expr . AND_OPERATOR equality_expr
   78 or_expr: and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 127

    $default  reduce using rule 78 (or_expr)


state 79

   79 or_expr: or_expr . OR_OPERATOR and_expr
   80 assignment_expr: or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 128

    $default  reduce using rule 80 (assignment_expr)


state 80

   81 assignment_expr: assignment_expr . "assignment operator =" or_expr
   84 expr: assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 129

    $default  reduce using rule 84 (expr)


state 81

   85 expr: var_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]
   86     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 130

    $default  reduce using rule 85 (expr)


state 82

   49 block_expr_expr: expr . ";"

    ";"  shift, and go to state 131


state 83

   50 block_expr_expr: macro_expr .

    $default  reduce using rule 50 (block_expr_expr)


state 84

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . block_expr
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"

    "opening braces {"  shift, and go to state 22

    block_expr  go to state 132


state 85

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple block_expr
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 133
    func_arg         go to state 25


state 86

    7 func_decl: func_decl_name func_args_tuple block_expr .

    $default  reduce using rule 7 (func_decl)


state 87

  126 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
  127                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
  128 interface_qualifier_stmts: . interface_qualifier_stmt
  129                          | . interface_qualifier_stmts interface_qualifier_stmt
  130 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 134
    "closing braces }"  shift, and go to state 135

    interface_qualifier_stmts  go to state 136
    interface_qualifier_stmt   go to state 137


state 88

  131 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 131 (native_qualifier)


state 89

  134 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 134 (range_qualifier_decl)


state 90

   95 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "opening bracket [", "vertical pipe |", ","]
  107 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 138

    $default  reduce using rule 95 (nonunion_typeexpr)


state 91

  106 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 106 (tuple_typeexpr_arg)


state 92

  103 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
  105 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 139
    ","                      shift, and go to state 140


state 93

  104 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 141


state 94

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  111                     | nonunion_typeexpr "opening bracket [" . specialized_typeexpr_specs "closing bracket ]"
  112 specialized_typeexpr_specs: . typeexpr
  113                           | . specialized_typeexpr_specs "," typeexpr
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 142
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    specialized_typeexpr_specs     go to state 143
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 95

   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  101 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    nonunion_typeexpr              go to state 144
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 96

   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  102 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    nonunion_typeexpr              go to state 145
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 97

  110 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 110 (qualified_typeexpr_qualifiers)


state 98

  118 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
  119                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
  122 structure_qualifier_stmts: . structure_qualifier_stmt
  123                          | . structure_qualifier_stmts structure_qualifier_stmt
  124 structure_qualifier_stmt: . "identifier" ";"
  125                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 146
    "closing braces }"  shift, and go to state 147

    structure_qualifier_stmts  go to state 148
    structure_qualifier_stmt   go to state 149


state 99

  133 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 150


state 100

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 101

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 151


state 102

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   56             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   57             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   58 call_args: . call_arg
   59          | . call_args "," call_arg
   60 call_arg: . "identifier" ":" expr
   61         | . expr
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 152
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "closing paranthesis )"  shift, and go to state 153
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    call_args            go to state 154
    call_arg             go to state 155
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 156


state 103

   82 var_expr: "var keyword" "identifier" . typeexpr
   83         | "var keyword" "identifier" .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]
   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    $default  reduce using rule 83 (var_expr)

    typeexpr                       go to state 157
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 104

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   39 if_expr: "if keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr
   40        | "if keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr "else keyword" body_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 158


state 105

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 for_expr: "for keyword" "opening paranthesis (" . expr "closing paranthesis )" body_expr
   42         | "for keyword" "opening paranthesis (" . expr ";" expr ";" expr "closing paranthesis )" body_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 159


state 106

   90 any_expr: expr .

    $default  reduce using rule 90 (any_expr)


state 107

   89 any_expr: macro_expr .

    $default  reduce using rule 89 (any_expr)


state 108

   24 primary_expr: "opening paranthesis (" any_expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 160


state 109

   33 map_expr_pair: primary_expr . ":" expr
   51 postfix_expr: primary_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "closing braces }", ".", ",", ";", "assignment operator ="]

    ":"  shift, and go to state 161

    $default  reduce using rule 51 (postfix_expr)


state 110

   29 primary_expr: "opening braces {" map_expr_pairs . "closing braces }"
   32 map_expr_pairs: map_expr_pairs . "," map_expr_pair

    "closing braces }"  shift, and go to state 162
    ","                 shift, and go to state 163


state 111

   31 map_expr_pairs: map_expr_pair .

    $default  reduce using rule 31 (map_expr_pairs)


state 112

   34 ifcase_expr: "opening braces {" ifcase_expr_conds . "closing braces }"
   35            | "opening braces {" ifcase_expr_conds . "," expr "otherwise keyword" "closing braces }"
   37 ifcase_expr_conds: ifcase_expr_conds . "," ifcase_expr_cond

    "closing braces }"  shift, and go to state 164
    ","                 shift, and go to state 165


state 113

   36 ifcase_expr_conds: ifcase_expr_cond .

    $default  reduce using rule 36 (ifcase_expr_conds)


state 114

   38 ifcase_expr_cond: expr . "if keyword" expr
   91 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 166

    $default  reduce using rule 91 (expr_list)


state 115

   28 primary_expr: "opening braces {" expr_list . "closing braces }"
   92 expr_list: expr_list . "," expr

    "closing braces }"  shift, and go to state 167
    ","                 shift, and go to state 168


state 116

   91 expr_list: expr .

    $default  reduce using rule 91 (expr_list)


state 117

   27 primary_expr: "opening bracket [" expr_list . "closing bracket ]"
   92 expr_list: expr_list . "," expr

    "closing bracket ]"  shift, and go to state 169
    ","                  shift, and go to state 168


state 118

   46 block_expr: "opening braces {" block_expr_exprs "closing braces }" .

    $default  reduce using rule 46 (block_expr)


state 119

   48 block_expr_exprs: block_expr_exprs block_expr_expr .

    $default  reduce using rule 48 (block_expr_exprs)


state 120

   52 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 52 (postfix_expr)


state 121

   53 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 170


state 122

   63 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 63 (prefix_expr)


state 123

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   69 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr  go to state 65
    ifcase_expr   go to state 66
    postfix_expr  go to state 71
    prefix_expr   go to state 171
    any_operator  go to state 73


state 124

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 172


state 125

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 173


state 126

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: equality_expr EQUALITY_OPERATOR . relational_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 174


state 127

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: and_expr AND_OPERATOR . equality_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 175


state 128

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: or_expr OR_OPERATOR . and_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 176


state 129

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: assignment_expr "assignment operator =" . or_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 177


state 130

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   86 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 178


state 131

   49 block_expr_expr: expr ";" .

    $default  reduce using rule 49 (block_expr_expr)


state 132

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple block_expr .

    $default  reduce using rule 8 (func_decl)


state 133

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . block_expr
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"

    "opening braces {"  shift, and go to state 22

    block_expr  go to state 179


state 134

  130 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 130 (interface_qualifier_stmt)


state 135

  126 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 126 (interface_qualifier)


state 136

  127 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
  129 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
  130 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 134
    "closing braces }"  shift, and go to state 180

    interface_qualifier_stmt  go to state 181


state 137

  128 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 128 (interface_qualifier_stmts)


state 138

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  107 tuple_typeexpr_arg: "identifier" ":" . typeexpr
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 182
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 139

  103 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 103 (tuple_typeexpr)


state 140

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  105 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
  106 tuple_typeexpr_arg: . typeexpr
  107                   | . "identifier" ":" typeexpr
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 90
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 91
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    tuple_typeexpr_arg             go to state 183
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 141

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
  106 tuple_typeexpr_arg: . typeexpr
  107                   | . "identifier" ":" typeexpr
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 90
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 91
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    tuple_typeexpr_arg             go to state 184
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 142

  112 specialized_typeexpr_specs: typeexpr .

    $default  reduce using rule 112 (specialized_typeexpr_specs)


state 143

  111 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs . "closing bracket ]"
  113 specialized_typeexpr_specs: specialized_typeexpr_specs . "," typeexpr

    "closing bracket ]"  shift, and go to state 185
    ","                  shift, and go to state 186


state 144

  101 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  111 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 94

    $default  reduce using rule 101 (union_typeexprs)


state 145

  102 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  111 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 94

    $default  reduce using rule 102 (union_typeexprs)


state 146

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  124 structure_qualifier_stmt: "identifier" . ";"
  125                         | "identifier" . typeexpr ";"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34
    ";"                      shift, and go to state 187

    typeexpr                       go to state 188
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 147

  118 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 118 (structure_qualifier)


state 148

  119 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
  123 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
  124 structure_qualifier_stmt: . "identifier" ";"
  125                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 146
    "closing braces }"  shift, and go to state 189

    structure_qualifier_stmt  go to state 190


state 149

  122 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 122 (structure_qualifier_stmts)


state 150

  133 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 191


state 151

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 152

   23 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   56 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   57             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   60 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 102
    ":"                      shift, and go to state 192

    $default  reduce using rule 23 (primary_expr)


state 153

   56 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 56 (postfix_expr)


state 154

   57 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   59 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 193
    ","                      shift, and go to state 194


state 155

   58 call_args: call_arg .

    $default  reduce using rule 58 (call_args)


state 156

   61 call_arg: expr .

    $default  reduce using rule 61 (call_arg)


state 157

   82 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 82 (var_expr)


state 158

   39 if_expr: "if keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr
   40        | "if keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr "else keyword" body_expr

    "closing paranthesis )"  shift, and go to state 195


state 159

   41 for_expr: "for keyword" "opening paranthesis (" expr . "closing paranthesis )" body_expr
   42         | "for keyword" "opening paranthesis (" expr . ";" expr ";" expr "closing paranthesis )" body_expr

    "closing paranthesis )"  shift, and go to state 196
    ";"                      shift, and go to state 197


state 160

   24 primary_expr: "opening paranthesis (" any_expr "closing paranthesis )" .

    $default  reduce using rule 24 (primary_expr)


state 161

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   33 map_expr_pair: primary_expr ":" . expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 198


state 162

   29 primary_expr: "opening braces {" map_expr_pairs "closing braces }" .

    $default  reduce using rule 29 (primary_expr)


state 163

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   32 map_expr_pairs: map_expr_pairs "," . map_expr_pair
   33 map_expr_pair: . primary_expr ":" expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"

    "identifier"             shift, and go to state 199
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr   go to state 200
    map_expr_pair  go to state 201
    ifcase_expr    go to state 66


state 164

   34 ifcase_expr: "opening braces {" ifcase_expr_conds "closing braces }" .

    $default  reduce using rule 34 (ifcase_expr)


state 165

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   35            | "opening braces {" ifcase_expr_conds "," . expr "otherwise keyword" "closing braces }"
   37 ifcase_expr_conds: ifcase_expr_conds "," . ifcase_expr_cond
   38 ifcase_expr_cond: . expr "if keyword" expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    ifcase_expr_cond     go to state 202
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 203


state 166

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   38 ifcase_expr_cond: expr "if keyword" . expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 204


state 167

   28 primary_expr: "opening braces {" expr_list "closing braces }" .

    $default  reduce using rule 28 (primary_expr)


state 168

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   92 expr_list: expr_list "," . expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 205


state 169

   27 primary_expr: "opening bracket [" expr_list "closing bracket ]" .

    $default  reduce using rule 27 (primary_expr)


state 170

   53 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   54             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   55             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 206

    $default  reduce using rule 55 (postfix_expr)


state 171

   69 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 69 (multiplicative_expr)


state 172

   69 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 123

    $default  reduce using rule 71 (additive_expr)


state 173

   71 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 124

    $default  reduce using rule 73 (relational_expr)


state 174

   73 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   75 equality_expr: equality_expr EQUALITY_OPERATOR relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 125

    $default  reduce using rule 75 (equality_expr)


state 175

   75 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   77 and_expr: and_expr AND_OPERATOR equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 126

    $default  reduce using rule 77 (and_expr)


state 176

   77 and_expr: and_expr . AND_OPERATOR equality_expr
   79 or_expr: or_expr OR_OPERATOR and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 127

    $default  reduce using rule 79 (or_expr)


state 177

   79 or_expr: or_expr . OR_OPERATOR and_expr
   81 assignment_expr: assignment_expr "assignment operator =" or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 128

    $default  reduce using rule 81 (assignment_expr)


state 178

   81 assignment_expr: assignment_expr . "assignment operator =" or_expr
   86 expr: var_expr "assignment operator =" assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 129

    $default  reduce using rule 86 (expr)


state 179

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple block_expr .

    $default  reduce using rule 9 (func_decl)


state 180

  127 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 127 (interface_qualifier)


state 181

  129 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 129 (interface_qualifier_stmts)


state 182

  107 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 107 (tuple_typeexpr_arg)


state 183

  105 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 105 (tuple_typeexpr_args)


state 184

  104 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 104 (tuple_typeexpr_args)


state 185

  111 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]" .

    $default  reduce using rule 111 (specialized_typeexpr)


state 186

   93 typeexpr: . nonunion_typeexpr
   94         | . union_typeexpr
   95 nonunion_typeexpr: . "identifier"
   96                  | . "nil constant"
   97                  | . tuple_typeexpr
   98                  | . qualified_typeexpr
   99                  | . specialized_typeexpr
  100 union_typeexpr: . union_typeexprs
  101 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
  102                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
  103 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  108 qualified_typeexpr: . qualified_typeexpr_qualifiers
  109 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  110                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  111 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  113 specialized_typeexpr_specs: specialized_typeexpr_specs "," . typeexpr
  114 qualified_typeexpr_qualifier: . structure_qualifier
  115                             | . interface_qualifier
  116                             | . native_qualifier
  117                             | . range_qualifier
  118 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  119                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  120 structure_qualifier_decl: . "value keyword"
  121                         | . "object keyword"
  126 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  127                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  131 native_qualifier: . "native keyword" "identifier"
  132 range_qualifier: . range_qualifier_decl
  133                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  134 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "nil constant"           shift, and go to state 33
    "opening paranthesis ("  shift, and go to state 34

    typeexpr                       go to state 207
    nonunion_typeexpr              go to state 36
    union_typeexpr                 go to state 37
    union_typeexprs                go to state 38
    tuple_typeexpr                 go to state 39
    qualified_typeexpr             go to state 40
    qualified_typeexpr_qualifiers  go to state 41
    specialized_typeexpr           go to state 42
    qualified_typeexpr_qualifier   go to state 43
    structure_qualifier            go to state 44
    structure_qualifier_decl       go to state 45
    interface_qualifier            go to state 46
    native_qualifier               go to state 47
    range_qualifier                go to state 48
    range_qualifier_decl           go to state 49


state 187

  124 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 124 (structure_qualifier_stmt)


state 188

  125 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 208


state 189

  119 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 119 (structure_qualifier)


state 190

  123 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 123 (structure_qualifier_stmts)


state 191

  133 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 209


state 192

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   60 call_arg: "identifier" ":" . expr
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 210


state 193

   57 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 57 (postfix_expr)


state 194

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   59 call_args: call_args "," . call_arg
   60 call_arg: . "identifier" ":" expr
   61         | . expr
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 152
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    call_arg             go to state 211
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 156


state 195

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   39 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr
   40        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr "else keyword" body_expr
   43 body_expr: . block_expr
   44          | . expr ";"
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 212
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    body_expr            go to state 213
    block_expr           go to state 214
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 215


state 196

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" . body_expr
   43 body_expr: . block_expr
   44          | . expr ";"
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 212
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    body_expr            go to state 216
    block_expr           go to state 214
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 215


state 197

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   42 for_expr: "for keyword" "opening paranthesis (" expr ";" . expr ";" expr "closing paranthesis )" body_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 217


state 198

   33 map_expr_pair: primary_expr ":" expr .

    $default  reduce using rule 33 (map_expr_pair)


state 199

   23 primary_expr: "identifier" .

    $default  reduce using rule 23 (primary_expr)


state 200

   33 map_expr_pair: primary_expr . ":" expr

    ":"  shift, and go to state 161


state 201

   32 map_expr_pairs: map_expr_pairs "," map_expr_pair .

    $default  reduce using rule 32 (map_expr_pairs)


state 202

   37 ifcase_expr_conds: ifcase_expr_conds "," ifcase_expr_cond .

    $default  reduce using rule 37 (ifcase_expr_conds)


state 203

   35 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr . "otherwise keyword" "closing braces }"
   38 ifcase_expr_cond: expr . "if keyword" expr

    "if keyword"         shift, and go to state 166
    "otherwise keyword"  shift, and go to state 218


state 204

   38 ifcase_expr_cond: expr "if keyword" expr .

    $default  reduce using rule 38 (ifcase_expr_cond)


state 205

   92 expr_list: expr_list "," expr .

    $default  reduce using rule 92 (expr_list)


state 206

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   53             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   54             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   58 call_args: . call_arg
   59          | . call_args "," call_arg
   60 call_arg: . "identifier" ":" expr
   61         | . expr
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 152
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "closing paranthesis )"  shift, and go to state 219
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    call_args            go to state 220
    call_arg             go to state 155
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 156


state 207

  113 specialized_typeexpr_specs: specialized_typeexpr_specs "," typeexpr .

    $default  reduce using rule 113 (specialized_typeexpr_specs)


state 208

  125 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 125 (structure_qualifier_stmt)


state 209

  133 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 221


state 210

   60 call_arg: "identifier" ":" expr .

    $default  reduce using rule 60 (call_arg)


state 211

   59 call_args: call_args "," call_arg .

    $default  reduce using rule 59 (call_args)


state 212

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   28             | "opening braces {" . expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   29             | "opening braces {" . map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   31 map_expr_pairs: . map_expr_pair
   32               | . map_expr_pairs "," map_expr_pair
   33 map_expr_pair: . primary_expr ":" expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   34            | "opening braces {" . ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   35            | "opening braces {" . ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   36 ifcase_expr_conds: . ifcase_expr_cond
   37                  | . ifcase_expr_conds "," ifcase_expr_cond
   38 ifcase_expr_cond: . expr "if keyword" expr
   39 if_expr: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   40        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr
   41 for_expr: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr
   42         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr
   45 block_expr: "opening braces {" . "closing braces }"
   46           | "opening braces {" . block_expr_exprs "closing braces }"
   47 block_expr_exprs: . block_expr_expr
   48                 | . block_expr_exprs block_expr_expr
   49 block_expr_expr: . expr ";"
   50                | . macro_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr
   87 macro_expr: . if_expr
   88           | . for_expr
   91 expr_list: . expr
   92          | . expr_list "," expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "if keyword"             shift, and go to state 59
    "for keyword"            shift, and go to state 60
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "closing braces }"       shift, and go to state 63
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 109
    map_expr_pairs       go to state 110
    map_expr_pair        go to state 111
    ifcase_expr          go to state 66
    ifcase_expr_conds    go to state 112
    ifcase_expr_cond     go to state 113
    if_expr              go to state 67
    for_expr             go to state 68
    block_expr_exprs     go to state 69
    block_expr_expr      go to state 70
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 222
    macro_expr           go to state 83
    expr_list            go to state 115


state 213

   39 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr .  ["identifier", "number constant", "string constant", MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "var keyword", "if keyword", "for keyword", "opening paranthesis (", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket ["]
   40        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr . "else keyword" body_expr

    "else keyword"  shift, and go to state 223

    $default  reduce using rule 39 (if_expr)


state 214

   43 body_expr: block_expr .

    $default  reduce using rule 43 (body_expr)


state 215

   44 body_expr: expr . ";"

    ";"  shift, and go to state 224


state 216

   41 for_expr: "for keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr .

    $default  reduce using rule 41 (for_expr)


state 217

   42 for_expr: "for keyword" "opening paranthesis (" expr ";" expr . ";" expr "closing paranthesis )" body_expr

    ";"  shift, and go to state 225


state 218

   35 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" . "closing braces }"

    "closing braces }"  shift, and go to state 226


state 219

   53 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 53 (postfix_expr)


state 220

   54 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   59 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 227
    ","                      shift, and go to state 194


state 221

  133 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 133 (range_qualifier)


state 222

   38 ifcase_expr_cond: expr . "if keyword" expr
   49 block_expr_expr: expr . ";"
   91 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 166
    ";"           shift, and go to state 131

    $default  reduce using rule 91 (expr_list)


state 223

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   40 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" . body_expr
   43 body_expr: . block_expr
   44          | . expr ";"
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 212
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    body_expr            go to state 228
    block_expr           go to state 214
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 215


state 224

   44 body_expr: expr ";" .

    $default  reduce using rule 44 (body_expr)


state 225

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   42 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" . expr "closing paranthesis )" body_expr
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 229


state 226

   35 ifcase_expr: "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }" .

    $default  reduce using rule 35 (ifcase_expr)


state 227

   54 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 54 (postfix_expr)


state 228

   40 if_expr: "if keyword" "opening paranthesis (" expr "closing paranthesis )" body_expr "else keyword" body_expr .

    $default  reduce using rule 40 (if_expr)


state 229

   42 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr . "closing paranthesis )" body_expr

    "closing paranthesis )"  shift, and go to state 230


state 230

   23 primary_expr: . "identifier"
   24             | . "opening paranthesis (" any_expr "closing paranthesis )"
   25             | . "number constant"
   26             | . "string constant"
   27             | . "opening bracket [" expr_list "closing bracket ]"
   28             | . "opening braces {" expr_list "closing braces }"
   29             | . "opening braces {" map_expr_pairs "closing braces }"
   30             | . ifcase_expr
   34 ifcase_expr: . "opening braces {" ifcase_expr_conds "closing braces }"
   35            | . "opening braces {" ifcase_expr_conds "," expr "otherwise keyword" "closing braces }"
   42 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" . body_expr
   43 body_expr: . block_expr
   44          | . expr ";"
   45 block_expr: . "opening braces {" "closing braces }"
   46           | . "opening braces {" block_expr_exprs "closing braces }"
   51 postfix_expr: . primary_expr
   52             | . postfix_expr OPERATOR
   53             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | . postfix_expr "." "identifier"
   56             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   62 prefix_expr: . postfix_expr
   63            | . any_operator prefix_expr
   64 any_operator: . MULTIPLICATIVE_OPERATOR
   65             | . ADDITIVE_OPERATOR
   66             | . RELATIONAL_OPERATOR
   67             | . OPERATOR
   68 multiplicative_expr: . prefix_expr
   69                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   70 additive_expr: . multiplicative_expr
   71              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   72 relational_expr: . additive_expr
   73                | . relational_expr RELATIONAL_OPERATOR additive_expr
   74 equality_expr: . relational_expr
   75              | . equality_expr EQUALITY_OPERATOR relational_expr
   76 and_expr: . equality_expr
   77         | . and_expr AND_OPERATOR equality_expr
   78 or_expr: . and_expr
   79        | . or_expr OR_OPERATOR and_expr
   80 assignment_expr: . or_expr
   81                | . assignment_expr "assignment operator =" or_expr
   82 var_expr: . "var keyword" "identifier" typeexpr
   83         | . "var keyword" "identifier"
   84 expr: . assignment_expr
   85     | . var_expr
   86     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 55
    "number constant"        shift, and go to state 56
    "string constant"        shift, and go to state 57
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 58
    "opening paranthesis ("  shift, and go to state 61
    "opening braces {"       shift, and go to state 212
    "opening bracket ["      shift, and go to state 64

    primary_expr         go to state 65
    ifcase_expr          go to state 66
    body_expr            go to state 231
    block_expr           go to state 214
    postfix_expr         go to state 71
    prefix_expr          go to state 72
    any_operator         go to state 73
    multiplicative_expr  go to state 74
    additive_expr        go to state 75
    relational_expr      go to state 76
    equality_expr        go to state 77
    and_expr             go to state 78
    or_expr              go to state 79
    assignment_expr      go to state 80
    var_expr             go to state 81
    expr                 go to state 215


state 231

   42 for_expr: "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" body_expr .

    $default  reduce using rule 42 (for_expr)
