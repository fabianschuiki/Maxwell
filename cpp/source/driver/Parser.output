Terminals which are not used

   "real number constant"
   "integer number constant"
   "string constant"
   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: "type keyword" "identifier"

   21 body: "opening braces {" "closing braces }"
   22     | "opening braces {" stmts "closing braces }"

   23 stmts: stmt
   24      | stmts stmt

   25 stmt: expr ";"

   26 primary_expr: "identifier"
   27             | "opening paranthesis (" expr "closing paranthesis )"

   28 postfix_expr: primary_expr
   29             | postfix_expr OPERATOR
   30             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | postfix_expr "." "identifier"
   33             | "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   35 call_args: call_arg
   36          | call_args "," call_arg

   37 call_arg: "identifier" ":" expr
   38         | expr

   39 prefix_expr: postfix_expr
   40            | any_operator prefix_expr

   41 any_operator: MULTIPLICATIVE_OPERATOR
   42             | ADDITIVE_OPERATOR
   43             | RELATIONAL_OPERATOR
   44             | OPERATOR

   45 multiplicative_expr: prefix_expr
   46                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   47 additive_expr: multiplicative_expr
   48              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   49 relational_expr: additive_expr
   50                | relational_expr RELATIONAL_OPERATOR additive_expr

   51 expr: relational_expr
   52     | var_expr
   53     | var_expr "assignment operator =" relational_expr

   54 var_expr: "var keyword" "identifier" typeexpr
   55         | "var keyword" "identifier"

   56 typeexpr: nonunion_typeexpr
   57         | union_typeexpr

   58 nonunion_typeexpr: "identifier"
   59                  | tuple_typeexpr

   60 union_typeexpr: union_typeexprs

   61 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   63 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   64 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   65                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   66 tuple_typeexpr_arg: typeexpr
   67                   | "identifier" ":" typeexpr


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 20 26 30 31 32 33 34 37 54 55 58 67
"real number constant" (259)
"integer number constant" (260)
"string constant" (261)
MULTIPLICATIVE_OPERATOR (262) 41 46
ADDITIVE_OPERATOR (263) 42 48
RELATIONAL_OPERATOR (264) 43 50
OPERATOR (265) 29 44
"symbol" (266)
"func keyword" (267) 10 11 12
"var keyword" (268) 54 55
"type keyword" (269) 20
"unary keyword" (270) 12
"opening paranthesis (" (271) 13 15 27 30 31 33 34 63
"closing paranthesis )" (272) 13 15 27 30 31 33 34 63
"opening braces {" (273) 21 22
"closing braces }" (274) 21 22
"opening bracket [" (275)
"closing bracket ]" (276)
"vertical pipe |" (277) 61 62
"." (278) 30 31 32
"," (279) 17 36 64 65
":" (280) 37 67
";" (281) 25
"right arrow ->" (282) 8 9
"assignment operator =" (283) 53


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
root (30)
    on left: 1, on right: 0
root_stmts (31)
    on left: 2 3, on right: 1 2
root_stmt (32)
    on left: 4 5, on right: 2 3
func_decl (33)
    on left: 6 7 8 9, on right: 4
func_decl_name (34)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (35)
    on left: 13 14 15, on right: 7 8 9
func_args (36)
    on left: 16 17, on right: 15 17
func_arg (37)
    on left: 18 19, on right: 14 16 17
type_decl (38)
    on left: 20, on right: 5
body (39)
    on left: 21 22, on right: 6 7 8 9
stmts (40)
    on left: 23 24, on right: 22 24
stmt (41)
    on left: 25, on right: 23 24
primary_expr (42)
    on left: 26 27, on right: 28
postfix_expr (43)
    on left: 28 29 30 31 32 33 34, on right: 29 30 31 32 39
call_args (44)
    on left: 35 36, on right: 31 34 36
call_arg (45)
    on left: 37 38, on right: 35 36
prefix_expr (46)
    on left: 39 40, on right: 40 45 46
any_operator (47)
    on left: 41 42 43 44, on right: 11 12 40
multiplicative_expr (48)
    on left: 45 46, on right: 46 47 48
additive_expr (49)
    on left: 47 48, on right: 48 49 50
relational_expr (50)
    on left: 49 50, on right: 50 51 53
expr (51)
    on left: 51 52 53, on right: 25 27 37 38
var_expr (52)
    on left: 54 55, on right: 52 53
typeexpr (53)
    on left: 56 57, on right: 19 54 66 67
nonunion_typeexpr (54)
    on left: 58 59, on right: 56 61 62
union_typeexpr (55)
    on left: 60, on right: 57
union_typeexprs (56)
    on left: 61 62, on right: 60 62
tuple_typeexpr (57)
    on left: 63, on right: 59
tuple_typeexpr_args (58)
    on left: 64 65, on right: 63 65
tuple_typeexpr_arg (59)
    on left: 66 67, on right: 64 65


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR

    "identifier"             shift, and go to state 9
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "unary keyword"          shift, and go to state 14

    any_operator  go to state 15


state 2

   20 type_decl: "type keyword" . "identifier"

    "identifier"  shift, and go to state 16


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 17


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 18
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   21 body: . "opening braces {" "closing braces }"
   22     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20
    "opening braces {"       shift, and go to state 21
    "right arrow ->"         shift, and go to state 22

    func_args_tuple  go to state 23
    func_arg         go to state 24
    body             go to state 25


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 10

   41 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 41 (any_operator)


state 11

   42 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 42 (any_operator)


state 12

   43 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 43 (any_operator)


state 13

   44 any_operator: OPERATOR .

    $default  reduce using rule 44 (any_operator)


state 14

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13

    any_operator  go to state 26


state 15

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 16

   20 type_decl: "type keyword" "identifier" .

    $default  reduce using rule 20 (type_decl)


state 17

    0 $accept: root "end of input" .

    $default  accept


state 18

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 19

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 28

    $default  reduce using rule 18 (func_arg)

    typeexpr           go to state 29
    nonunion_typeexpr  go to state 30
    union_typeexpr     go to state 31
    union_typeexprs    go to state 32
    tuple_typeexpr     go to state 33


state 20

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "closing paranthesis )"  shift, and go to state 34

    func_args  go to state 35
    func_arg   go to state 36


state 21

   21 body: "opening braces {" . "closing braces }"
   22     | "opening braces {" . stmts "closing braces }"
   23 stmts: . stmt
   24      | . stmts stmt
   25 stmt: . expr ";"
   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39
    "closing braces }"       shift, and go to state 40

    stmts                go to state 41
    stmt                 go to state 42
    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 50
    var_expr             go to state 51


state 22

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    func_args_tuple  go to state 52
    func_arg         go to state 24


state 23

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   21 body: . "opening braces {" "closing braces }"
   22     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21
    "right arrow ->"    shift, and go to state 53

    body  go to state 54


state 24

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 25

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 26

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 27

   58 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 58 (nonunion_typeexpr)


state 28

   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   63               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   64 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   65                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   66 tuple_typeexpr_arg: . typeexpr
   67                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 55
    "opening paranthesis ("  shift, and go to state 28

    typeexpr             go to state 56
    nonunion_typeexpr    go to state 30
    union_typeexpr       go to state 31
    union_typeexprs      go to state 32
    tuple_typeexpr       go to state 33
    tuple_typeexpr_args  go to state 57
    tuple_typeexpr_arg   go to state 58


state 29

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 30

   56 typeexpr: nonunion_typeexpr .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   61 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 59

    $default  reduce using rule 56 (typeexpr)


state 31

   57 typeexpr: union_typeexpr .

    $default  reduce using rule 57 (typeexpr)


state 32

   60 union_typeexpr: union_typeexprs .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   62 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 60

    $default  reduce using rule 60 (union_typeexpr)


state 33

   59 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 59 (nonunion_typeexpr)


state 34

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 35

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 61
    ","                      shift, and go to state 62


state 36

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 37

   26 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]
   33 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   34             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 63

    $default  reduce using rule 26 (primary_expr)


state 38

   54 var_expr: "var keyword" . "identifier" typeexpr
   55         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 64


state 39

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   27             | "opening paranthesis (" . expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 65
    var_expr             go to state 51


state 40

   21 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 21 (body)


state 41

   22 body: "opening braces {" stmts . "closing braces }"
   24 stmts: stmts . stmt
   25 stmt: . expr ";"
   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39
    "closing braces }"       shift, and go to state 66

    stmt                 go to state 67
    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 50
    var_expr             go to state 51


state 42

   23 stmts: stmt .

    $default  reduce using rule 23 (stmts)


state 43

   28 postfix_expr: primary_expr .

    $default  reduce using rule 28 (postfix_expr)


state 44

   29 postfix_expr: postfix_expr . OPERATOR
   30             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | postfix_expr . "." "identifier"
   39 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    OPERATOR  shift, and go to state 68
    "."       shift, and go to state 69

    $default  reduce using rule 39 (prefix_expr)


state 45

   45 multiplicative_expr: prefix_expr .

    $default  reduce using rule 45 (multiplicative_expr)


state 46

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   40            | any_operator . prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 39

    primary_expr  go to state 43
    postfix_expr  go to state 44
    prefix_expr   go to state 70
    any_operator  go to state 46


state 47

   46 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 71

    $default  reduce using rule 47 (additive_expr)


state 48

   48 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 72

    $default  reduce using rule 49 (relational_expr)


state 49

   50 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   51 expr: relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 73

    $default  reduce using rule 51 (expr)


state 50

   25 stmt: expr . ";"

    ";"  shift, and go to state 74


state 51

   52 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   53     | var_expr . "assignment operator =" relational_expr

    "assignment operator ="  shift, and go to state 75

    $default  reduce using rule 52 (expr)


state 52

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   21 body: . "opening braces {" "closing braces }"
   22     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21

    body  go to state 76


state 53

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    func_args_tuple  go to state 77
    func_arg         go to state 24


state 54

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 55

   58 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   67 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 78

    $default  reduce using rule 58 (nonunion_typeexpr)


state 56

   66 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 66 (tuple_typeexpr_arg)


state 57

   63 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   65 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 79
    ","                      shift, and go to state 80


state 58

   64 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 81


state 59

   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   61 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 28

    nonunion_typeexpr  go to state 82
    tuple_typeexpr     go to state 33


state 60

   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   62 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 28

    nonunion_typeexpr  go to state 83
    tuple_typeexpr     go to state 33


state 61

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 62

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 19

    func_arg  go to state 84


state 63

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   35 call_args: . call_arg
   36          | . call_args "," call_arg
   37 call_arg: . "identifier" ":" expr
   38         | . expr
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 85
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39
    "closing paranthesis )"  shift, and go to state 86

    primary_expr         go to state 43
    postfix_expr         go to state 44
    call_args            go to state 87
    call_arg             go to state 88
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 89
    var_expr             go to state 51


state 64

   54 var_expr: "var keyword" "identifier" . typeexpr
   55         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]
   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 28

    $default  reduce using rule 55 (var_expr)

    typeexpr           go to state 90
    nonunion_typeexpr  go to state 30
    union_typeexpr     go to state 31
    union_typeexprs    go to state 32
    tuple_typeexpr     go to state 33


state 65

   27 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 91


state 66

   22 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 22 (body)


state 67

   24 stmts: stmts stmt .

    $default  reduce using rule 24 (stmts)


state 68

   29 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 29 (postfix_expr)


state 69

   30 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 92


state 70

   40 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 40 (prefix_expr)


state 71

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   46 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 39

    primary_expr  go to state 43
    postfix_expr  go to state 44
    prefix_expr   go to state 93
    any_operator  go to state 46


state 72

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   48 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 94


state 73

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   50 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 95


state 74

   25 stmt: expr ";" .

    $default  reduce using rule 25 (stmt)


state 75

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 expr: var_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 96


state 76

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 77

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   21 body: . "opening braces {" "closing braces }"
   22     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21

    body  go to state 97


state 78

   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   67 tuple_typeexpr_arg: "identifier" ":" . typeexpr

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 28

    typeexpr           go to state 98
    nonunion_typeexpr  go to state 30
    union_typeexpr     go to state 31
    union_typeexprs    go to state 32
    tuple_typeexpr     go to state 33


state 79

   63 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 63 (tuple_typeexpr)


state 80

   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   65 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   66 tuple_typeexpr_arg: . typeexpr
   67                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 55
    "opening paranthesis ("  shift, and go to state 28

    typeexpr            go to state 56
    nonunion_typeexpr   go to state 30
    union_typeexpr      go to state 31
    union_typeexprs     go to state 32
    tuple_typeexpr      go to state 33
    tuple_typeexpr_arg  go to state 99


state 81

   56 typeexpr: . nonunion_typeexpr
   57         | . union_typeexpr
   58 nonunion_typeexpr: . "identifier"
   59                  | . tuple_typeexpr
   60 union_typeexpr: . union_typeexprs
   61 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   62                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   63 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   64 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   66 tuple_typeexpr_arg: . typeexpr
   67                   | . "identifier" ":" typeexpr

    "identifier"             shift, and go to state 55
    "opening paranthesis ("  shift, and go to state 28

    typeexpr            go to state 56
    nonunion_typeexpr   go to state 30
    union_typeexpr      go to state 31
    union_typeexprs     go to state 32
    tuple_typeexpr      go to state 33
    tuple_typeexpr_arg  go to state 100


state 82

   61 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 61 (union_typeexprs)


state 83

   62 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 62 (union_typeexprs)


state 84

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 85

   26 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ","]
   33 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   34             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   37 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 63
    ":"                      shift, and go to state 101

    $default  reduce using rule 26 (primary_expr)


state 86

   33 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 33 (postfix_expr)


state 87

   34 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   36 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 102
    ","                      shift, and go to state 103


state 88

   35 call_args: call_arg .

    $default  reduce using rule 35 (call_args)


state 89

   38 call_arg: expr .

    $default  reduce using rule 38 (call_arg)


state 90

   54 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 54 (var_expr)


state 91

   27 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 27 (primary_expr)


state 92

   30 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   31             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   32             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]

    "opening paranthesis ("  shift, and go to state 104

    $default  reduce using rule 32 (postfix_expr)


state 93

   46 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 46 (multiplicative_expr)


state 94

   46 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   48 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 71

    $default  reduce using rule 48 (additive_expr)


state 95

   48 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   50 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 72

    $default  reduce using rule 50 (relational_expr)


state 96

   50 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   53 expr: var_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 73

    $default  reduce using rule 53 (expr)


state 97

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 98

   67 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 67 (tuple_typeexpr_arg)


state 99

   65 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 65 (tuple_typeexpr_args)


state 100

   64 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 64 (tuple_typeexpr_args)


state 101

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   37 call_arg: "identifier" ":" . expr
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 37
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 105
    var_expr             go to state 51


state 102

   34 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 34 (postfix_expr)


state 103

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36 call_args: call_args "," . call_arg
   37 call_arg: . "identifier" ":" expr
   38         | . expr
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 85
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39

    primary_expr         go to state 43
    postfix_expr         go to state 44
    call_arg             go to state 106
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 89
    var_expr             go to state 51


state 104

   26 primary_expr: . "identifier"
   27             | . "opening paranthesis (" expr "closing paranthesis )"
   28 postfix_expr: . primary_expr
   29             | . postfix_expr OPERATOR
   30             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   30             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   31             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   31             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   32             | . postfix_expr "." "identifier"
   33             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35 call_args: . call_arg
   36          | . call_args "," call_arg
   37 call_arg: . "identifier" ":" expr
   38         | . expr
   39 prefix_expr: . postfix_expr
   40            | . any_operator prefix_expr
   41 any_operator: . MULTIPLICATIVE_OPERATOR
   42             | . ADDITIVE_OPERATOR
   43             | . RELATIONAL_OPERATOR
   44             | . OPERATOR
   45 multiplicative_expr: . prefix_expr
   46                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   47 additive_expr: . multiplicative_expr
   48              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   49 relational_expr: . additive_expr
   50                | . relational_expr RELATIONAL_OPERATOR additive_expr
   51 expr: . relational_expr
   52     | . var_expr
   53     | . var_expr "assignment operator =" relational_expr
   54 var_expr: . "var keyword" "identifier" typeexpr
   55         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 85
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 38
    "opening paranthesis ("  shift, and go to state 39
    "closing paranthesis )"  shift, and go to state 107

    primary_expr         go to state 43
    postfix_expr         go to state 44
    call_args            go to state 108
    call_arg             go to state 88
    prefix_expr          go to state 45
    any_operator         go to state 46
    multiplicative_expr  go to state 47
    additive_expr        go to state 48
    relational_expr      go to state 49
    expr                 go to state 89
    var_expr             go to state 51


state 105

   37 call_arg: "identifier" ":" expr .

    $default  reduce using rule 37 (call_arg)


state 106

   36 call_args: call_args "," call_arg .

    $default  reduce using rule 36 (call_args)


state 107

   30 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 30 (postfix_expr)


state 108

   31 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   36 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 109
    ","                      shift, and go to state 103


state 109

   31 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 31 (postfix_expr)
