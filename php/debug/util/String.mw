/*
 * Copyright Â© 2013 Fabian Schuiki.
 * An implementation for the String type.
 */

/** The basic string type. */
type String
{
	var $const char* cstr;
}

/** Converts the String to a const char* C string. */
func cstr (String s) -> ($const char* r)
{
	r = s.cstr;
}

/** Used internally to convert a const char* C string to a Maxwell String. */
func _makeString ($const char* s) -> (String r)
{
	r = new String;
	r.cstr = s;
}

/** Concatenates the two strings. */
func concatenate (String s1, String s2) -> (String r)
{
	var int l1 = strlen(s1.cstr);
	var int l2 = strlen(s2.cstr);
	var int totalLength = l1 + l2;

	var $char* tmp = ($char*)malloc(totalLength + 1);
	strcpy(tmp, cstr(s1));
	strcpy(($char*)(($long)tmp + ($long)l1), cstr(s2));
	tmp[totalLength] = 0;

	r = new String;
	r.cstr = ($const char*)tmp;
}

/** Returns the length of a string. */
func length (String s) -> (int l)
{
	l = strlen(s.cstr());
}

/** Replaces the first template character in the string by the int passed to
 * the function. */
func format (String in, int v) -> (String out)
{
	out = in.format(v.toString());
}

/** Replaces the first template character in the string by the string passed to
 * the function. */
func format (String in, String v) -> (String out)
{
	//Create a new string that has enough space to store the final string.
	var $char* str = ($char*)malloc(in.length() + v.length());

	//Copy the string segments together.
	var int i = 0;
	var int d = 0;
	for (; in.cstr[i] != 0 && in.cstr[i] != *"%"; i = i + 1) {
		str[d] = in.cstr[i];
		d = d + 1;
	}
	i = i + 1;
	for (var int n = 0; v.cstr[n] != 0; n = n + 1) {
		str[d] = v.cstr[n];
		d = d + 1;
	}
	for (; in.cstr[i] != 0; i = i + 1) {
		str[d] = in.cstr[i];
		d = d + 1;
	}
	str[d] = 0;

	//Move everything into the final string.
	out = new String;
	out.cstr = str;
}

/** Converts the given integer to a string. */
func toString (int i) -> (String s)
{
	var $char* result;
	asprintf(&result, "%i".cstr(), i);
	s = new String;
	s.cstr = result;
}

external "stdio.h" {
	func asprintf ($char** ret, $const char* format, int arg);
}

external "string.h" {
	func strlen ($const char* s) -> (int r);
	func strcpy ($char* dst, $const char* src);
}

external "stdlib.h" {
	func malloc (int size) -> ($void* memory);
}