Terminals which are not used

   "real number constant"
   "integer number constant"
   "string constant"
   "operator"
   "symbol"
   "opening bracket ["
   "closing bracket ]"
   "."
   ":"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: "func keyword" "identifier" body
    7          | "func keyword" "identifier" func_arg_tuple body
    8          | "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )"
   11               | func_arg
   12               | "opening paranthesis (" func_args "closing paranthesis )"

   13 func_args: func_arg
   14          | func_args "," func_arg

   15 func_arg: "identifier"
   16         | "identifier" type_expr

   17 type_decl: "type keyword" "identifier"

   18 type_expr: union_type_expr
   19          | nonunion_type_expr

   20 nonunion_type_expr: "identifier"

   21 union_type_expr: union_type_exprs

   22 union_type_exprs: nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | union_type_exprs "vertical pipe |" nonunion_type_expr

   24 body: "opening braces {" "closing braces }"
   25     | "opening braces {" stmts "closing braces }"

   26 stmts: stmt
   27      | stmts stmt

   28 stmt: expr ";"

   29 primary_expr: "identifier"
   30             | "opening paranthesis (" expr "closing paranthesis )"

   31 multiplicative_expr: primary_expr
   32                    | multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr

   33 additive_expr: multiplicative_expr
   34              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   35 relational_expr: additive_expr
   36                | relational_expr RELATIONAL_OPERATOR additive_expr

   37 expr: relational_expr
   38     | var_expr
   39     | var_expr "assignment operator =" relational_expr

   40 var_expr: "var keyword" "identifier" type_expr
   41         | "var keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 6 7 8 9 15 16 17 20 29 40 41
"real number constant" (259)
"integer number constant" (260)
"string constant" (261)
"operator" (262)
MULTIPLICATIVE_OPERATOR (263) 32
ADDITIVE_OPERATOR (264) 34
RELATIONAL_OPERATOR (265) 36
"symbol" (266)
"func keyword" (267) 6 7 8 9
"var keyword" (268) 40 41
"type keyword" (269) 17
"opening paranthesis (" (270) 10 12 30
"closing paranthesis )" (271) 10 12 30
"opening braces {" (272) 24 25
"closing braces }" (273) 24 25
"opening bracket [" (274)
"closing bracket ]" (275)
"vertical pipe |" (276) 22 23
"." (277)
"," (278) 14
":" (279)
";" (280) 28
"right arrow ->" (281) 8 9
"assignment operator =" (282) 39


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
root (29)
    on left: 1, on right: 0
root_stmts (30)
    on left: 2 3, on right: 1 2
root_stmt (31)
    on left: 4 5, on right: 2 3
func_decl (32)
    on left: 6 7 8 9, on right: 4
func_arg_tuple (33)
    on left: 10 11 12, on right: 7 8 9
func_args (34)
    on left: 13 14, on right: 12 14
func_arg (35)
    on left: 15 16, on right: 11 13 14
type_decl (36)
    on left: 17, on right: 5
type_expr (37)
    on left: 18 19, on right: 16 40
nonunion_type_expr (38)
    on left: 20, on right: 19 22 23
union_type_expr (39)
    on left: 21, on right: 18
union_type_exprs (40)
    on left: 22 23, on right: 21 23
body (41)
    on left: 24 25, on right: 6 7 8 9
stmts (42)
    on left: 26 27, on right: 25 27
stmt (43)
    on left: 28, on right: 26 27
primary_expr (44)
    on left: 29 30, on right: 31 32
multiplicative_expr (45)
    on left: 31 32, on right: 32 33 34
additive_expr (46)
    on left: 33 34, on right: 34 35 36
relational_expr (47)
    on left: 35 36, on right: 36 37 39
expr (48)
    on left: 37 38 39, on right: 28 30
var_expr (49)
    on left: 40 41, on right: 38 39


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root        go to state 3
    root_stmts  go to state 4
    root_stmt   go to state 5
    func_decl   go to state 6
    type_decl   go to state 7


state 1

    6 func_decl: "func keyword" . "identifier" body
    7          | "func keyword" . "identifier" func_arg_tuple body
    8          | "func keyword" . "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" . "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

    "identifier"  shift, and go to state 8


state 2

   17 type_decl: "type keyword" . "identifier"

    "identifier"  shift, and go to state 9


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 10


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt  go to state 11
    func_decl  go to state 6
    type_decl  go to state 7


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 8

    6 func_decl: "func keyword" "identifier" . body
    7          | "func keyword" "identifier" . func_arg_tuple body
    8          | "func keyword" "identifier" . "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" . func_arg_tuple "right arrow ->" func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13
    "opening braces {"       shift, and go to state 14
    "right arrow ->"         shift, and go to state 15

    func_arg_tuple  go to state 16
    func_arg        go to state 17
    body            go to state 18


state 9

   17 type_decl: "type keyword" "identifier" .

    $default  reduce using rule 17 (type_decl)


state 10

    0 $accept: root "end of input" .

    $default  accept


state 11

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 12

   15 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   16         | "identifier" . type_expr
   18 type_expr: . union_type_expr
   19          | . nonunion_type_expr
   20 nonunion_type_expr: . "identifier"
   21 union_type_expr: . union_type_exprs
   22 union_type_exprs: . nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | . union_type_exprs "vertical pipe |" nonunion_type_expr

    "identifier"  shift, and go to state 19

    $default  reduce using rule 15 (func_arg)

    type_expr           go to state 20
    nonunion_type_expr  go to state 21
    union_type_expr     go to state 22
    union_type_exprs    go to state 23


state 13

   10 func_arg_tuple: "opening paranthesis (" . "closing paranthesis )"
   12               | "opening paranthesis (" . func_args "closing paranthesis )"
   13 func_args: . func_arg
   14          | . func_args "," func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "closing paranthesis )"  shift, and go to state 24

    func_args  go to state 25
    func_arg   go to state 26


state 14

   24 body: "opening braces {" . "closing braces }"
   25     | "opening braces {" . stmts "closing braces }"
   26 stmts: . stmt
   27      | . stmts stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: . multiplicative_expr
   34              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   35 relational_expr: . additive_expr
   36                | . relational_expr RELATIONAL_OPERATOR additive_expr
   37 expr: . relational_expr
   38     | . var_expr
   39     | . var_expr "assignment operator =" relational_expr
   40 var_expr: . "var keyword" "identifier" type_expr
   41         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    "var keyword"            shift, and go to state 28
    "opening paranthesis ("  shift, and go to state 29
    "closing braces }"       shift, and go to state 30

    stmts                go to state 31
    stmt                 go to state 32
    primary_expr         go to state 33
    multiplicative_expr  go to state 34
    additive_expr        go to state 35
    relational_expr      go to state 36
    expr                 go to state 37
    var_expr             go to state 38


state 15

    8 func_decl: "func keyword" "identifier" "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 39
    func_arg        go to state 17


state 16

    7 func_decl: "func keyword" "identifier" func_arg_tuple . body
    9          | "func keyword" "identifier" func_arg_tuple . "right arrow ->" func_arg_tuple body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14
    "right arrow ->"    shift, and go to state 40

    body  go to state 41


state 17

   11 func_arg_tuple: func_arg .

    $default  reduce using rule 11 (func_arg_tuple)


state 18

    6 func_decl: "func keyword" "identifier" body .

    $default  reduce using rule 6 (func_decl)


state 19

   20 nonunion_type_expr: "identifier" .

    $default  reduce using rule 20 (nonunion_type_expr)


state 20

   16 func_arg: "identifier" type_expr .

    $default  reduce using rule 16 (func_arg)


state 21

   19 type_expr: nonunion_type_expr .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   22 union_type_exprs: nonunion_type_expr . "vertical pipe |" nonunion_type_expr

    "vertical pipe |"  shift, and go to state 42

    $default  reduce using rule 19 (type_expr)


state 22

   18 type_expr: union_type_expr .

    $default  reduce using rule 18 (type_expr)


state 23

   21 union_type_expr: union_type_exprs .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   23 union_type_exprs: union_type_exprs . "vertical pipe |" nonunion_type_expr

    "vertical pipe |"  shift, and go to state 43

    $default  reduce using rule 21 (union_type_expr)


state 24

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 10 (func_arg_tuple)


state 25

   12 func_arg_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   14 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 44
    ","                      shift, and go to state 45


state 26

   13 func_args: func_arg .

    $default  reduce using rule 13 (func_args)


state 27

   29 primary_expr: "identifier" .

    $default  reduce using rule 29 (primary_expr)


state 28

   40 var_expr: "var keyword" . "identifier" type_expr
   41         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 46


state 29

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | "opening paranthesis (" . expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: . multiplicative_expr
   34              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   35 relational_expr: . additive_expr
   36                | . relational_expr RELATIONAL_OPERATOR additive_expr
   37 expr: . relational_expr
   38     | . var_expr
   39     | . var_expr "assignment operator =" relational_expr
   40 var_expr: . "var keyword" "identifier" type_expr
   41         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    "var keyword"            shift, and go to state 28
    "opening paranthesis ("  shift, and go to state 29

    primary_expr         go to state 33
    multiplicative_expr  go to state 34
    additive_expr        go to state 35
    relational_expr      go to state 36
    expr                 go to state 47
    var_expr             go to state 38


state 30

   24 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 24 (body)


state 31

   25 body: "opening braces {" stmts . "closing braces }"
   27 stmts: stmts . stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: . multiplicative_expr
   34              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   35 relational_expr: . additive_expr
   36                | . relational_expr RELATIONAL_OPERATOR additive_expr
   37 expr: . relational_expr
   38     | . var_expr
   39     | . var_expr "assignment operator =" relational_expr
   40 var_expr: . "var keyword" "identifier" type_expr
   41         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    "var keyword"            shift, and go to state 28
    "opening paranthesis ("  shift, and go to state 29
    "closing braces }"       shift, and go to state 48

    stmt                 go to state 49
    primary_expr         go to state 33
    multiplicative_expr  go to state 34
    additive_expr        go to state 35
    relational_expr      go to state 36
    expr                 go to state 37
    var_expr             go to state 38


state 32

   26 stmts: stmt .

    $default  reduce using rule 26 (stmts)


state 33

   31 multiplicative_expr: primary_expr .

    $default  reduce using rule 31 (multiplicative_expr)


state 34

   32 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 50

    $default  reduce using rule 33 (additive_expr)


state 35

   34 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   35 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 51

    $default  reduce using rule 35 (relational_expr)


state 36

   36 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   37 expr: relational_expr .  ["closing paranthesis )", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 52

    $default  reduce using rule 37 (expr)


state 37

   28 stmt: expr . ";"

    ";"  shift, and go to state 53


state 38

   38 expr: var_expr .  ["closing paranthesis )", ";"]
   39     | var_expr . "assignment operator =" relational_expr

    "assignment operator ="  shift, and go to state 54

    $default  reduce using rule 38 (expr)


state 39

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 55


state 40

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 56
    func_arg        go to state 17


state 41

    7 func_decl: "func keyword" "identifier" func_arg_tuple body .

    $default  reduce using rule 7 (func_decl)


state 42

   20 nonunion_type_expr: . "identifier"
   22 union_type_exprs: nonunion_type_expr "vertical pipe |" . nonunion_type_expr

    "identifier"  shift, and go to state 19

    nonunion_type_expr  go to state 57


state 43

   20 nonunion_type_expr: . "identifier"
   23 union_type_exprs: union_type_exprs "vertical pipe |" . nonunion_type_expr

    "identifier"  shift, and go to state 19

    nonunion_type_expr  go to state 58


state 44

   12 func_arg_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 12 (func_arg_tuple)


state 45

   14 func_args: func_args "," . func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"  shift, and go to state 12

    func_arg  go to state 59


state 46

   18 type_expr: . union_type_expr
   19          | . nonunion_type_expr
   20 nonunion_type_expr: . "identifier"
   21 union_type_expr: . union_type_exprs
   22 union_type_exprs: . nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | . union_type_exprs "vertical pipe |" nonunion_type_expr
   40 var_expr: "var keyword" "identifier" . type_expr
   41         | "var keyword" "identifier" .  ["closing paranthesis )", ";", "assignment operator ="]

    "identifier"  shift, and go to state 19

    $default  reduce using rule 41 (var_expr)

    type_expr           go to state 60
    nonunion_type_expr  go to state 21
    union_type_expr     go to state 22
    union_type_exprs    go to state 23


state 47

   30 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 61


state 48

   25 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 25 (body)


state 49

   27 stmts: stmts stmt .

    $default  reduce using rule 27 (stmts)


state 50

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   32 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . primary_expr

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 29

    primary_expr  go to state 62


state 51

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   34 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 29

    primary_expr         go to state 33
    multiplicative_expr  go to state 63


state 52

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: . multiplicative_expr
   34              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   36 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 29

    primary_expr         go to state 33
    multiplicative_expr  go to state 34
    additive_expr        go to state 64


state 53

   28 stmt: expr ";" .

    $default  reduce using rule 28 (stmt)


state 54

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 multiplicative_expr: . primary_expr
   32                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr
   33 additive_expr: . multiplicative_expr
   34              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   35 relational_expr: . additive_expr
   36                | . relational_expr RELATIONAL_OPERATOR additive_expr
   39 expr: var_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 27
    "opening paranthesis ("  shift, and go to state 29

    primary_expr         go to state 33
    multiplicative_expr  go to state 34
    additive_expr        go to state 35
    relational_expr      go to state 65


state 55

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 8 (func_decl)


state 56

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 66


state 57

   22 union_type_exprs: nonunion_type_expr "vertical pipe |" nonunion_type_expr .

    $default  reduce using rule 22 (union_type_exprs)


state 58

   23 union_type_exprs: union_type_exprs "vertical pipe |" nonunion_type_expr .

    $default  reduce using rule 23 (union_type_exprs)


state 59

   14 func_args: func_args "," func_arg .

    $default  reduce using rule 14 (func_args)


state 60

   40 var_expr: "var keyword" "identifier" type_expr .

    $default  reduce using rule 40 (var_expr)


state 61

   30 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 30 (primary_expr)


state 62

   32 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR primary_expr .

    $default  reduce using rule 32 (multiplicative_expr)


state 63

   32 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR primary_expr
   34 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 50

    $default  reduce using rule 34 (additive_expr)


state 64

   34 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   36 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 51

    $default  reduce using rule 36 (relational_expr)


state 65

   36 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   39 expr: var_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 52

    $default  reduce using rule 39 (expr)


state 66

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 9 (func_decl)
