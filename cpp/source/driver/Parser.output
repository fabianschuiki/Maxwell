Terminals which are not used

   "symbol"
   "else keyword"
   "for keyword"
   "nil constant"
   "incase keyword"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 body: "opening braces {" "closing braces }"
   24     | "opening braces {" stmts "closing braces }"

   25 stmts: stmt
   26      | stmts stmt

   27 stmt: expr ";"

   28 primary_expr: "identifier"
   29             | "opening paranthesis (" expr "closing paranthesis )"
   30             | "number constant"
   31             | "string constant"
   32             | "opening bracket [" expr_list "closing bracket ]"
   33             | "opening braces {" expr_list "closing braces }"
   34             | "opening braces {" map_expr_pairs "closing braces }"
   35             | if_expr

   36 map_expr_pairs: map_expr_pair
   37               | map_expr_pairs "," map_expr_pair

   38 map_expr_pair: primary_expr ":" expr

   39 if_expr: "opening braces {" if_expr_conds "closing braces }"
   40        | "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"

   41 if_expr_conds: if_expr_cond
   42              | if_expr_conds "," if_expr_cond

   43 if_expr_cond: expr "if keyword" expr

   44 postfix_expr: primary_expr
   45             | postfix_expr OPERATOR
   46             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | postfix_expr "." "identifier"
   49             | "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   51 call_args: call_arg
   52          | call_args "," call_arg

   53 call_arg: "identifier" ":" expr
   54         | expr

   55 prefix_expr: postfix_expr
   56            | any_operator prefix_expr

   57 any_operator: MULTIPLICATIVE_OPERATOR
   58             | ADDITIVE_OPERATOR
   59             | RELATIONAL_OPERATOR
   60             | OPERATOR

   61 multiplicative_expr: prefix_expr
   62                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   63 additive_expr: multiplicative_expr
   64              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   65 relational_expr: additive_expr
   66                | relational_expr RELATIONAL_OPERATOR additive_expr

   67 equality_expr: relational_expr
   68              | equality_expr EQUALITY_OPERATOR relational_expr

   69 and_expr: equality_expr
   70         | and_expr AND_OPERATOR equality_expr

   71 or_expr: and_expr
   72        | or_expr OR_OPERATOR and_expr

   73 assignment_expr: or_expr
   74                | assignment_expr "assignment operator =" or_expr

   75 var_expr: "var keyword" "identifier" typeexpr
   76         | "var keyword" "identifier"

   77 expr: assignment_expr
   78     | var_expr
   79     | var_expr "assignment operator =" assignment_expr

   80 expr_list: expr
   81          | expr_list "," expr

   82 typeexpr: nonunion_typeexpr
   83         | union_typeexpr

   84 nonunion_typeexpr: "identifier"
   85                  | tuple_typeexpr
   86                  | qualified_typeexpr
   87                  | specialized_typeexpr

   88 union_typeexpr: union_typeexprs

   89 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   91 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   92 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   93                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   94 tuple_typeexpr_arg: typeexpr
   95                   | "identifier" ":" typeexpr

   96 qualified_typeexpr: qualified_typeexpr_qualifiers

   97 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
   98                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

   99 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

  100 specialized_typeexpr_specs: typeexpr
  101                           | specialized_typeexpr_specs "," typeexpr

  102 qualified_typeexpr_qualifier: structure_qualifier
  103                             | interface_qualifier
  104                             | native_qualifier
  105                             | range_qualifier

  106 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

  108 structure_qualifier_decl: "value keyword"
  109                         | "object keyword"

  110 structure_qualifier_stmts: structure_qualifier_stmt
  111                          | structure_qualifier_stmts structure_qualifier_stmt

  112 structure_qualifier_stmt: "identifier" ";"
  113                         | "identifier" typeexpr ";"

  114 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
  115                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

  116 interface_qualifier_stmts: interface_qualifier_stmt
  117                          | interface_qualifier_stmts interface_qualifier_stmt

  118 interface_qualifier_stmt: "identifier"

  119 native_qualifier: "native keyword" "identifier"

  120 range_qualifier: range_qualifier_decl
  121                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

  122 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 28 46 47 48 49 50 53 75 76 84 95 112
    113 118 119 122
"number constant" (259) 30 121
"string constant" (260) 31
MULTIPLICATIVE_OPERATOR (261) 57 62
ADDITIVE_OPERATOR (262) 58 64
RELATIONAL_OPERATOR (263) 59 66
EQUALITY_OPERATOR (264) 68
AND_OPERATOR (265) 70
OR_OPERATOR (266) 72
OPERATOR (267) 45 60
"symbol" (268)
"func keyword" (269) 10 11 12
"var keyword" (270) 75 76
"type keyword" (271) 22
"unary keyword" (272) 12
"value keyword" (273) 108
"object keyword" (274) 109
"interface keyword" (275) 114 115
"native keyword" (276) 119
"range keyword" (277) 122
"if keyword" (278) 43
"else keyword" (279)
"for keyword" (280)
"nil constant" (281)
"incase keyword" (282)
"otherwise keyword" (283) 40
"opening paranthesis (" (284) 13 15 29 46 47 49 50 91 121
"closing paranthesis )" (285) 13 15 29 46 47 49 50 91 121
"opening braces {" (286) 23 24 33 34 39 40 106 107 114 115
"closing braces }" (287) 23 24 33 34 39 40 106 107 114 115
"opening bracket [" (288) 32 99
"closing bracket ]" (289) 32 99
"vertical pipe |" (290) 89 90
"." (291) 46 47 48
"," (292) 17 37 40 42 52 81 92 93 101 121
":" (293) 38 53 95
";" (294) 27 112 113
"right arrow ->" (295) 8 9
"assignment operator =" (296) 74 79


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
root (43)
    on left: 1, on right: 0
root_stmts (44)
    on left: 2 3, on right: 1 2
root_stmt (45)
    on left: 4 5, on right: 2 3
func_decl (46)
    on left: 6 7 8 9, on right: 4
func_decl_name (47)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (48)
    on left: 13 14 15, on right: 7 8 9
func_args (49)
    on left: 16 17, on right: 15 17
func_arg (50)
    on left: 18 19, on right: 14 16 17
type_decl (51)
    on left: 20 21, on right: 5
type_decl_name (52)
    on left: 22, on right: 20 21
body (53)
    on left: 23 24, on right: 6 7 8 9
stmts (54)
    on left: 25 26, on right: 24 26
stmt (55)
    on left: 27, on right: 25 26
primary_expr (56)
    on left: 28 29 30 31 32 33 34 35, on right: 38 44
map_expr_pairs (57)
    on left: 36 37, on right: 34 37
map_expr_pair (58)
    on left: 38, on right: 36 37
if_expr (59)
    on left: 39 40, on right: 35
if_expr_conds (60)
    on left: 41 42, on right: 39 40 42
if_expr_cond (61)
    on left: 43, on right: 41 42
postfix_expr (62)
    on left: 44 45 46 47 48 49 50, on right: 45 46 47 48 55
call_args (63)
    on left: 51 52, on right: 47 50 52
call_arg (64)
    on left: 53 54, on right: 51 52
prefix_expr (65)
    on left: 55 56, on right: 56 61 62
any_operator (66)
    on left: 57 58 59 60, on right: 11 12 56
multiplicative_expr (67)
    on left: 61 62, on right: 62 63 64
additive_expr (68)
    on left: 63 64, on right: 64 65 66
relational_expr (69)
    on left: 65 66, on right: 66 67 68
equality_expr (70)
    on left: 67 68, on right: 68 69 70
and_expr (71)
    on left: 69 70, on right: 70 71 72
or_expr (72)
    on left: 71 72, on right: 72 73 74
assignment_expr (73)
    on left: 73 74, on right: 74 77 79
var_expr (74)
    on left: 75 76, on right: 78 79
expr (75)
    on left: 77 78 79, on right: 27 29 38 40 43 53 54 80 81
expr_list (76)
    on left: 80 81, on right: 32 33 81
typeexpr (77)
    on left: 82 83, on right: 19 21 75 94 95 100 101 113
nonunion_typeexpr (78)
    on left: 84 85 86 87, on right: 82 89 90 99
union_typeexpr (79)
    on left: 88, on right: 83
union_typeexprs (80)
    on left: 89 90, on right: 88 90
tuple_typeexpr (81)
    on left: 91, on right: 85
tuple_typeexpr_args (82)
    on left: 92 93, on right: 91 93
tuple_typeexpr_arg (83)
    on left: 94 95, on right: 92 93
qualified_typeexpr (84)
    on left: 96, on right: 86
qualified_typeexpr_qualifiers (85)
    on left: 97 98, on right: 96 98
specialized_typeexpr (86)
    on left: 99, on right: 87
specialized_typeexpr_specs (87)
    on left: 100 101, on right: 99 101
qualified_typeexpr_qualifier (88)
    on left: 102 103 104 105, on right: 97 98
structure_qualifier (89)
    on left: 106 107, on right: 102
structure_qualifier_decl (90)
    on left: 108 109, on right: 106 107
structure_qualifier_stmts (91)
    on left: 110 111, on right: 107 111
structure_qualifier_stmt (92)
    on left: 112 113, on right: 110 111
interface_qualifier (93)
    on left: 114 115, on right: 103
interface_qualifier_stmts (94)
    on left: 116 117, on right: 115 117
interface_qualifier_stmt (95)
    on left: 118, on right: 116 117
native_qualifier (96)
    on left: 119, on right: 104
range_qualifier (97)
    on left: 120 121, on right: 105
range_qualifier_decl (98)
    on left: 122, on right: 120 121


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    body             go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 34
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   57 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 57 (any_operator)


state 12

   58 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 58 (any_operator)


state 13

   59 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 59 (any_operator)


state 14

   60 any_operator: OPERATOR .

    $default  reduce using rule 60 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 49


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 50
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 51

    func_args  go to state 52
    func_arg   go to state 53


state 22

   23 body: "opening braces {" . "closing braces }"
   24     | "opening braces {" . stmts "closing braces }"
   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "closing braces }"       shift, and go to state 60
    "opening bracket ["      shift, and go to state 61

    stmts                go to state 62
    stmt                 go to state 63
    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 77


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 78
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 79

    body  go to state 80


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 27

   84 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 84 (nonunion_typeexpr)


state 28

  108 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 108 (structure_qualifier_decl)


state 29

  109 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 109 (structure_qualifier_decl)


state 30

  114 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
  115                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 81


state 31

  119 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 82


state 32

  122 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 83


state 33

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   91               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   92 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   93                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   94 tuple_typeexpr_arg: . typeexpr
   95                   | . "identifier" ":" typeexpr
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 84
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 85
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_args            go to state 86
    tuple_typeexpr_arg             go to state 87
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 34

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 35

   82 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   89 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr
   99 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 88
    "vertical pipe |"    shift, and go to state 89

    $default  reduce using rule 82 (typeexpr)


state 36

   83 typeexpr: union_typeexpr .

    $default  reduce using rule 83 (typeexpr)


state 37

   88 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   90 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 90

    $default  reduce using rule 88 (union_typeexpr)


state 38

   85 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 85 (nonunion_typeexpr)


state 39

   86 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 86 (nonunion_typeexpr)


state 40

   96 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   98 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 96 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 91
    structure_qualifier           go to state 43
    structure_qualifier_decl      go to state 44
    interface_qualifier           go to state 45
    native_qualifier              go to state 46
    range_qualifier               go to state 47
    range_qualifier_decl          go to state 48


state 41

   87 nonunion_typeexpr: specialized_typeexpr .

    $default  reduce using rule 87 (nonunion_typeexpr)


state 42

   97 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 97 (qualified_typeexpr_qualifiers)


state 43

  102 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 102 (qualified_typeexpr_qualifier)


state 44

  106 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
  107                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 92


state 45

  103 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 103 (qualified_typeexpr_qualifier)


state 46

  104 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 104 (qualified_typeexpr_qualifier)


state 47

  105 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 105 (qualified_typeexpr_qualifier)


state 48

  120 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  121                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 93

    $default  reduce using rule 120 (range_qualifier)


state 49

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 50

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 51

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 52

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 94
    ","                      shift, and go to state 95


state 53

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 54

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ":", ";", "assignment operator ="]
   49 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   50             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 96

    $default  reduce using rule 28 (primary_expr)


state 55

   30 primary_expr: "number constant" .

    $default  reduce using rule 30 (primary_expr)


state 56

   31 primary_expr: "string constant" .

    $default  reduce using rule 31 (primary_expr)


state 57

   75 var_expr: "var keyword" . "identifier" typeexpr
   76         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 97


state 58

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   29             | "opening paranthesis (" . expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 98


state 59

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   33             | "opening braces {" . expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   34             | "opening braces {" . map_expr_pairs "closing braces }"
   35             | . if_expr
   36 map_expr_pairs: . map_expr_pair
   37               | . map_expr_pairs "," map_expr_pair
   38 map_expr_pair: . primary_expr ":" expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   39        | "opening braces {" . if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   40        | "opening braces {" . if_expr_conds "," expr "otherwise keyword" "closing braces }"
   41 if_expr_conds: . if_expr_cond
   42              | . if_expr_conds "," if_expr_cond
   43 if_expr_cond: . expr "if keyword" expr
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr
   80 expr_list: . expr
   81          | . expr_list "," expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 99
    map_expr_pairs       go to state 100
    map_expr_pair        go to state 101
    if_expr              go to state 65
    if_expr_conds        go to state 102
    if_expr_cond         go to state 103
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 104
    expr_list            go to state 105


state 60

   23 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 23 (body)


state 61

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   32             | "opening bracket [" . expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr
   80 expr_list: . expr
   81          | . expr_list "," expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 106
    expr_list            go to state 107


state 62

   24 body: "opening braces {" stmts . "closing braces }"
   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "closing braces }"       shift, and go to state 108
    "opening bracket ["      shift, and go to state 61

    stmt                 go to state 109
    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 77


state 63

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


state 64

   44 postfix_expr: primary_expr .

    $default  reduce using rule 44 (postfix_expr)


state 65

   35 primary_expr: if_expr .

    $default  reduce using rule 35 (primary_expr)


state 66

   45 postfix_expr: postfix_expr . OPERATOR
   46             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | postfix_expr . "." "identifier"
   55 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 110
    "."       shift, and go to state 111

    $default  reduce using rule 55 (prefix_expr)


state 67

   61 multiplicative_expr: prefix_expr .

    $default  reduce using rule 61 (multiplicative_expr)


state 68

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   56            | any_operator . prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr  go to state 64
    if_expr       go to state 65
    postfix_expr  go to state 66
    prefix_expr   go to state 112
    any_operator  go to state 68


state 69

   62 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 113

    $default  reduce using rule 63 (additive_expr)


state 70

   64 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 114

    $default  reduce using rule 65 (relational_expr)


state 71

   66 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   67 equality_expr: relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 115

    $default  reduce using rule 67 (equality_expr)


state 72

   68 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   69 and_expr: equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 116

    $default  reduce using rule 69 (and_expr)


state 73

   70 and_expr: and_expr . AND_OPERATOR equality_expr
   71 or_expr: and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 117

    $default  reduce using rule 71 (or_expr)


state 74

   72 or_expr: or_expr . OR_OPERATOR and_expr
   73 assignment_expr: or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 118

    $default  reduce using rule 73 (assignment_expr)


state 75

   74 assignment_expr: assignment_expr . "assignment operator =" or_expr
   77 expr: assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 119

    $default  reduce using rule 77 (expr)


state 76

   78 expr: var_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]
   79     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 120

    $default  reduce using rule 78 (expr)


state 77

   27 stmt: expr . ";"

    ";"  shift, and go to state 121


state 78

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 122


state 79

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 123
    func_arg         go to state 25


state 80

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 81

  114 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
  115                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
  116 interface_qualifier_stmts: . interface_qualifier_stmt
  117                          | . interface_qualifier_stmts interface_qualifier_stmt
  118 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 124
    "closing braces }"  shift, and go to state 125

    interface_qualifier_stmts  go to state 126
    interface_qualifier_stmt   go to state 127


state 82

  119 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 119 (native_qualifier)


state 83

  122 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 122 (range_qualifier_decl)


state 84

   84 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "opening bracket [", "vertical pipe |", ","]
   95 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 128

    $default  reduce using rule 84 (nonunion_typeexpr)


state 85

   94 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 94 (tuple_typeexpr_arg)


state 86

   91 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   93 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 129
    ","                      shift, and go to state 130


state 87

   92 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 131


state 88

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
   99                     | nonunion_typeexpr "opening bracket [" . specialized_typeexpr_specs "closing bracket ]"
  100 specialized_typeexpr_specs: . typeexpr
  101                           | . specialized_typeexpr_specs "," typeexpr
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 132
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    specialized_typeexpr_specs     go to state 133
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 89

   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   89 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 134
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 90

   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   90 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 135
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 91

   98 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 98 (qualified_typeexpr_qualifiers)


state 92

  106 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
  107                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
  110 structure_qualifier_stmts: . structure_qualifier_stmt
  111                          | . structure_qualifier_stmts structure_qualifier_stmt
  112 structure_qualifier_stmt: . "identifier" ";"
  113                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 136
    "closing braces }"  shift, and go to state 137

    structure_qualifier_stmts  go to state 138
    structure_qualifier_stmt   go to state 139


state 93

  121 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 140


state 94

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 95

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 141


state 96

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   49             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   50             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   51 call_args: . call_arg
   52          | . call_args "," call_arg
   53 call_arg: . "identifier" ":" expr
   54         | . expr
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 142
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "closing paranthesis )"  shift, and go to state 143
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    call_args            go to state 144
    call_arg             go to state 145
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 146


state 97

   75 var_expr: "var keyword" "identifier" . typeexpr
   76         | "var keyword" "identifier" .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]
   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 76 (var_expr)

    typeexpr                       go to state 147
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 98

   29 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 148


state 99

   38 map_expr_pair: primary_expr . ":" expr
   44 postfix_expr: primary_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "closing braces }", ".", ",", "assignment operator ="]

    ":"  shift, and go to state 149

    $default  reduce using rule 44 (postfix_expr)


state 100

   34 primary_expr: "opening braces {" map_expr_pairs . "closing braces }"
   37 map_expr_pairs: map_expr_pairs . "," map_expr_pair

    "closing braces }"  shift, and go to state 150
    ","                 shift, and go to state 151


state 101

   36 map_expr_pairs: map_expr_pair .

    $default  reduce using rule 36 (map_expr_pairs)


state 102

   39 if_expr: "opening braces {" if_expr_conds . "closing braces }"
   40        | "opening braces {" if_expr_conds . "," expr "otherwise keyword" "closing braces }"
   42 if_expr_conds: if_expr_conds . "," if_expr_cond

    "closing braces }"  shift, and go to state 152
    ","                 shift, and go to state 153


state 103

   41 if_expr_conds: if_expr_cond .

    $default  reduce using rule 41 (if_expr_conds)


state 104

   43 if_expr_cond: expr . "if keyword" expr
   80 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 154

    $default  reduce using rule 80 (expr_list)


state 105

   33 primary_expr: "opening braces {" expr_list . "closing braces }"
   81 expr_list: expr_list . "," expr

    "closing braces }"  shift, and go to state 155
    ","                 shift, and go to state 156


state 106

   80 expr_list: expr .

    $default  reduce using rule 80 (expr_list)


state 107

   32 primary_expr: "opening bracket [" expr_list . "closing bracket ]"
   81 expr_list: expr_list . "," expr

    "closing bracket ]"  shift, and go to state 157
    ","                  shift, and go to state 156


state 108

   24 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 24 (body)


state 109

   26 stmts: stmts stmt .

    $default  reduce using rule 26 (stmts)


state 110

   45 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 45 (postfix_expr)


state 111

   46 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 158


state 112

   56 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 56 (prefix_expr)


state 113

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   62 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr  go to state 64
    if_expr       go to state 65
    postfix_expr  go to state 66
    prefix_expr   go to state 159
    any_operator  go to state 68


state 114

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   64 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 160


state 115

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   66 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 161


state 116

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   68 equality_expr: equality_expr EQUALITY_OPERATOR . relational_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 162


state 117

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   70 and_expr: and_expr AND_OPERATOR . equality_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 163


state 118

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   72 or_expr: or_expr OR_OPERATOR . and_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 164


state 119

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   74 assignment_expr: assignment_expr "assignment operator =" . or_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 165


state 120

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   79 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 166


state 121

   27 stmt: expr ";" .

    $default  reduce using rule 27 (stmt)


state 122

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 123

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 167


state 124

  118 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 118 (interface_qualifier_stmt)


state 125

  114 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 114 (interface_qualifier)


state 126

  115 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
  117 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
  118 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 124
    "closing braces }"  shift, and go to state 168

    interface_qualifier_stmt  go to state 169


state 127

  116 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 116 (interface_qualifier_stmts)


state 128

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   95 tuple_typeexpr_arg: "identifier" ":" . typeexpr
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 170
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 129

   91 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 91 (tuple_typeexpr)


state 130

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   93 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   94 tuple_typeexpr_arg: . typeexpr
   95                   | . "identifier" ":" typeexpr
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 84
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 85
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 171
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 131

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   92 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   94 tuple_typeexpr_arg: . typeexpr
   95                   | . "identifier" ":" typeexpr
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 84
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 85
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 172
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 132

  100 specialized_typeexpr_specs: typeexpr .

    $default  reduce using rule 100 (specialized_typeexpr_specs)


state 133

   99 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs . "closing bracket ]"
  101 specialized_typeexpr_specs: specialized_typeexpr_specs . "," typeexpr

    "closing bracket ]"  shift, and go to state 173
    ","                  shift, and go to state 174


state 134

   89 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   99 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 88

    $default  reduce using rule 89 (union_typeexprs)


state 135

   90 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   99 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 88

    $default  reduce using rule 90 (union_typeexprs)


state 136

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  112 structure_qualifier_stmt: "identifier" . ";"
  113                         | "identifier" . typeexpr ";"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    ";"                      shift, and go to state 175

    typeexpr                       go to state 176
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 137

  106 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 106 (structure_qualifier)


state 138

  107 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
  111 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
  112 structure_qualifier_stmt: . "identifier" ";"
  113                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 136
    "closing braces }"  shift, and go to state 177

    structure_qualifier_stmt  go to state 178


state 139

  110 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 110 (structure_qualifier_stmts)


state 140

  121 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 179


state 141

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 142

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   49 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   50             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   53 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 96
    ":"                      shift, and go to state 180

    $default  reduce using rule 28 (primary_expr)


state 143

   49 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 49 (postfix_expr)


state 144

   50 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   52 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 181
    ","                      shift, and go to state 182


state 145

   51 call_args: call_arg .

    $default  reduce using rule 51 (call_args)


state 146

   54 call_arg: expr .

    $default  reduce using rule 54 (call_arg)


state 147

   75 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 75 (var_expr)


state 148

   29 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 29 (primary_expr)


state 149

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   38 map_expr_pair: primary_expr ":" . expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 183


state 150

   34 primary_expr: "opening braces {" map_expr_pairs "closing braces }" .

    $default  reduce using rule 34 (primary_expr)


state 151

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   37 map_expr_pairs: map_expr_pairs "," . map_expr_pair
   38 map_expr_pair: . primary_expr ":" expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"

    "identifier"             shift, and go to state 184
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr   go to state 185
    map_expr_pair  go to state 186
    if_expr        go to state 65


state 152

   39 if_expr: "opening braces {" if_expr_conds "closing braces }" .

    $default  reduce using rule 39 (if_expr)


state 153

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   40        | "opening braces {" if_expr_conds "," . expr "otherwise keyword" "closing braces }"
   42 if_expr_conds: if_expr_conds "," . if_expr_cond
   43 if_expr_cond: . expr "if keyword" expr
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    if_expr_cond         go to state 187
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 188


state 154

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   43 if_expr_cond: expr "if keyword" . expr
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 189


state 155

   33 primary_expr: "opening braces {" expr_list "closing braces }" .

    $default  reduce using rule 33 (primary_expr)


state 156

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr
   81 expr_list: expr_list "," . expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 190


state 157

   32 primary_expr: "opening bracket [" expr_list "closing bracket ]" .

    $default  reduce using rule 32 (primary_expr)


state 158

   46 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   47             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   48             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 191

    $default  reduce using rule 48 (postfix_expr)


state 159

   62 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 62 (multiplicative_expr)


state 160

   62 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   64 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 113

    $default  reduce using rule 64 (additive_expr)


state 161

   64 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   66 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 114

    $default  reduce using rule 66 (relational_expr)


state 162

   66 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   68 equality_expr: equality_expr EQUALITY_OPERATOR relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 115

    $default  reduce using rule 68 (equality_expr)


state 163

   68 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   70 and_expr: and_expr AND_OPERATOR equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 116

    $default  reduce using rule 70 (and_expr)


state 164

   70 and_expr: and_expr . AND_OPERATOR equality_expr
   72 or_expr: or_expr OR_OPERATOR and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 117

    $default  reduce using rule 72 (or_expr)


state 165

   72 or_expr: or_expr . OR_OPERATOR and_expr
   74 assignment_expr: assignment_expr "assignment operator =" or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 118

    $default  reduce using rule 74 (assignment_expr)


state 166

   74 assignment_expr: assignment_expr . "assignment operator =" or_expr
   79 expr: var_expr "assignment operator =" assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 119

    $default  reduce using rule 79 (expr)


state 167

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 168

  115 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 115 (interface_qualifier)


state 169

  117 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 117 (interface_qualifier_stmts)


state 170

   95 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 95 (tuple_typeexpr_arg)


state 171

   93 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 93 (tuple_typeexpr_args)


state 172

   92 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 92 (tuple_typeexpr_args)


state 173

   99 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]" .

    $default  reduce using rule 99 (specialized_typeexpr)


state 174

   82 typeexpr: . nonunion_typeexpr
   83         | . union_typeexpr
   84 nonunion_typeexpr: . "identifier"
   85                  | . tuple_typeexpr
   86                  | . qualified_typeexpr
   87                  | . specialized_typeexpr
   88 union_typeexpr: . union_typeexprs
   89 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   90                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   91 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   96 qualified_typeexpr: . qualified_typeexpr_qualifiers
   97 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   98                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   99 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  101 specialized_typeexpr_specs: specialized_typeexpr_specs "," . typeexpr
  102 qualified_typeexpr_qualifier: . structure_qualifier
  103                             | . interface_qualifier
  104                             | . native_qualifier
  105                             | . range_qualifier
  106 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  107                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  108 structure_qualifier_decl: . "value keyword"
  109                         | . "object keyword"
  114 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  115                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  119 native_qualifier: . "native keyword" "identifier"
  120 range_qualifier: . range_qualifier_decl
  121                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  122 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 192
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 175

  112 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 112 (structure_qualifier_stmt)


state 176

  113 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 193


state 177

  107 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 107 (structure_qualifier)


state 178

  111 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 111 (structure_qualifier_stmts)


state 179

  121 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 194


state 180

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   53 call_arg: "identifier" ":" . expr
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 195


state 181

   50 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 50 (postfix_expr)


state 182

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   52 call_args: call_args "," . call_arg
   53 call_arg: . "identifier" ":" expr
   54         | . expr
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 142
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    call_arg             go to state 196
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 146


state 183

   38 map_expr_pair: primary_expr ":" expr .

    $default  reduce using rule 38 (map_expr_pair)


state 184

   28 primary_expr: "identifier" .

    $default  reduce using rule 28 (primary_expr)


state 185

   38 map_expr_pair: primary_expr . ":" expr

    ":"  shift, and go to state 149


state 186

   37 map_expr_pairs: map_expr_pairs "," map_expr_pair .

    $default  reduce using rule 37 (map_expr_pairs)


state 187

   42 if_expr_conds: if_expr_conds "," if_expr_cond .

    $default  reduce using rule 42 (if_expr_conds)


state 188

   40 if_expr: "opening braces {" if_expr_conds "," expr . "otherwise keyword" "closing braces }"
   43 if_expr_cond: expr . "if keyword" expr

    "if keyword"         shift, and go to state 154
    "otherwise keyword"  shift, and go to state 197


state 189

   43 if_expr_cond: expr "if keyword" expr .

    $default  reduce using rule 43 (if_expr_cond)


state 190

   81 expr_list: expr_list "," expr .

    $default  reduce using rule 81 (expr_list)


state 191

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   35             | . if_expr
   39 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   40        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   44 postfix_expr: . primary_expr
   45             | . postfix_expr OPERATOR
   46             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   46             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   47             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   47             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   48             | . postfix_expr "." "identifier"
   49             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   50             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   51 call_args: . call_arg
   52          | . call_args "," call_arg
   53 call_arg: . "identifier" ":" expr
   54         | . expr
   55 prefix_expr: . postfix_expr
   56            | . any_operator prefix_expr
   57 any_operator: . MULTIPLICATIVE_OPERATOR
   58             | . ADDITIVE_OPERATOR
   59             | . RELATIONAL_OPERATOR
   60             | . OPERATOR
   61 multiplicative_expr: . prefix_expr
   62                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   63 additive_expr: . multiplicative_expr
   64              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   65 relational_expr: . additive_expr
   66                | . relational_expr RELATIONAL_OPERATOR additive_expr
   67 equality_expr: . relational_expr
   68              | . equality_expr EQUALITY_OPERATOR relational_expr
   69 and_expr: . equality_expr
   70         | . and_expr AND_OPERATOR equality_expr
   71 or_expr: . and_expr
   72        | . or_expr OR_OPERATOR and_expr
   73 assignment_expr: . or_expr
   74                | . assignment_expr "assignment operator =" or_expr
   75 var_expr: . "var keyword" "identifier" typeexpr
   76         | . "var keyword" "identifier"
   77 expr: . assignment_expr
   78     | . var_expr
   79     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 142
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 58
    "closing paranthesis )"  shift, and go to state 198
    "opening braces {"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 61

    primary_expr         go to state 64
    if_expr              go to state 65
    postfix_expr         go to state 66
    call_args            go to state 199
    call_arg             go to state 145
    prefix_expr          go to state 67
    any_operator         go to state 68
    multiplicative_expr  go to state 69
    additive_expr        go to state 70
    relational_expr      go to state 71
    equality_expr        go to state 72
    and_expr             go to state 73
    or_expr              go to state 74
    assignment_expr      go to state 75
    var_expr             go to state 76
    expr                 go to state 146


state 192

  101 specialized_typeexpr_specs: specialized_typeexpr_specs "," typeexpr .

    $default  reduce using rule 101 (specialized_typeexpr_specs)


state 193

  113 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 113 (structure_qualifier_stmt)


state 194

  121 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 200


state 195

   53 call_arg: "identifier" ":" expr .

    $default  reduce using rule 53 (call_arg)


state 196

   52 call_args: call_args "," call_arg .

    $default  reduce using rule 52 (call_args)


state 197

   40 if_expr: "opening braces {" if_expr_conds "," expr "otherwise keyword" . "closing braces }"

    "closing braces }"  shift, and go to state 201


state 198

   46 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 46 (postfix_expr)


state 199

   47 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   52 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 202
    ","                      shift, and go to state 182


state 200

  121 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 121 (range_qualifier)


state 201

   40 if_expr: "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }" .

    $default  reduce using rule 40 (if_expr)


state 202

   47 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 47 (postfix_expr)
