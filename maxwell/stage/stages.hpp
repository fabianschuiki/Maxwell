/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "Stage.hpp"

namespace stage {

using ast::NodePtr;
using ast::NodeVector;
using ast::Repository;

class BuildGraph : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "BuildGraph"; }
	int getId() const { return 1; }
	BuildGraph(Repository& r) : Stage(r) {}

	/* Copyright (c) 2013 Fabian Schuiki */
	NodePtr process(const NodePtr& node, const NodePtr& carry);

};

class BindIdentifiers : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "BindIdentifiers"; }
	int getId() const { return 2; }
	BindIdentifiers(Repository& r) : Stage(r) {}
};

class BindNamedTypes : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "BindNamedTypes"; }
	int getId() const { return 3; }
	BindNamedTypes(Repository& r) : Stage(r) {}
};

class EvalTypeExprs : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "EvalTypeExprs"; }
	int getId() const { return 4; }
	EvalTypeExprs(Repository& r) : Stage(r) {}
};

class InitRootTypes : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "InitRootTypes"; }
	int getId() const { return 5; }
	InitRootTypes(Repository& r) : Stage(r) {}

	/* Copyright (c) 2013 Fabian Schuiki */
	void wrapFuncArgs(NodeVector& args, const NodeVector& funcArgs);

};

class GenImplicitAccessors : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "GenImplicitAccessors"; }
	int getId() const { return 6; }
	GenImplicitAccessors(Repository& r) : Stage(r) {}

	/* Copyright (c) 2013 Fabian Schuiki */
	void processChildren(const NodePtr& node);
	void gatherImplAccessors(const NodePtr& node, NodeVector& into);

};

class ConfigureCalls : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "ConfigureCalls"; }
	int getId() const { return 7; }
	ConfigureCalls(Repository& r) : Stage(r) {}
};

class FindCallCandidates : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "FindCallCandidates"; }
	int getId() const { return 8; }
	FindCallCandidates(Repository& r) : Stage(r) {}
};

class CalcPossibleTypes : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "CalcPossibleTypes"; }
	int getId() const { return 9; }
	CalcPossibleTypes(Repository& r) : Stage(r) {}

	/* Copyright (c) 2013 Fabian Schuiki */
	void processChildren(const NodePtr& node);

};

class CalcRequiredTypes : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "CalcRequiredTypes"; }
	int getId() const { return 10; }
	CalcRequiredTypes(Repository& r) : Stage(r) {}
};

class CalcActualTypes : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "CalcActualTypes"; }
	int getId() const { return 11; }
	CalcActualTypes(Repository& r) : Stage(r) {}

	/* Copyright (c) 2013 Fabian Schuiki */
	NodePtr match(const NodePtr& possible, const NodePtr& required, const NodePtr& node);

};

class NarrowCallCandidates : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "NarrowCallCandidates"; }
	int getId() const { return 12; }
	NarrowCallCandidates(Repository& r) : Stage(r) {}
};

class SelectCallCandidate : public Stage
{
protected:
	virtual void process(const NodePtr& node);
public:
	string getName() const { return "SelectCallCandidate"; }
	int getId() const { return 13; }
	SelectCallCandidate(Repository& r) : Stage(r) {}
};

} // namespace stage
