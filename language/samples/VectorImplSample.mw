/* Copyright (c) 2013 Fabian Schuiki */

/* This file implements a vector array and all associated files in the Maxwell
 * programming language. */

type VectorArray object {
	T Type; // type of the vector's elements
	data Memory[T]; // fixed-size array holding the elements
	size Int; // number of elements currently in the vector
}

/// Constructor taking no arguments, which creates a vector of capacity 2.
func make = make(capacity: 2);

/// Constructor taking an arbitrary size as argument.
func make (capacity Int) -> (a VectorArray)
{
	a = new VectorArray; // does not call the constructor since we're inside one
	a.size = 0;
	a.data = new Memory[a.T] (size: capacity);
}

/// Constructor taking a literal array as argument.
func make (c ConstArray[a.T]) -> (a VectorArray)
{
	a = new VectorArray[a.T] (capacity: c.length);
	for (var i = 0; i < c.length; i++) {
		a.data[i] = c[i];
	}
}

func [] (a VectorArray, index Int) -> (e a.T)
{
	e = a.data[index];
}
func [] (a VectorArray, index Int, v a.T) -> (b VectorArray)
{
	a.data[index] = v;
	b = a;
}

func add (a VectorArray, v a.T)
{
	if (a.size + 1 > a.data.size)
		a.grow();
	a.data[a.size] = v;
	a.size += 1;
}

func resize (a VectorArray, capacity Int)
{
	var d = a.data;
	a.data = new Memory[a.T] (size: capacity);
	var l = {d.size if d.size < a.size, a.size otherwise};
	for (var i = 0; i < l; i++) {
		a.data[i] = d[i];
	}
}
func grow (a VectorArray) = resize(a, a.data.size * 2);
func clear (a VectorArray) { a.size = 0; }

func begin (a VectorArray) -> (i VectorArrayIterator)
{
	i.a = a;
	i.i = 0;
}

// Iterator
type VectorArrayIterator value {
	a VectorArray;
	i Int;
}

func next (i * VectorArrayIterator) { i.i += 1; }
func get (i VectorArrayIterator) = { i.a.data[i.i]; }
func end (i VectorArrayIterator) = { i.i >= i.a.size; }

// Sample program
func main
{
	var a = new VectorArray ([0,1,2]);
	a.add(3);

	for (var i = a.begin(); !i.end(); i.next()) {
		var b = i.get();
	}
}
