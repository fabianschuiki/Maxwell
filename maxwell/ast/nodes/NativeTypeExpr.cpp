/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/NativeTypeExpr.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::NativeTypeExpr;
using ast::NodePtr;
using ast::NodeVector;

NativeTypeExpr::NativeTypeExpr() : Node(),
	interfaceGraph(this),
	interfaceTypeExpr(this) {}

bool NativeTypeExpr::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kNativeTypeExpr;
}

bool NativeTypeExpr::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kGraphInterface) return true;
	if (i == kTypeExprInterface) return true;
	return false;
}

NodePtr NativeTypeExpr::copy() {
	Ptr c (new NativeTypeExpr);
	Node::copy(this->graphPrev, c->graphPrev);
	Node::copy(this->evaluatedType, c->evaluatedType);
	Node::copy(this->segments, c->segments);
	return c;
}

bool NativeTypeExpr::equalTo(const NodePtr& o) {
	const shared_ptr<NativeTypeExpr>& other = boost::dynamic_pointer_cast<NativeTypeExpr>(o);
	if (!other) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	if (!equal(this->evaluatedType, other->evaluatedType)) return false;
	if (!equal(this->segments, other->segments)) return false;
	return true;
}

std::string NativeTypeExpr::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "NativeTypeExpr{â€¦}";
	str << "NativeTypeExpr{";
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	if (this->evaluatedType) b << "\n  \033[1mevaluatedType\033[0m = " << indent(this->evaluatedType->describe(depth-1));
	if (!this->segments.empty()) b << "\n  \033[1msegments\033[0m = " << indent(describeVector(this->segments, depth-1));
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void NativeTypeExpr::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void NativeTypeExpr::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& NativeTypeExpr::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void NativeTypeExpr::setEvaluatedType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType) && !v->isKindOf(kMutableType) && !v->isKindOf(kMutableCastType) && !v->isKindOf(kImmutableCastType)) {
		throw std::runtime_error("'evaluatedType' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType, MutableType, MutableCastType, ImmutableCastType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, evaluatedType)) {
		modify("evaluatedType");
		evaluatedType = v;
	}
}

const NodePtr& NativeTypeExpr::getEvaluatedType(bool required) {
	const NodePtr& v = evaluatedType;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have evaluatedType set to a non-null value.");
	}
	return v;
}


void NativeTypeExpr::setSegments(const std::vector<std::string>& v) {
	if (!equal(v, segments)) {
		modify("segments");
		segments = v;
	}
}

const std::vector<std::string>& NativeTypeExpr::getSegments(bool required) {
	const std::vector<std::string>& v = segments;
	return v;
}


void NativeTypeExpr::encode(Encoder& e) {
	e.encode(this->graphPrev);
	e.encode(this->evaluatedType);
	e.encode(this->segments);
}

void NativeTypeExpr::decode(Decoder& d) {
	d.decode(this->graphPrev);
	d.decode(this->evaluatedType);
	d.decode(this->segments);
}


void NativeTypeExpr::updateHierarchyOfChildren() {
	if (this->evaluatedType) this->evaluatedType->updateHierarchy(id + "evaluatedType", repository, this);
}

const NodePtr& NativeTypeExpr::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// evaluatedType.*
		if (size >= 13 && path[0] == 'e' && path[1] == 'v' && path[2] == 'a' && path[3] == 'l' && path[4] == 'u' && path[5] == 'a' && path[6] == 't' && path[7] == 'e' && path[8] == 'd' && path[9] == 'T' && path[10] == 'y' && path[11] == 'p' && path[12] == 'e') {
			// evaluatedType
			if (size == 13) {
				return getEvaluatedType();
			} else if (path[13] == '.') {
				return getEvaluatedType()->resolvePath(path.substr(14));
			}
		}
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector NativeTypeExpr::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getEvaluatedType(false)) v.push_back(n);
	return v;
}

