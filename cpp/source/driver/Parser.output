Terminals which are not used

   "real number constant"
   "integer number constant"
   "string constant"
   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: "func keyword" "identifier" body
    7          | "func keyword" "identifier" func_arg_tuple body
    8          | "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )"
   11               | func_arg
   12               | "opening paranthesis (" func_args "closing paranthesis )"

   13 func_args: func_arg
   14          | func_args "," func_arg

   15 func_arg: "identifier"
   16         | "identifier" type_expr

   17 type_decl: "type keyword" "identifier"

   18 type_expr: union_type_expr
   19          | nonunion_type_expr

   20 nonunion_type_expr: "identifier"

   21 union_type_expr: union_type_exprs

   22 union_type_exprs: nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | union_type_exprs "vertical pipe |" nonunion_type_expr

   24 body: "opening braces {" "closing braces }"
   25     | "opening braces {" stmts "closing braces }"

   26 stmts: stmt
   27      | stmts stmt

   28 stmt: expr ";"

   29 primary_expr: "identifier"
   30             | "opening paranthesis (" expr "closing paranthesis )"

   31 postfix_expr: primary_expr
   32             | postfix_expr OPERATOR
   33             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." "identifier"
   36             | "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   38 call_args: call_arg
   39          | call_args "," call_arg

   40 call_arg: "identifier" ":" expr
   41         | expr

   42 prefix_expr: postfix_expr
   43            | prefix_op prefix_expr

   44 prefix_op: MULTIPLICATIVE_OPERATOR
   45          | ADDITIVE_OPERATOR
   46          | RELATIONAL_OPERATOR
   47          | OPERATOR

   48 multiplicative_expr: prefix_expr
   49                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   50 additive_expr: multiplicative_expr
   51              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   52 relational_expr: additive_expr
   53                | relational_expr RELATIONAL_OPERATOR additive_expr

   54 expr: relational_expr
   55     | var_expr
   56     | var_expr "assignment operator =" relational_expr

   57 var_expr: "var keyword" "identifier" type_expr
   58         | "var keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 6 7 8 9 15 16 17 20 29 33 34 35 36 37 40 57 58
"real number constant" (259)
"integer number constant" (260)
"string constant" (261)
MULTIPLICATIVE_OPERATOR (262) 44 49
ADDITIVE_OPERATOR (263) 45 51
RELATIONAL_OPERATOR (264) 46 53
OPERATOR (265) 32 47
"symbol" (266)
"func keyword" (267) 6 7 8 9
"var keyword" (268) 57 58
"type keyword" (269) 17
"opening paranthesis (" (270) 10 12 30 33 34 36 37
"closing paranthesis )" (271) 10 12 30 33 34 36 37
"opening braces {" (272) 24 25
"closing braces }" (273) 24 25
"opening bracket [" (274)
"closing bracket ]" (275)
"vertical pipe |" (276) 22 23
"." (277) 33 34 35
"," (278) 14 39
":" (279) 40
";" (280) 28
"right arrow ->" (281) 8 9
"assignment operator =" (282) 56


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
root (29)
    on left: 1, on right: 0
root_stmts (30)
    on left: 2 3, on right: 1 2
root_stmt (31)
    on left: 4 5, on right: 2 3
func_decl (32)
    on left: 6 7 8 9, on right: 4
func_arg_tuple (33)
    on left: 10 11 12, on right: 7 8 9
func_args (34)
    on left: 13 14, on right: 12 14
func_arg (35)
    on left: 15 16, on right: 11 13 14
type_decl (36)
    on left: 17, on right: 5
type_expr (37)
    on left: 18 19, on right: 16 57
nonunion_type_expr (38)
    on left: 20, on right: 19 22 23
union_type_expr (39)
    on left: 21, on right: 18
union_type_exprs (40)
    on left: 22 23, on right: 21 23
body (41)
    on left: 24 25, on right: 6 7 8 9
stmts (42)
    on left: 26 27, on right: 25 27
stmt (43)
    on left: 28, on right: 26 27
primary_expr (44)
    on left: 29 30, on right: 31
postfix_expr (45)
    on left: 31 32 33 34 35 36 37, on right: 32 33 34 35 42
call_args (46)
    on left: 38 39, on right: 34 37 39
call_arg (47)
    on left: 40 41, on right: 38 39
prefix_expr (48)
    on left: 42 43, on right: 43 48 49
prefix_op (49)
    on left: 44 45 46 47, on right: 43
multiplicative_expr (50)
    on left: 48 49, on right: 49 50 51
additive_expr (51)
    on left: 50 51, on right: 51 52 53
relational_expr (52)
    on left: 52 53, on right: 53 54 56
expr (53)
    on left: 54 55 56, on right: 28 30 40 41
var_expr (54)
    on left: 57 58, on right: 55 56


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root        go to state 3
    root_stmts  go to state 4
    root_stmt   go to state 5
    func_decl   go to state 6
    type_decl   go to state 7


state 1

    6 func_decl: "func keyword" . "identifier" body
    7          | "func keyword" . "identifier" func_arg_tuple body
    8          | "func keyword" . "identifier" "right arrow ->" func_arg_tuple body
    9          | "func keyword" . "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body

    "identifier"  shift, and go to state 8


state 2

   17 type_decl: "type keyword" . "identifier"

    "identifier"  shift, and go to state 9


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 10


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . "func keyword" "identifier" body
    7          | . "func keyword" "identifier" func_arg_tuple body
    8          | . "func keyword" "identifier" "right arrow ->" func_arg_tuple body
    9          | . "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body
   17 type_decl: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt  go to state 11
    func_decl  go to state 6
    type_decl  go to state 7


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 8

    6 func_decl: "func keyword" "identifier" . body
    7          | "func keyword" "identifier" . func_arg_tuple body
    8          | "func keyword" "identifier" . "right arrow ->" func_arg_tuple body
    9          | "func keyword" "identifier" . func_arg_tuple "right arrow ->" func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13
    "opening braces {"       shift, and go to state 14
    "right arrow ->"         shift, and go to state 15

    func_arg_tuple  go to state 16
    func_arg        go to state 17
    body            go to state 18


state 9

   17 type_decl: "type keyword" "identifier" .

    $default  reduce using rule 17 (type_decl)


state 10

    0 $accept: root "end of input" .

    $default  accept


state 11

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 12

   15 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   16         | "identifier" . type_expr
   18 type_expr: . union_type_expr
   19          | . nonunion_type_expr
   20 nonunion_type_expr: . "identifier"
   21 union_type_expr: . union_type_exprs
   22 union_type_exprs: . nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | . union_type_exprs "vertical pipe |" nonunion_type_expr

    "identifier"  shift, and go to state 19

    $default  reduce using rule 15 (func_arg)

    type_expr           go to state 20
    nonunion_type_expr  go to state 21
    union_type_expr     go to state 22
    union_type_exprs    go to state 23


state 13

   10 func_arg_tuple: "opening paranthesis (" . "closing paranthesis )"
   12               | "opening paranthesis (" . func_args "closing paranthesis )"
   13 func_args: . func_arg
   14          | . func_args "," func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "closing paranthesis )"  shift, and go to state 24

    func_args  go to state 25
    func_arg   go to state 26


state 14

   24 body: "opening braces {" . "closing braces }"
   25     | "opening braces {" . stmts "closing braces }"
   26 stmts: . stmt
   27      | . stmts stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    "closing braces }"       shift, and go to state 34

    stmts                go to state 35
    stmt                 go to state 36
    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 44
    var_expr             go to state 45


state 15

    8 func_decl: "func keyword" "identifier" "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 46
    func_arg        go to state 17


state 16

    7 func_decl: "func keyword" "identifier" func_arg_tuple . body
    9          | "func keyword" "identifier" func_arg_tuple . "right arrow ->" func_arg_tuple body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14
    "right arrow ->"    shift, and go to state 47

    body  go to state 48


state 17

   11 func_arg_tuple: func_arg .

    $default  reduce using rule 11 (func_arg_tuple)


state 18

    6 func_decl: "func keyword" "identifier" body .

    $default  reduce using rule 6 (func_decl)


state 19

   20 nonunion_type_expr: "identifier" .

    $default  reduce using rule 20 (nonunion_type_expr)


state 20

   16 func_arg: "identifier" type_expr .

    $default  reduce using rule 16 (func_arg)


state 21

   19 type_expr: nonunion_type_expr .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   22 union_type_exprs: nonunion_type_expr . "vertical pipe |" nonunion_type_expr

    "vertical pipe |"  shift, and go to state 49

    $default  reduce using rule 19 (type_expr)


state 22

   18 type_expr: union_type_expr .

    $default  reduce using rule 18 (type_expr)


state 23

   21 union_type_expr: union_type_exprs .  ["closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   23 union_type_exprs: union_type_exprs . "vertical pipe |" nonunion_type_expr

    "vertical pipe |"  shift, and go to state 50

    $default  reduce using rule 21 (union_type_expr)


state 24

   10 func_arg_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 10 (func_arg_tuple)


state 25

   12 func_arg_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   14 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 51
    ","                      shift, and go to state 52


state 26

   13 func_args: func_arg .

    $default  reduce using rule 13 (func_args)


state 27

   29 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]
   36 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 53

    $default  reduce using rule 29 (primary_expr)


state 28

   44 prefix_op: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 44 (prefix_op)


state 29

   45 prefix_op: ADDITIVE_OPERATOR .

    $default  reduce using rule 45 (prefix_op)


state 30

   46 prefix_op: RELATIONAL_OPERATOR .

    $default  reduce using rule 46 (prefix_op)


state 31

   47 prefix_op: OPERATOR .

    $default  reduce using rule 47 (prefix_op)


state 32

   57 var_expr: "var keyword" . "identifier" type_expr
   58         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 54


state 33

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | "opening paranthesis (" . expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 55
    var_expr             go to state 45


state 34

   24 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 24 (body)


state 35

   25 body: "opening braces {" stmts . "closing braces }"
   27 stmts: stmts . stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    "closing braces }"       shift, and go to state 56

    stmt                 go to state 57
    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 44
    var_expr             go to state 45


state 36

   26 stmts: stmt .

    $default  reduce using rule 26 (stmts)


state 37

   31 postfix_expr: primary_expr .

    $default  reduce using rule 31 (postfix_expr)


state 38

   32 postfix_expr: postfix_expr . OPERATOR
   33             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr . "." "identifier"
   42 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    OPERATOR  shift, and go to state 58
    "."       shift, and go to state 59

    $default  reduce using rule 42 (prefix_expr)


state 39

   48 multiplicative_expr: prefix_expr .

    $default  reduce using rule 48 (multiplicative_expr)


state 40

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   43            | prefix_op . prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "opening paranthesis ("  shift, and go to state 33

    primary_expr  go to state 37
    postfix_expr  go to state 38
    prefix_expr   go to state 60
    prefix_op     go to state 40


state 41

   49 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 61

    $default  reduce using rule 50 (additive_expr)


state 42

   51 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 62

    $default  reduce using rule 52 (relational_expr)


state 43

   53 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   54 expr: relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 63

    $default  reduce using rule 54 (expr)


state 44

   28 stmt: expr . ";"

    ";"  shift, and go to state 64


state 45

   55 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   56     | var_expr . "assignment operator =" relational_expr

    "assignment operator ="  shift, and go to state 65

    $default  reduce using rule 55 (expr)


state 46

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 66


state 47

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" . func_arg_tuple body
   10 func_arg_tuple: . "opening paranthesis (" "closing paranthesis )"
   11               | . func_arg
   12               | . "opening paranthesis (" func_args "closing paranthesis )"
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"             shift, and go to state 12
    "opening paranthesis ("  shift, and go to state 13

    func_arg_tuple  go to state 67
    func_arg        go to state 17


state 48

    7 func_decl: "func keyword" "identifier" func_arg_tuple body .

    $default  reduce using rule 7 (func_decl)


state 49

   20 nonunion_type_expr: . "identifier"
   22 union_type_exprs: nonunion_type_expr "vertical pipe |" . nonunion_type_expr

    "identifier"  shift, and go to state 19

    nonunion_type_expr  go to state 68


state 50

   20 nonunion_type_expr: . "identifier"
   23 union_type_exprs: union_type_exprs "vertical pipe |" . nonunion_type_expr

    "identifier"  shift, and go to state 19

    nonunion_type_expr  go to state 69


state 51

   12 func_arg_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 12 (func_arg_tuple)


state 52

   14 func_args: func_args "," . func_arg
   15 func_arg: . "identifier"
   16         | . "identifier" type_expr

    "identifier"  shift, and go to state 12

    func_arg  go to state 70


state 53

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   37             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   38 call_args: . call_arg
   39          | . call_args "," call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 71
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    "closing paranthesis )"  shift, and go to state 72

    primary_expr         go to state 37
    postfix_expr         go to state 38
    call_args            go to state 73
    call_arg             go to state 74
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 75
    var_expr             go to state 45


state 54

   18 type_expr: . union_type_expr
   19          | . nonunion_type_expr
   20 nonunion_type_expr: . "identifier"
   21 union_type_expr: . union_type_exprs
   22 union_type_exprs: . nonunion_type_expr "vertical pipe |" nonunion_type_expr
   23                 | . union_type_exprs "vertical pipe |" nonunion_type_expr
   57 var_expr: "var keyword" "identifier" . type_expr
   58         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    "identifier"  shift, and go to state 19

    $default  reduce using rule 58 (var_expr)

    type_expr           go to state 76
    nonunion_type_expr  go to state 21
    union_type_expr     go to state 22
    union_type_exprs    go to state 23


state 55

   30 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 77


state 56

   25 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 25 (body)


state 57

   27 stmts: stmts stmt .

    $default  reduce using rule 27 (stmts)


state 58

   32 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 32 (postfix_expr)


state 59

   33 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 78


state 60

   43 prefix_expr: prefix_op prefix_expr .

    $default  reduce using rule 43 (prefix_expr)


state 61

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   49 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "opening paranthesis ("  shift, and go to state 33

    primary_expr  go to state 37
    postfix_expr  go to state 38
    prefix_expr   go to state 79
    prefix_op     go to state 40


state 62

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 80


state 63

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 81


state 64

   28 stmt: expr ";" .

    $default  reduce using rule 28 (stmt)


state 65

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   56 expr: var_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 82


state 66

    8 func_decl: "func keyword" "identifier" "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 8 (func_decl)


state 67

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 14

    body  go to state 83


state 68

   22 union_type_exprs: nonunion_type_expr "vertical pipe |" nonunion_type_expr .

    $default  reduce using rule 22 (union_type_exprs)


state 69

   23 union_type_exprs: union_type_exprs "vertical pipe |" nonunion_type_expr .

    $default  reduce using rule 23 (union_type_exprs)


state 70

   14 func_args: func_args "," func_arg .

    $default  reduce using rule 14 (func_args)


state 71

   29 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ","]
   36 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   40 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 53
    ":"                      shift, and go to state 84

    $default  reduce using rule 29 (primary_expr)


state 72

   36 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 36 (postfix_expr)


state 73

   37 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   39 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 85
    ","                      shift, and go to state 86


state 74

   38 call_args: call_arg .

    $default  reduce using rule 38 (call_args)


state 75

   41 call_arg: expr .

    $default  reduce using rule 41 (call_arg)


state 76

   57 var_expr: "var keyword" "identifier" type_expr .

    $default  reduce using rule 57 (var_expr)


state 77

   30 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 30 (primary_expr)


state 78

   33 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";"]

    "opening paranthesis ("  shift, and go to state 87

    $default  reduce using rule 35 (postfix_expr)


state 79

   49 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 49 (multiplicative_expr)


state 80

   49 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 61

    $default  reduce using rule 51 (additive_expr)


state 81

   51 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";"]

    ADDITIVE_OPERATOR  shift, and go to state 62

    $default  reduce using rule 53 (relational_expr)


state 82

   53 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   56 expr: var_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";"]

    RELATIONAL_OPERATOR  shift, and go to state 63

    $default  reduce using rule 56 (expr)


state 83

    9 func_decl: "func keyword" "identifier" func_arg_tuple "right arrow ->" func_arg_tuple body .

    $default  reduce using rule 9 (func_decl)


state 84

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   40 call_arg: "identifier" ":" . expr
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 27
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 88
    var_expr             go to state 45


state 85

   37 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 37 (postfix_expr)


state 86

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 call_args: call_args "," . call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 71
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    primary_expr         go to state 37
    postfix_expr         go to state 38
    call_arg             go to state 89
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 75
    var_expr             go to state 45


state 87

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   38 call_args: . call_arg
   39          | . call_args "," call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . prefix_op prefix_expr
   44 prefix_op: . MULTIPLICATIVE_OPERATOR
   45          | . ADDITIVE_OPERATOR
   46          | . RELATIONAL_OPERATOR
   47          | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 expr: . relational_expr
   55     | . var_expr
   56     | . var_expr "assignment operator =" relational_expr
   57 var_expr: . "var keyword" "identifier" type_expr
   58         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 71
    MULTIPLICATIVE_OPERATOR  shift, and go to state 28
    ADDITIVE_OPERATOR        shift, and go to state 29
    RELATIONAL_OPERATOR      shift, and go to state 30
    OPERATOR                 shift, and go to state 31
    "var keyword"            shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    "closing paranthesis )"  shift, and go to state 90

    primary_expr         go to state 37
    postfix_expr         go to state 38
    call_args            go to state 91
    call_arg             go to state 74
    prefix_expr          go to state 39
    prefix_op            go to state 40
    multiplicative_expr  go to state 41
    additive_expr        go to state 42
    relational_expr      go to state 43
    expr                 go to state 75
    var_expr             go to state 45


state 88

   40 call_arg: "identifier" ":" expr .

    $default  reduce using rule 40 (call_arg)


state 89

   39 call_args: call_args "," call_arg .

    $default  reduce using rule 39 (call_args)


state 90

   33 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 33 (postfix_expr)


state 91

   34 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   39 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 92
    ","                      shift, and go to state 86


state 92

   34 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 34 (postfix_expr)
