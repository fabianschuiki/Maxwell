/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include <string>
#include <map>
#include <vector>
#include "BuildGraph.hpp"

namespace stage {

using std::string;
using std::map;
using std::vector;

class StageManager
{
public:
	StageManager(const shared_ptr<Repository>& r) : repository(r),
		stageBuildGraph(r)
	{
		stageIndices["BuildGraph"] = stages.size();
		stages.push_back(&stageBuildGraph);
	}

	Stage& operator[](int index)
	{
		if (index < 0 || index >= stage.size()) {
			throw std::runtime_error("Stage index out of bounds.");
		}
		return stages[index];
	}

	Stage& operator[](string name)
	{
		map<string, int>::iterator it = stageIndices.find(name);
		if (it == stageIndices.end()) {
			throw std::runtime_error("Stage named '" + name + "' does not exist.");
		}
		return stages[it->second];
	}

protected:
	vector<Stage*> stages;
	map<string, int> stageIndices;
	BuildGraph stageBuildGraph;
};

} // namespace stage
