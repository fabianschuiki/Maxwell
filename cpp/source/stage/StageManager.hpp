/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "stages.hpp"
#include <string>
#include <map>
#include <vector>

namespace stage {

using std::string;
using std::map;
using std::vector;

class StageManager
{
public:
	Repository& repository;

	StageManager(Repository& r) : repository(r),
		stageBuildGraph(r),
		stageBindIdentifiers(r),
		stageBindNamedTypes(r),
		stageConfigureCalls(r),
		stageCalcPossibleTypes(r)
	{
		stageIndices["BuildGraph"] = stages.size();
		stages.push_back(&stageBuildGraph);
		stageIndices["BindIdentifiers"] = stages.size();
		stages.push_back(&stageBindIdentifiers);
		stageIndices["BindNamedTypes"] = stages.size();
		stages.push_back(&stageBindNamedTypes);
		stageIndices["ConfigureCalls"] = stages.size();
		stages.push_back(&stageConfigureCalls);
		stageIndices["CalcPossibleTypes"] = stages.size();
		stages.push_back(&stageCalcPossibleTypes);
	}

	typedef vector<Stage*> Stages;
	typedef map<string, int> StageIndices;
	Stages stages;
	StageIndices stageIndices;

protected:
	BuildGraph stageBuildGraph;
	BindIdentifiers stageBindIdentifiers;
	BindNamedTypes stageBindNamedTypes;
	ConfigureCalls stageConfigureCalls;
	CalcPossibleTypes stageCalcPossibleTypes;
};

} // namespace stage
