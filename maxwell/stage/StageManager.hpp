/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "stages.hpp"
#include <string>
#include <map>
#include <vector>

namespace stage {

using std::string;
using std::map;
using std::vector;

class StageManager
{
public:
	Repository& repository;

	StageManager(Repository& r) : repository(r),
		stageBuildGraph(r),
		stageBindIdentifiers(r),
		stageBindNamedTypes(r),
		stageEvalTypeExprs(r),
		stageInitRootTypes(r),
		stageGenImplicitAccessors(r),
		stageConfigureCalls(r),
		stageFindCallCandidates(r),
		stageCalcPossibleTypes(r),
		stageCalcRequiredTypes(r),
		stageCalcActualTypes(r),
		stageNarrowCallCandidates(r),
		stageSelectCallCandidate(r)
	{
		stageIndices["BuildGraph"] = stages.size();
		stagesByName["BuildGraph"] = &stageBuildGraph;
		stages.push_back(&stageBuildGraph);
		stageIndices["BindIdentifiers"] = stages.size();
		stagesByName["BindIdentifiers"] = &stageBindIdentifiers;
		stages.push_back(&stageBindIdentifiers);
		stageIndices["BindNamedTypes"] = stages.size();
		stagesByName["BindNamedTypes"] = &stageBindNamedTypes;
		stages.push_back(&stageBindNamedTypes);
		stageIndices["EvalTypeExprs"] = stages.size();
		stagesByName["EvalTypeExprs"] = &stageEvalTypeExprs;
		stages.push_back(&stageEvalTypeExprs);
		stageIndices["InitRootTypes"] = stages.size();
		stagesByName["InitRootTypes"] = &stageInitRootTypes;
		stages.push_back(&stageInitRootTypes);
		stageIndices["GenImplicitAccessors"] = stages.size();
		stagesByName["GenImplicitAccessors"] = &stageGenImplicitAccessors;
		stages.push_back(&stageGenImplicitAccessors);
		stageIndices["ConfigureCalls"] = stages.size();
		stagesByName["ConfigureCalls"] = &stageConfigureCalls;
		stages.push_back(&stageConfigureCalls);
		stageIndices["FindCallCandidates"] = stages.size();
		stagesByName["FindCallCandidates"] = &stageFindCallCandidates;
		stages.push_back(&stageFindCallCandidates);
		stageIndices["CalcPossibleTypes"] = stages.size();
		stagesByName["CalcPossibleTypes"] = &stageCalcPossibleTypes;
		stages.push_back(&stageCalcPossibleTypes);
		stageIndices["CalcRequiredTypes"] = stages.size();
		stagesByName["CalcRequiredTypes"] = &stageCalcRequiredTypes;
		stages.push_back(&stageCalcRequiredTypes);
		stageIndices["CalcActualTypes"] = stages.size();
		stagesByName["CalcActualTypes"] = &stageCalcActualTypes;
		stages.push_back(&stageCalcActualTypes);
		stageIndices["NarrowCallCandidates"] = stages.size();
		stagesByName["NarrowCallCandidates"] = &stageNarrowCallCandidates;
		stages.push_back(&stageNarrowCallCandidates);
		stageIndices["SelectCallCandidate"] = stages.size();
		stagesByName["SelectCallCandidate"] = &stageSelectCallCandidate;
		stages.push_back(&stageSelectCallCandidate);
	}

	typedef vector<Stage*> Stages;
	typedef map<string, int> StageIndices;
	typedef map<string, Stage*> StagesByName;
	Stages stages;
	StageIndices stageIndices;
	StagesByName stagesByName;

	static int getIdOfStage(const string& name)
	{
		if (name == "BuildGraph") return 1;
		if (name == "BindIdentifiers") return 2;
		if (name == "BindNamedTypes") return 3;
		if (name == "EvalTypeExprs") return 4;
		if (name == "InitRootTypes") return 5;
		if (name == "GenImplicitAccessors") return 6;
		if (name == "ConfigureCalls") return 7;
		if (name == "FindCallCandidates") return 8;
		if (name == "CalcPossibleTypes") return 9;
		if (name == "CalcRequiredTypes") return 10;
		if (name == "CalcActualTypes") return 11;
		if (name == "NarrowCallCandidates") return 12;
		if (name == "SelectCallCandidate") return 13;
		throw std::runtime_error("Stage " + name + " does not exist.");
	}
protected:
	BuildGraph stageBuildGraph;
	BindIdentifiers stageBindIdentifiers;
	BindNamedTypes stageBindNamedTypes;
	EvalTypeExprs stageEvalTypeExprs;
	InitRootTypes stageInitRootTypes;
	GenImplicitAccessors stageGenImplicitAccessors;
	ConfigureCalls stageConfigureCalls;
	FindCallCandidates stageFindCallCandidates;
	CalcPossibleTypes stageCalcPossibleTypes;
	CalcRequiredTypes stageCalcRequiredTypes;
	CalcActualTypes stageCalcActualTypes;
	NarrowCallCandidates stageNarrowCallCandidates;
	SelectCallCandidate stageSelectCallCandidate;
};

} // namespace stage
