/* Copyright (c) 2015 Fabian Schuiki */

/// \file
/// This file declares all standard C functions that may be used from a Maxwell
/// program.

native c {

	interface "stdio.h" {
		type stdio_file  FILE *;
		type stdio_off_t off_t *;
		type stdio_vp    void *;
		type stdio_cvp   const void *;

		// void     clearerr(FILE *);
		// char    *ctermid(char *);
		// char    *cuserid(char *);(LEGACY)
		// int      fclose(FILE *);
		func fclose (_: stdio_file) -> (_: Int);
		// FILE    *fdopen(int, const char *);
		// int      feof(FILE *);
		func feof (_: stdio_file) -> (_: Int);
		// int      ferror(FILE *);
		func ferror (_: stdio_file) -> (_: Int);
		// int      fflush(FILE *);
		func fflush (_: stdio_file) -> (_: Int);
		// int      fgetc(FILE *);
		func fgetc (_: stdio_file) -> (_: Int);
		// int      fgetpos(FILE *, fpos_t *);
		// char    *fgets(char *, int, FILE *);
		// int      fileno(FILE *);
		// void     flockfile(FILE *);
		// FILE    *fopen(const char *, const char *);
		func fopen (_: String, _: String) -> (_: stdio_file);
		// int      fprintf(FILE *, const char *, ...);
		// int      fputc(int, FILE *);
		func fputc (_: Int, _: stdio_file) -> (_: Int);
		// int      fputs(const char *, FILE *);
		func fputs (_: String, _: stdio_file) -> (_: Int);
		// size_t   fread(void *, size_t, size_t, FILE *);
		func fread (_: stdio_vp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		// FILE    *freopen(const char *, const char *, FILE *);
		// int      fscanf(FILE *, const char *, ...);
		// int      fseek(FILE *, long int, int);
		func fseek (_: stdio_file, _: Int, _: Int) -> (_: Int);
		// int      fseeko(FILE *, off_t, int);
		func fseek (_: stdio_file, _: stdio_off_t, _: Int) -> (_: Int);
		// int      fsetpos(FILE *, const fpos_t *);
		// long int ftell(FILE *);
		func ftell (_: stdio_file) -> (_: Int);
		// off_t    ftello(FILE *);
		func ftello (_: stdio_file) -> (_: stdio_off_t);
		// int      ftrylockfile(FILE *);
		// void     funlockfile(FILE *);
		// size_t   fwrite(const void *, size_t, size_t, FILE *);
		func fwrite (_: stdio_cvp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		func fwrite (_: stdio_vp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		// int      getc(FILE *);
		// int      getchar(void);
		// int      getc_unlocked(FILE *);
		// int      getchar_unlocked(void);
		// int      getopt(int, char * const[], const char); (LEGACY)
		// char    *gets(char *);
		func gets (_: String) -> (_: String);
		// int      getw(FILE *);
		// int      pclose(FILE *);
		// void     perror(const char *);
		// FILE    *popen(const char *, const char *);
		// int      printf(const char *, ...);
		func printf (_: String, _: Real) -> (_: Int);
		func printf (_: String, _: Real, _: Real) -> (_: Int);
		// int      putc(int, FILE *);
		// int      putchar(int);
		// int      puts(const char *);
		func puts (_: String) -> (_: Int);
		// int      putw(int, FILE *);
		// int      remove(const char *);
		// int      rename(const char *, const char *);
		// void     rewind(FILE *);
		// int      scanf(const char *, ...);
		// void     setbuf(FILE *, char *);
		// int      setvbuf(FILE *, char *, int, size_t);
		// int      snprintf(char *, size_t, const char *, ...);
		// int      sprintf(char *, const char *, ...);
		// int      sscanf(const char *, const char *, int ...);
		// char    *tempnam(const char *, const char *);
		// FILE    *tmpfile(void);
		// char    *tmpnam(char *);
		// int      ungetc(int, FILE *);
		// int      vfprintf(FILE *, const char *, va_list);
		// int      vprintf(const char *, va_list);
		// int      vsnprintf(char *, size_t, const char *, va_list);
		// int      vsprintf(char *, const char *, va_list);
	}

	interface "math.h" {
		func sqrt (f: Real) -> (o: Real);
	}

}
