Terminals which are not used

   "string constant"
   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 body: "opening braces {" "closing braces }"
   24     | "opening braces {" stmts "closing braces }"

   25 stmts: stmt
   26      | stmts stmt

   27 stmt: expr ";"

   28 primary_expr: "identifier"
   29             | "opening paranthesis (" expr "closing paranthesis )"

   30 postfix_expr: primary_expr
   31             | postfix_expr OPERATOR
   32             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr "." "identifier"
   35             | "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   37 call_args: call_arg
   38          | call_args "," call_arg

   39 call_arg: "identifier" ":" expr
   40         | expr

   41 prefix_expr: postfix_expr
   42            | any_operator prefix_expr

   43 any_operator: MULTIPLICATIVE_OPERATOR
   44             | ADDITIVE_OPERATOR
   45             | RELATIONAL_OPERATOR
   46             | OPERATOR

   47 multiplicative_expr: prefix_expr
   48                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   49 additive_expr: multiplicative_expr
   50              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   51 relational_expr: additive_expr
   52                | relational_expr RELATIONAL_OPERATOR additive_expr

   53 assignment_expr: relational_expr
   54                | assignment_expr "assignment operator =" relational_expr

   55 expr: assignment_expr
   56     | var_expr
   57     | var_expr "assignment operator =" assignment_expr

   58 var_expr: "var keyword" "identifier" typeexpr
   59         | "var keyword" "identifier"

   60 typeexpr: nonunion_typeexpr
   61         | union_typeexpr

   62 nonunion_typeexpr: "identifier"
   63                  | tuple_typeexpr
   64                  | qualified_typeexpr

   65 union_typeexpr: union_typeexprs

   66 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   68 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   69 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   70                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   71 tuple_typeexpr_arg: typeexpr
   72                   | "identifier" ":" typeexpr

   73 qualified_typeexpr: qualified_typeexpr_qualifiers

   74 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
   75                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

   76 qualified_typeexpr_qualifier: structure_qualifier
   77                             | interface_qualifier
   78                             | native_qualifier
   79                             | range_qualifier

   80 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

   82 structure_qualifier_decl: "value keyword"
   83                         | "object keyword"

   84 structure_qualifier_stmts: structure_qualifier_stmt
   85                          | structure_qualifier_stmts structure_qualifier_stmt

   86 structure_qualifier_stmt: "identifier" ";"
   87                         | "identifier" typeexpr ";"

   88 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
   89                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

   90 interface_qualifier_stmts: interface_qualifier_stmt
   91                          | interface_qualifier_stmts interface_qualifier_stmt

   92 interface_qualifier_stmt: "identifier"

   93 native_qualifier: "native keyword" "identifier"

   94 range_qualifier: range_qualifier_decl
   95                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

   96 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 28 32 33 34 35 36 39 58 59 62 72 86
    87 92 93 96
"number constant" (259) 95
"string constant" (260)
MULTIPLICATIVE_OPERATOR (261) 43 48
ADDITIVE_OPERATOR (262) 44 50
RELATIONAL_OPERATOR (263) 45 52
OPERATOR (264) 31 46
"symbol" (265)
"func keyword" (266) 10 11 12
"var keyword" (267) 58 59
"type keyword" (268) 22
"unary keyword" (269) 12
"value keyword" (270) 82
"object keyword" (271) 83
"interface keyword" (272) 88 89
"native keyword" (273) 93
"range keyword" (274) 96
"opening paranthesis (" (275) 13 15 29 32 33 35 36 68 95
"closing paranthesis )" (276) 13 15 29 32 33 35 36 68 95
"opening braces {" (277) 23 24 80 81 88 89
"closing braces }" (278) 23 24 80 81 88 89
"opening bracket [" (279)
"closing bracket ]" (280)
"vertical pipe |" (281) 66 67
"." (282) 32 33 34
"," (283) 17 38 69 70 95
":" (284) 39 72
";" (285) 27 86 87
"right arrow ->" (286) 8 9
"assignment operator =" (287) 54 57


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
root (34)
    on left: 1, on right: 0
root_stmts (35)
    on left: 2 3, on right: 1 2
root_stmt (36)
    on left: 4 5, on right: 2 3
func_decl (37)
    on left: 6 7 8 9, on right: 4
func_decl_name (38)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (39)
    on left: 13 14 15, on right: 7 8 9
func_args (40)
    on left: 16 17, on right: 15 17
func_arg (41)
    on left: 18 19, on right: 14 16 17
type_decl (42)
    on left: 20 21, on right: 5
type_decl_name (43)
    on left: 22, on right: 20 21
body (44)
    on left: 23 24, on right: 6 7 8 9
stmts (45)
    on left: 25 26, on right: 24 26
stmt (46)
    on left: 27, on right: 25 26
primary_expr (47)
    on left: 28 29, on right: 30
postfix_expr (48)
    on left: 30 31 32 33 34 35 36, on right: 31 32 33 34 41
call_args (49)
    on left: 37 38, on right: 33 36 38
call_arg (50)
    on left: 39 40, on right: 37 38
prefix_expr (51)
    on left: 41 42, on right: 42 47 48
any_operator (52)
    on left: 43 44 45 46, on right: 11 12 42
multiplicative_expr (53)
    on left: 47 48, on right: 48 49 50
additive_expr (54)
    on left: 49 50, on right: 50 51 52
relational_expr (55)
    on left: 51 52, on right: 52 53 54
assignment_expr (56)
    on left: 53 54, on right: 54 55 57
expr (57)
    on left: 55 56 57, on right: 27 29 39 40
var_expr (58)
    on left: 58 59, on right: 56 57
typeexpr (59)
    on left: 60 61, on right: 19 21 58 71 72 87
nonunion_typeexpr (60)
    on left: 62 63 64, on right: 60 66 67
union_typeexpr (61)
    on left: 65, on right: 61
union_typeexprs (62)
    on left: 66 67, on right: 65 67
tuple_typeexpr (63)
    on left: 68, on right: 63
tuple_typeexpr_args (64)
    on left: 69 70, on right: 68 70
tuple_typeexpr_arg (65)
    on left: 71 72, on right: 69 70
qualified_typeexpr (66)
    on left: 73, on right: 64
qualified_typeexpr_qualifiers (67)
    on left: 74 75, on right: 73 75
qualified_typeexpr_qualifier (68)
    on left: 76 77 78 79, on right: 74 75
structure_qualifier (69)
    on left: 80 81, on right: 76
structure_qualifier_decl (70)
    on left: 82 83, on right: 80 81
structure_qualifier_stmts (71)
    on left: 84 85, on right: 81 85
structure_qualifier_stmt (72)
    on left: 86 87, on right: 84 85
interface_qualifier (73)
    on left: 88 89, on right: 77
interface_qualifier_stmts (74)
    on left: 90 91, on right: 89 91
interface_qualifier_stmt (75)
    on left: 92, on right: 90 91
native_qualifier (76)
    on left: 93, on right: 78
range_qualifier (77)
    on left: 94 95, on right: 79
range_qualifier_decl (78)
    on left: 96, on right: 94 95


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    body             go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 34
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   43 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 43 (any_operator)


state 12

   44 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 44 (any_operator)


state 13

   45 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 45 (any_operator)


state 14

   46 any_operator: OPERATOR .

    $default  reduce using rule 46 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 48


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 49
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 50

    func_args  go to state 51
    func_arg   go to state 52


state 22

   23 body: "opening braces {" . "closing braces }"
   24     | "opening braces {" . stmts "closing braces }"
   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55
    "closing braces }"       shift, and go to state 56

    stmts                go to state 57
    stmt                 go to state 58
    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 67
    var_expr             go to state 68


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 69
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 70

    body  go to state 71


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 27

   62 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 62 (nonunion_typeexpr)


state 28

   82 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 82 (structure_qualifier_decl)


state 29

   83 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 83 (structure_qualifier_decl)


state 30

   88 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
   89                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 72


state 31

   93 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 73


state 32

   96 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 74


state 33

   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   68               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   69 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   70                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   71 tuple_typeexpr_arg: . typeexpr
   72                   | . "identifier" ":" typeexpr
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 75
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 76
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_args            go to state 77
    tuple_typeexpr_arg             go to state 78
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 34

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 35

   60 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   66 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 79

    $default  reduce using rule 60 (typeexpr)


state 36

   61 typeexpr: union_typeexpr .

    $default  reduce using rule 61 (typeexpr)


state 37

   65 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   67 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 80

    $default  reduce using rule 65 (union_typeexpr)


state 38

   63 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 63 (nonunion_typeexpr)


state 39

   64 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 64 (nonunion_typeexpr)


state 40

   73 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   75 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 73 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 81
    structure_qualifier           go to state 42
    structure_qualifier_decl      go to state 43
    interface_qualifier           go to state 44
    native_qualifier              go to state 45
    range_qualifier               go to state 46
    range_qualifier_decl          go to state 47


state 41

   74 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 74 (qualified_typeexpr_qualifiers)


state 42

   76 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 76 (qualified_typeexpr_qualifier)


state 43

   80 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
   81                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 82


state 44

   77 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 77 (qualified_typeexpr_qualifier)


state 45

   78 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 78 (qualified_typeexpr_qualifier)


state 46

   79 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 79 (qualified_typeexpr_qualifier)


state 47

   94 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "closing paranthesis )", "opening braces {", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   95                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 83

    $default  reduce using rule 94 (range_qualifier)


state 48

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 49

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 50

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 51

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 84
    ","                      shift, and go to state 85


state 52

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 53

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]
   35 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   36             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 86

    $default  reduce using rule 28 (primary_expr)


state 54

   58 var_expr: "var keyword" . "identifier" typeexpr
   59         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 87


state 55

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   29             | "opening paranthesis (" . expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 88
    var_expr             go to state 68


state 56

   23 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 23 (body)


state 57

   24 body: "opening braces {" stmts . "closing braces }"
   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55
    "closing braces }"       shift, and go to state 89

    stmt                 go to state 90
    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 67
    var_expr             go to state 68


state 58

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


state 59

   30 postfix_expr: primary_expr .

    $default  reduce using rule 30 (postfix_expr)


state 60

   31 postfix_expr: postfix_expr . OPERATOR
   32             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr . "." "identifier"
   41 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 91
    "."       shift, and go to state 92

    $default  reduce using rule 41 (prefix_expr)


state 61

   47 multiplicative_expr: prefix_expr .

    $default  reduce using rule 47 (multiplicative_expr)


state 62

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   42            | any_operator . prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr  go to state 59
    postfix_expr  go to state 60
    prefix_expr   go to state 93
    any_operator  go to state 62


state 63

   48 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 94

    $default  reduce using rule 49 (additive_expr)


state 64

   50 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 95

    $default  reduce using rule 51 (relational_expr)


state 65

   52 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 96

    $default  reduce using rule 53 (assignment_expr)


state 66

   54 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   55 expr: assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 97

    $default  reduce using rule 55 (expr)


state 67

   27 stmt: expr . ";"

    ";"  shift, and go to state 98


state 68

   56 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   57     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 99

    $default  reduce using rule 56 (expr)


state 69

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 100


state 70

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 101
    func_arg         go to state 25


state 71

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 72

   88 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
   89                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
   90 interface_qualifier_stmts: . interface_qualifier_stmt
   91                          | . interface_qualifier_stmts interface_qualifier_stmt
   92 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 102
    "closing braces }"  shift, and go to state 103

    interface_qualifier_stmts  go to state 104
    interface_qualifier_stmt   go to state 105


state 73

   93 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 93 (native_qualifier)


state 74

   96 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 96 (range_qualifier_decl)


state 75

   62 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   72 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 106

    $default  reduce using rule 62 (nonunion_typeexpr)


state 76

   71 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 71 (tuple_typeexpr_arg)


state 77

   68 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   70 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 107
    ","                      shift, and go to state 108


state 78

   69 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 109


state 79

   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   66 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 110
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 80

   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   67 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 111
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 81

   75 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 75 (qualified_typeexpr_qualifiers)


state 82

   80 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
   81                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_stmts: . structure_qualifier_stmt
   85                          | . structure_qualifier_stmts structure_qualifier_stmt
   86 structure_qualifier_stmt: . "identifier" ";"
   87                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 112
    "closing braces }"  shift, and go to state 113

    structure_qualifier_stmts  go to state 114
    structure_qualifier_stmt   go to state 115


state 83

   95 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 116


state 84

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 85

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 117


state 86

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   37 call_args: . call_arg
   38          | . call_args "," call_arg
   39 call_arg: . "identifier" ":" expr
   40         | . expr
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 118
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55
    "closing paranthesis )"  shift, and go to state 119

    primary_expr         go to state 59
    postfix_expr         go to state 60
    call_args            go to state 120
    call_arg             go to state 121
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 122
    var_expr             go to state 68


state 87

   58 var_expr: "var keyword" "identifier" . typeexpr
   59         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]
   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 59 (var_expr)

    typeexpr                       go to state 123
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 88

   29 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 124


state 89

   24 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 24 (body)


state 90

   26 stmts: stmts stmt .

    $default  reduce using rule 26 (stmts)


state 91

   31 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 31 (postfix_expr)


state 92

   32 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 125


state 93

   42 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 42 (prefix_expr)


state 94

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   48 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr  go to state 59
    postfix_expr  go to state 60
    prefix_expr   go to state 126
    any_operator  go to state 62


state 95

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 127


state 96

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 128


state 97

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: assignment_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 129


state 98

   27 stmt: expr ";" .

    $default  reduce using rule 27 (stmt)


state 99

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   57 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 130


state 100

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 101

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 131


state 102

   92 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 92 (interface_qualifier_stmt)


state 103

   88 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 88 (interface_qualifier)


state 104

   89 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
   91 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
   92 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 102
    "closing braces }"  shift, and go to state 132

    interface_qualifier_stmt  go to state 133


state 105

   90 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 90 (interface_qualifier_stmts)


state 106

   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   72 tuple_typeexpr_arg: "identifier" ":" . typeexpr
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 134
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 107

   68 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 68 (tuple_typeexpr)


state 108

   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   70 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   71 tuple_typeexpr_arg: . typeexpr
   72                   | . "identifier" ":" typeexpr
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 75
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 76
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 135
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 109

   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   69 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   71 tuple_typeexpr_arg: . typeexpr
   72                   | . "identifier" ":" typeexpr
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 75
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 76
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 136
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 110

   66 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 66 (union_typeexprs)


state 111

   67 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 67 (union_typeexprs)


state 112

   60 typeexpr: . nonunion_typeexpr
   61         | . union_typeexpr
   62 nonunion_typeexpr: . "identifier"
   63                  | . tuple_typeexpr
   64                  | . qualified_typeexpr
   65 union_typeexpr: . union_typeexprs
   66 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   67                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   68 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 qualified_typeexpr: . qualified_typeexpr_qualifiers
   74 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   75                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   76 qualified_typeexpr_qualifier: . structure_qualifier
   77                             | . interface_qualifier
   78                             | . native_qualifier
   79                             | . range_qualifier
   80 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   81                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   82 structure_qualifier_decl: . "value keyword"
   83                         | . "object keyword"
   86 structure_qualifier_stmt: "identifier" . ";"
   87                         | "identifier" . typeexpr ";"
   88 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   89                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   93 native_qualifier: . "native keyword" "identifier"
   94 range_qualifier: . range_qualifier_decl
   95                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   96 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    ";"                      shift, and go to state 137

    typeexpr                       go to state 138
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 113

   80 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 80 (structure_qualifier)


state 114

   81 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
   85 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
   86 structure_qualifier_stmt: . "identifier" ";"
   87                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 112
    "closing braces }"  shift, and go to state 139

    structure_qualifier_stmt  go to state 140


state 115

   84 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 84 (structure_qualifier_stmts)


state 116

   95 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 141


state 117

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 118

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   35 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   36             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   39 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 86
    ":"                      shift, and go to state 142

    $default  reduce using rule 28 (primary_expr)


state 119

   35 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 35 (postfix_expr)


state 120

   36 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   38 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 143
    ","                      shift, and go to state 144


state 121

   37 call_args: call_arg .

    $default  reduce using rule 37 (call_args)


state 122

   40 call_arg: expr .

    $default  reduce using rule 40 (call_arg)


state 123

   58 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 58 (var_expr)


state 124

   29 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 29 (primary_expr)


state 125

   32 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 145

    $default  reduce using rule 34 (postfix_expr)


state 126

   48 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 48 (multiplicative_expr)


state 127

   48 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 94

    $default  reduce using rule 50 (additive_expr)


state 128

   50 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 95

    $default  reduce using rule 52 (relational_expr)


state 129

   52 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: assignment_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 96

    $default  reduce using rule 54 (assignment_expr)


state 130

   54 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   57 expr: var_expr "assignment operator =" assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 97

    $default  reduce using rule 57 (expr)


state 131

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 132

   89 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 89 (interface_qualifier)


state 133

   91 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 91 (interface_qualifier_stmts)


state 134

   72 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 72 (tuple_typeexpr_arg)


state 135

   70 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 70 (tuple_typeexpr_args)


state 136

   69 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 69 (tuple_typeexpr_args)


state 137

   86 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 86 (structure_qualifier_stmt)


state 138

   87 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 146


state 139

   81 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 81 (structure_qualifier)


state 140

   85 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 85 (structure_qualifier_stmts)


state 141

   95 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 147


state 142

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 call_arg: "identifier" ":" . expr
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 148
    var_expr             go to state 68


state 143

   36 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 36 (postfix_expr)


state 144

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   38 call_args: call_args "," . call_arg
   39 call_arg: . "identifier" ":" expr
   40         | . expr
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 118
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55

    primary_expr         go to state 59
    postfix_expr         go to state 60
    call_arg             go to state 149
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 122
    var_expr             go to state 68


state 145

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30 postfix_expr: . primary_expr
   31             | . postfix_expr OPERATOR
   32             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   32             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   33             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   33             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   34             | . postfix_expr "." "identifier"
   35             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   37 call_args: . call_arg
   38          | . call_args "," call_arg
   39 call_arg: . "identifier" ":" expr
   40         | . expr
   41 prefix_expr: . postfix_expr
   42            | . any_operator prefix_expr
   43 any_operator: . MULTIPLICATIVE_OPERATOR
   44             | . ADDITIVE_OPERATOR
   45             | . RELATIONAL_OPERATOR
   46             | . OPERATOR
   47 multiplicative_expr: . prefix_expr
   48                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   49 additive_expr: . multiplicative_expr
   50              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   51 relational_expr: . additive_expr
   52                | . relational_expr RELATIONAL_OPERATOR additive_expr
   53 assignment_expr: . relational_expr
   54                | . assignment_expr "assignment operator =" relational_expr
   55 expr: . assignment_expr
   56     | . var_expr
   57     | . var_expr "assignment operator =" assignment_expr
   58 var_expr: . "var keyword" "identifier" typeexpr
   59         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 118
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 54
    "opening paranthesis ("  shift, and go to state 55
    "closing paranthesis )"  shift, and go to state 150

    primary_expr         go to state 59
    postfix_expr         go to state 60
    call_args            go to state 151
    call_arg             go to state 121
    prefix_expr          go to state 61
    any_operator         go to state 62
    multiplicative_expr  go to state 63
    additive_expr        go to state 64
    relational_expr      go to state 65
    assignment_expr      go to state 66
    expr                 go to state 122
    var_expr             go to state 68


state 146

   87 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 87 (structure_qualifier_stmt)


state 147

   95 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 152


state 148

   39 call_arg: "identifier" ":" expr .

    $default  reduce using rule 39 (call_arg)


state 149

   38 call_args: call_args "," call_arg .

    $default  reduce using rule 38 (call_args)


state 150

   32 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 32 (postfix_expr)


state 151

   33 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   38 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 153
    ","                      shift, and go to state 144


state 152

   95 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 95 (range_qualifier)


state 153

   33 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 33 (postfix_expr)
