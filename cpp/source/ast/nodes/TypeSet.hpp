/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include "interfaces.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>
#include <cstdio>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class TypeSet : public Node
{
public:
	TypeSet() : Node() {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kTypeSet;
	}

	virtual bool implements(Interface i)
	{
		if (Node::implements(i)) return true;
		return false;
	}

	virtual string getClassName() const { return "TypeSet"; }

	void setTypes(const NodeVector& v)
	{
		if (!equal(v, types)) {
			modify("types");
			types = v;
		}
	}
	const NodeVector& getTypes(bool required = true)
	{
		const NodeVector& v = types;
		return v;
	}

	virtual string describe(int depth = -1)
	{
		stringstream str, b;
					str << "{";			bool first = true;			for (NodeVector::iterator it = types.begin(); it != types.end(); it++) {				if (!first) str << ", ";				first = false;				str << (*it)->describe(depth-1);			}			str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->types);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->types);
	}

	virtual void updateHierarchyOfChildren()
	{
		for (int i = 0; i < this->types.size(); i++) {
			char buf[32]; snprintf(buf, 31, "%i", i);
			this->types[i]->updateHierarchy((id + "types") + buf, repository, this);
		}
	}

	virtual const NodePtr& resolvePath(const string& path)
	{
		size_t size = path.size();
		// types.*
		if (size >= 5 && path[0] == 't' && path[1] == 'y' && path[2] == 'p' && path[3] == 'e' && path[4] == 's') {
			// types
			if (size == 5) {
				throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
			} else if (path[5] == '.') {
				size_t dot = path.find(".", 6);
				string idx_str = path.substr(6, dot);
				int idx = atoi(idx_str.c_str());
				const NodeVector& a = getTypes();
				if (idx < 0 || idx >= a.size()) {
					throw std::runtime_error("Index into array '" + path.substr(0, 5) + "' is out of bounds.");
				}
				if (dot == string::npos) {
					return a[idx];
				} else {
					return a[idx]->resolvePath(path.substr(dot + 1));
				}
			}
		}
		throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
	}

	virtual NodeVector getChildren()
	{
		NodeVector v;
		v.insert(v.end(), this->types.begin(), this->types.end());
		return v;
	}

	virtual bool equalTo(const NodePtr& o)
	{
		const shared_ptr<TypeSet>& other = boost::dynamic_pointer_cast<TypeSet>(o);
		if (!other) return false;
		if (!equal(this->types, other->types)) return false;
		return true;
	}

	typedef boost::shared_ptr<TypeSet> Ptr;
	template<typename T> static Ptr from(const T& n) { return boost::dynamic_pointer_cast<TypeSet>(n); }
	template<typename T> static Ptr needFrom(const T& n) { Ptr r = boost::dynamic_pointer_cast<TypeSet>(n); if (!r) throw std::runtime_error("Node " + n->getId().str() + " cannot be dynamically casted to TypeSet."); return r; }
protected:
	NodeVector types;
};

} // namespace ast