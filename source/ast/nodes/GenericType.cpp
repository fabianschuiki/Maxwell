/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "GenericType.hpp"
#include "ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::GenericType;
using ast::NodePtr;
using ast::NodeVector;

GenericType::GenericType() : Node() {}

bool GenericType::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kGenericType;
}

bool GenericType::implements(Interface i) {
	if (Node::implements(i)) return true;
	return false;
}

NodePtr GenericType::copy() {
	Ptr c (new GenericType);
	return c;
}

bool GenericType::equalTo(const NodePtr& o) {
	const shared_ptr<GenericType>& other = boost::dynamic_pointer_cast<GenericType>(o);
	if (!other) return false;
	return true;
}

std::string GenericType::describe(int depth) {
	std::stringstream str, b;
	str << "*";
	return str.str();
}


void GenericType::encode(Encoder& e) {
}

void GenericType::decode(Decoder& d) {
}


void GenericType::updateHierarchyOfChildren() {
}

const NodePtr& GenericType::resolvePath(const std::string& path) {
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

