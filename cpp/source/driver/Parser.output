Terminals which are not used

   "real number constant"
   "integer number constant"
   "string constant"
   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: "type keyword" "identifier"
   21          | "type keyword" "identifier" type_decl_exprs

   22 type_decl_exprs: typeexpr
   23                | type_decl_exprs typeexpr

   24 body: "opening braces {" "closing braces }"
   25     | "opening braces {" stmts "closing braces }"

   26 stmts: stmt
   27      | stmts stmt

   28 stmt: expr ";"

   29 primary_expr: "identifier"
   30             | "opening paranthesis (" expr "closing paranthesis )"

   31 postfix_expr: primary_expr
   32             | postfix_expr OPERATOR
   33             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." "identifier"
   36             | "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   38 call_args: call_arg
   39          | call_args "," call_arg

   40 call_arg: "identifier" ":" expr
   41         | expr

   42 prefix_expr: postfix_expr
   43            | any_operator prefix_expr

   44 any_operator: MULTIPLICATIVE_OPERATOR
   45             | ADDITIVE_OPERATOR
   46             | RELATIONAL_OPERATOR
   47             | OPERATOR

   48 multiplicative_expr: prefix_expr
   49                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   50 additive_expr: multiplicative_expr
   51              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   52 relational_expr: additive_expr
   53                | relational_expr RELATIONAL_OPERATOR additive_expr

   54 assignment_expr: relational_expr
   55                | assignment_expr "assignment operator =" relational_expr

   56 expr: assignment_expr
   57     | var_expr
   58     | var_expr "assignment operator =" assignment_expr

   59 var_expr: "var keyword" "identifier" typeexpr
   60         | "var keyword" "identifier"

   61 typeexpr: nonunion_typeexpr
   62         | union_typeexpr

   63 nonunion_typeexpr: "identifier"
   64                  | tuple_typeexpr
   65                  | struct_typeexpr

   66 union_typeexpr: union_typeexprs

   67 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   69 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   70 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   71                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   72 tuple_typeexpr_arg: typeexpr
   73                   | "identifier" ":" typeexpr

   74 struct_typeexpr: "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

   76 struct_typeexpr_stmts: struct_typeexpr_stmt
   77                      | struct_typeexpr_stmts struct_typeexpr_stmt

   78 struct_typeexpr_stmt: "identifier" typeexpr ";"
   79                     | "identifier" ";"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 20 21 29 33 34 35 36 37 40 59 60 63 73
    78 79
"real number constant" (259)
"integer number constant" (260)
"string constant" (261)
MULTIPLICATIVE_OPERATOR (262) 44 49
ADDITIVE_OPERATOR (263) 45 51
RELATIONAL_OPERATOR (264) 46 53
OPERATOR (265) 32 47
"symbol" (266)
"func keyword" (267) 10 11 12
"var keyword" (268) 59 60
"type keyword" (269) 20 21
"unary keyword" (270) 12
"value keyword" (271) 74
"object keyword" (272) 75
"opening paranthesis (" (273) 13 15 30 33 34 36 37 69
"closing paranthesis )" (274) 13 15 30 33 34 36 37 69
"opening braces {" (275) 24 25 74 75
"closing braces }" (276) 24 25 74 75
"opening bracket [" (277)
"closing bracket ]" (278)
"vertical pipe |" (279) 67 68
"." (280) 33 34 35
"," (281) 17 39 70 71
":" (282) 40 73
";" (283) 28 78 79
"right arrow ->" (284) 8 9
"assignment operator =" (285) 55 58


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
root (32)
    on left: 1, on right: 0
root_stmts (33)
    on left: 2 3, on right: 1 2
root_stmt (34)
    on left: 4 5, on right: 2 3
func_decl (35)
    on left: 6 7 8 9, on right: 4
func_decl_name (36)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (37)
    on left: 13 14 15, on right: 7 8 9
func_args (38)
    on left: 16 17, on right: 15 17
func_arg (39)
    on left: 18 19, on right: 14 16 17
type_decl (40)
    on left: 20 21, on right: 5
type_decl_exprs (41)
    on left: 22 23, on right: 21 23
body (42)
    on left: 24 25, on right: 6 7 8 9
stmts (43)
    on left: 26 27, on right: 25 27
stmt (44)
    on left: 28, on right: 26 27
primary_expr (45)
    on left: 29 30, on right: 31
postfix_expr (46)
    on left: 31 32 33 34 35 36 37, on right: 32 33 34 35 42
call_args (47)
    on left: 38 39, on right: 34 37 39
call_arg (48)
    on left: 40 41, on right: 38 39
prefix_expr (49)
    on left: 42 43, on right: 43 48 49
any_operator (50)
    on left: 44 45 46 47, on right: 11 12 43
multiplicative_expr (51)
    on left: 48 49, on right: 49 50 51
additive_expr (52)
    on left: 50 51, on right: 51 52 53
relational_expr (53)
    on left: 52 53, on right: 53 54 55
assignment_expr (54)
    on left: 54 55, on right: 55 56 58
expr (55)
    on left: 56 57 58, on right: 28 30 40 41
var_expr (56)
    on left: 59 60, on right: 57 58
typeexpr (57)
    on left: 61 62, on right: 19 22 23 59 72 73 78
nonunion_typeexpr (58)
    on left: 63 64 65, on right: 61 67 68
union_typeexpr (59)
    on left: 66, on right: 62
union_typeexprs (60)
    on left: 67 68, on right: 66 68
tuple_typeexpr (61)
    on left: 69, on right: 64
tuple_typeexpr_args (62)
    on left: 70 71, on right: 69 71
tuple_typeexpr_arg (63)
    on left: 72 73, on right: 70 71
struct_typeexpr (64)
    on left: 74 75, on right: 65
struct_typeexpr_stmts (65)
    on left: 76 77, on right: 74 75 77
struct_typeexpr_stmt (66)
    on left: 78 79, on right: 76 77


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . "type keyword" "identifier"
   21          | . "type keyword" "identifier" type_decl_exprs

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR

    "identifier"             shift, and go to state 9
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "unary keyword"          shift, and go to state 14

    any_operator  go to state 15


state 2

   20 type_decl: "type keyword" . "identifier"
   21          | "type keyword" . "identifier" type_decl_exprs

    "identifier"  shift, and go to state 16


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 17


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . "type keyword" "identifier"
   21          | . "type keyword" "identifier" type_decl_exprs

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 18
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20
    "opening braces {"       shift, and go to state 21
    "right arrow ->"         shift, and go to state 22

    func_args_tuple  go to state 23
    func_arg         go to state 24
    body             go to state 25


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 10

   44 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 44 (any_operator)


state 11

   45 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 45 (any_operator)


state 12

   46 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 46 (any_operator)


state 13

   47 any_operator: OPERATOR .

    $default  reduce using rule 47 (any_operator)


state 14

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13

    any_operator  go to state 26


state 15

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 16

   20 type_decl: "type keyword" "identifier" .  ["end of input", "func keyword", "type keyword"]
   21          | "type keyword" "identifier" . type_decl_exprs
   22 type_decl_exprs: . typeexpr
   23                | . type_decl_exprs typeexpr
   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    $default  reduce using rule 20 (type_decl)

    type_decl_exprs    go to state 31
    typeexpr           go to state 32
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 17

    0 $accept: root "end of input" .

    $default  accept


state 18

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 19

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    $default  reduce using rule 18 (func_arg)

    typeexpr           go to state 38
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 20

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "closing paranthesis )"  shift, and go to state 39

    func_args  go to state 40
    func_arg   go to state 41


state 21

   24 body: "opening braces {" . "closing braces }"
   25     | "opening braces {" . stmts "closing braces }"
   26 stmts: . stmt
   27      | . stmts stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44
    "closing braces }"       shift, and go to state 45

    stmts                go to state 46
    stmt                 go to state 47
    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 56
    var_expr             go to state 57


state 22

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    func_args_tuple  go to state 58
    func_arg         go to state 24


state 23

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21
    "right arrow ->"    shift, and go to state 59

    body  go to state 60


state 24

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 25

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 26

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 27

   63 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 63 (nonunion_typeexpr)


state 28

   74 struct_typeexpr: "value keyword" . "opening braces {" struct_typeexpr_stmts "closing braces }"

    "opening braces {"  shift, and go to state 61


state 29

   75 struct_typeexpr: "object keyword" . "opening braces {" struct_typeexpr_stmts "closing braces }"

    "opening braces {"  shift, and go to state 62


state 30

   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   69               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   70 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   71                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   72 tuple_typeexpr_arg: . typeexpr
   73                   | . "identifier" ":" typeexpr
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 63
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    typeexpr             go to state 64
    nonunion_typeexpr    go to state 33
    union_typeexpr       go to state 34
    union_typeexprs      go to state 35
    tuple_typeexpr       go to state 36
    tuple_typeexpr_args  go to state 65
    tuple_typeexpr_arg   go to state 66
    struct_typeexpr      go to state 37


state 31

   21 type_decl: "type keyword" "identifier" type_decl_exprs .  ["end of input", "func keyword", "type keyword"]
   23 type_decl_exprs: type_decl_exprs . typeexpr
   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    $default  reduce using rule 21 (type_decl)

    typeexpr           go to state 67
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 32

   22 type_decl_exprs: typeexpr .

    $default  reduce using rule 22 (type_decl_exprs)


state 33

   61 typeexpr: nonunion_typeexpr .  ["end of input", "identifier", "func keyword", "type keyword", "value keyword", "object keyword", "opening paranthesis (", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   67 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 68

    $default  reduce using rule 61 (typeexpr)


state 34

   62 typeexpr: union_typeexpr .

    $default  reduce using rule 62 (typeexpr)


state 35

   66 union_typeexpr: union_typeexprs .  ["end of input", "identifier", "func keyword", "type keyword", "value keyword", "object keyword", "opening paranthesis (", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   68 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 69

    $default  reduce using rule 66 (union_typeexpr)


state 36

   64 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 64 (nonunion_typeexpr)


state 37

   65 nonunion_typeexpr: struct_typeexpr .

    $default  reduce using rule 65 (nonunion_typeexpr)


state 38

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 39

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 40

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 70
    ","                      shift, and go to state 71


state 41

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 42

   29 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]
   36 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 72

    $default  reduce using rule 29 (primary_expr)


state 43

   59 var_expr: "var keyword" . "identifier" typeexpr
   60         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 73


state 44

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | "opening paranthesis (" . expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 74
    var_expr             go to state 57


state 45

   24 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 24 (body)


state 46

   25 body: "opening braces {" stmts . "closing braces }"
   27 stmts: stmts . stmt
   28 stmt: . expr ";"
   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44
    "closing braces }"       shift, and go to state 75

    stmt                 go to state 76
    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 56
    var_expr             go to state 57


state 47

   26 stmts: stmt .

    $default  reduce using rule 26 (stmts)


state 48

   31 postfix_expr: primary_expr .

    $default  reduce using rule 31 (postfix_expr)


state 49

   32 postfix_expr: postfix_expr . OPERATOR
   33             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr . "." "identifier"
   42 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 77
    "."       shift, and go to state 78

    $default  reduce using rule 42 (prefix_expr)


state 50

   48 multiplicative_expr: prefix_expr .

    $default  reduce using rule 48 (multiplicative_expr)


state 51

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   43            | any_operator . prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr  go to state 48
    postfix_expr  go to state 49
    prefix_expr   go to state 79
    any_operator  go to state 51


state 52

   49 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 80

    $default  reduce using rule 50 (additive_expr)


state 53

   51 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 81

    $default  reduce using rule 52 (relational_expr)


state 54

   53 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 82

    $default  reduce using rule 54 (assignment_expr)


state 55

   55 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   56 expr: assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 83

    $default  reduce using rule 56 (expr)


state 56

   28 stmt: expr . ";"

    ";"  shift, and go to state 84


state 57

   57 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   58     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 85

    $default  reduce using rule 57 (expr)


state 58

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21

    body  go to state 86


state 59

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 19
    "opening paranthesis ("  shift, and go to state 20

    func_args_tuple  go to state 87
    func_arg         go to state 24


state 60

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 61

   74 struct_typeexpr: "value keyword" "opening braces {" . struct_typeexpr_stmts "closing braces }"
   76 struct_typeexpr_stmts: . struct_typeexpr_stmt
   77                      | . struct_typeexpr_stmts struct_typeexpr_stmt
   78 struct_typeexpr_stmt: . "identifier" typeexpr ";"
   79                     | . "identifier" ";"

    "identifier"  shift, and go to state 88

    struct_typeexpr_stmts  go to state 89
    struct_typeexpr_stmt   go to state 90


state 62

   75 struct_typeexpr: "object keyword" "opening braces {" . struct_typeexpr_stmts "closing braces }"
   76 struct_typeexpr_stmts: . struct_typeexpr_stmt
   77                      | . struct_typeexpr_stmts struct_typeexpr_stmt
   78 struct_typeexpr_stmt: . "identifier" typeexpr ";"
   79                     | . "identifier" ";"

    "identifier"  shift, and go to state 88

    struct_typeexpr_stmts  go to state 91
    struct_typeexpr_stmt   go to state 90


state 63

   63 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   73 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 92

    $default  reduce using rule 63 (nonunion_typeexpr)


state 64

   72 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 72 (tuple_typeexpr_arg)


state 65

   69 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   71 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 93
    ","                      shift, and go to state 94


state 66

   70 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 95


state 67

   23 type_decl_exprs: type_decl_exprs typeexpr .

    $default  reduce using rule 23 (type_decl_exprs)


state 68

   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   67 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    nonunion_typeexpr  go to state 96
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 69

   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   68 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    nonunion_typeexpr  go to state 97
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 70

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 71

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 19

    func_arg  go to state 98


state 72

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   36             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   37             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   38 call_args: . call_arg
   39          | . call_args "," call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 99
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44
    "closing paranthesis )"  shift, and go to state 100

    primary_expr         go to state 48
    postfix_expr         go to state 49
    call_args            go to state 101
    call_arg             go to state 102
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 103
    var_expr             go to state 57


state 73

   59 var_expr: "var keyword" "identifier" . typeexpr
   60         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]
   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    $default  reduce using rule 60 (var_expr)

    typeexpr           go to state 104
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 74

   30 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 105


state 75

   25 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 25 (body)


state 76

   27 stmts: stmts stmt .

    $default  reduce using rule 27 (stmts)


state 77

   32 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 32 (postfix_expr)


state 78

   33 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 106


state 79

   43 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 43 (prefix_expr)


state 80

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   49 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr  go to state 48
    postfix_expr  go to state 49
    prefix_expr   go to state 107
    any_operator  go to state 51


state 81

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 108


state 82

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 109


state 83

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: assignment_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 110


state 84

   28 stmt: expr ";" .

    $default  reduce using rule 28 (stmt)


state 85

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   58 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 111


state 86

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 87

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   24 body: . "opening braces {" "closing braces }"
   25     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 21

    body  go to state 112


state 88

   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   78 struct_typeexpr_stmt: "identifier" . typeexpr ";"
   79                     | "identifier" . ";"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30
    ";"                      shift, and go to state 113

    typeexpr           go to state 114
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 89

   74 struct_typeexpr: "value keyword" "opening braces {" struct_typeexpr_stmts . "closing braces }"
   77 struct_typeexpr_stmts: struct_typeexpr_stmts . struct_typeexpr_stmt
   78 struct_typeexpr_stmt: . "identifier" typeexpr ";"
   79                     | . "identifier" ";"

    "identifier"        shift, and go to state 88
    "closing braces }"  shift, and go to state 115

    struct_typeexpr_stmt  go to state 116


state 90

   76 struct_typeexpr_stmts: struct_typeexpr_stmt .

    $default  reduce using rule 76 (struct_typeexpr_stmts)


state 91

   75 struct_typeexpr: "object keyword" "opening braces {" struct_typeexpr_stmts . "closing braces }"
   77 struct_typeexpr_stmts: struct_typeexpr_stmts . struct_typeexpr_stmt
   78 struct_typeexpr_stmt: . "identifier" typeexpr ";"
   79                     | . "identifier" ";"

    "identifier"        shift, and go to state 88
    "closing braces }"  shift, and go to state 117

    struct_typeexpr_stmt  go to state 116


state 92

   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   73 tuple_typeexpr_arg: "identifier" ":" . typeexpr
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    typeexpr           go to state 118
    nonunion_typeexpr  go to state 33
    union_typeexpr     go to state 34
    union_typeexprs    go to state 35
    tuple_typeexpr     go to state 36
    struct_typeexpr    go to state 37


state 93

   69 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 69 (tuple_typeexpr)


state 94

   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   71 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   72 tuple_typeexpr_arg: . typeexpr
   73                   | . "identifier" ":" typeexpr
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 63
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    typeexpr            go to state 64
    nonunion_typeexpr   go to state 33
    union_typeexpr      go to state 34
    union_typeexprs     go to state 35
    tuple_typeexpr      go to state 36
    tuple_typeexpr_arg  go to state 119
    struct_typeexpr     go to state 37


state 95

   61 typeexpr: . nonunion_typeexpr
   62         | . union_typeexpr
   63 nonunion_typeexpr: . "identifier"
   64                  | . tuple_typeexpr
   65                  | . struct_typeexpr
   66 union_typeexpr: . union_typeexprs
   67 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   68                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   69 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   70 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   72 tuple_typeexpr_arg: . typeexpr
   73                   | . "identifier" ":" typeexpr
   74 struct_typeexpr: . "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"
   75                | . "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }"

    "identifier"             shift, and go to state 63
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "opening paranthesis ("  shift, and go to state 30

    typeexpr            go to state 64
    nonunion_typeexpr   go to state 33
    union_typeexpr      go to state 34
    union_typeexprs     go to state 35
    tuple_typeexpr      go to state 36
    tuple_typeexpr_arg  go to state 120
    struct_typeexpr     go to state 37


state 96

   67 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 67 (union_typeexprs)


state 97

   68 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 68 (union_typeexprs)


state 98

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 99

   29 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   36 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   40 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 72
    ":"                      shift, and go to state 121

    $default  reduce using rule 29 (primary_expr)


state 100

   36 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 36 (postfix_expr)


state 101

   37 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   39 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 122
    ","                      shift, and go to state 123


state 102

   38 call_args: call_arg .

    $default  reduce using rule 38 (call_args)


state 103

   41 call_arg: expr .

    $default  reduce using rule 41 (call_arg)


state 104

   59 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 59 (var_expr)


state 105

   30 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 30 (primary_expr)


state 106

   33 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 124

    $default  reduce using rule 35 (postfix_expr)


state 107

   49 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 49 (multiplicative_expr)


state 108

   49 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 80

    $default  reduce using rule 51 (additive_expr)


state 109

   51 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 81

    $default  reduce using rule 53 (relational_expr)


state 110

   53 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: assignment_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 82

    $default  reduce using rule 55 (assignment_expr)


state 111

   55 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   58 expr: var_expr "assignment operator =" assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 83

    $default  reduce using rule 58 (expr)


state 112

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 113

   79 struct_typeexpr_stmt: "identifier" ";" .

    $default  reduce using rule 79 (struct_typeexpr_stmt)


state 114

   78 struct_typeexpr_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 125


state 115

   74 struct_typeexpr: "value keyword" "opening braces {" struct_typeexpr_stmts "closing braces }" .

    $default  reduce using rule 74 (struct_typeexpr)


state 116

   77 struct_typeexpr_stmts: struct_typeexpr_stmts struct_typeexpr_stmt .

    $default  reduce using rule 77 (struct_typeexpr_stmts)


state 117

   75 struct_typeexpr: "object keyword" "opening braces {" struct_typeexpr_stmts "closing braces }" .

    $default  reduce using rule 75 (struct_typeexpr)


state 118

   73 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 73 (tuple_typeexpr_arg)


state 119

   71 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 71 (tuple_typeexpr_args)


state 120

   70 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 70 (tuple_typeexpr_args)


state 121

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   40 call_arg: "identifier" ":" . expr
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 42
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 126
    var_expr             go to state 57


state 122

   37 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 37 (postfix_expr)


state 123

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 call_args: call_args "," . call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 99
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44

    primary_expr         go to state 48
    postfix_expr         go to state 49
    call_arg             go to state 127
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 103
    var_expr             go to state 57


state 124

   29 primary_expr: . "identifier"
   30             | . "opening paranthesis (" expr "closing paranthesis )"
   31 postfix_expr: . primary_expr
   32             | . postfix_expr OPERATOR
   33             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   33             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   34             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   34             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   35             | . postfix_expr "." "identifier"
   36             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   38 call_args: . call_arg
   39          | . call_args "," call_arg
   40 call_arg: . "identifier" ":" expr
   41         | . expr
   42 prefix_expr: . postfix_expr
   43            | . any_operator prefix_expr
   44 any_operator: . MULTIPLICATIVE_OPERATOR
   45             | . ADDITIVE_OPERATOR
   46             | . RELATIONAL_OPERATOR
   47             | . OPERATOR
   48 multiplicative_expr: . prefix_expr
   49                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   50 additive_expr: . multiplicative_expr
   51              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   52 relational_expr: . additive_expr
   53                | . relational_expr RELATIONAL_OPERATOR additive_expr
   54 assignment_expr: . relational_expr
   55                | . assignment_expr "assignment operator =" relational_expr
   56 expr: . assignment_expr
   57     | . var_expr
   58     | . var_expr "assignment operator =" assignment_expr
   59 var_expr: . "var keyword" "identifier" typeexpr
   60         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 99
    MULTIPLICATIVE_OPERATOR  shift, and go to state 10
    ADDITIVE_OPERATOR        shift, and go to state 11
    RELATIONAL_OPERATOR      shift, and go to state 12
    OPERATOR                 shift, and go to state 13
    "var keyword"            shift, and go to state 43
    "opening paranthesis ("  shift, and go to state 44
    "closing paranthesis )"  shift, and go to state 128

    primary_expr         go to state 48
    postfix_expr         go to state 49
    call_args            go to state 129
    call_arg             go to state 102
    prefix_expr          go to state 50
    any_operator         go to state 51
    multiplicative_expr  go to state 52
    additive_expr        go to state 53
    relational_expr      go to state 54
    assignment_expr      go to state 55
    expr                 go to state 103
    var_expr             go to state 57


state 125

   78 struct_typeexpr_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 78 (struct_typeexpr_stmt)


state 126

   40 call_arg: "identifier" ":" expr .

    $default  reduce using rule 40 (call_arg)


state 127

   39 call_args: call_args "," call_arg .

    $default  reduce using rule 39 (call_args)


state 128

   33 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 33 (postfix_expr)


state 129

   34 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   39 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 130
    ","                      shift, and go to state 123


state 130

   34 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 34 (postfix_expr)
