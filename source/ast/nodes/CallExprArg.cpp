/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "CallExprArg.hpp"
#include "ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::CallExprArg;
using ast::NodePtr;
using ast::NodeVector;

CallExprArg::CallExprArg() : Node(),
	interfaceCallArg(this),
	interfaceGraph(this),
	interfaceNamed(this) {}

bool CallExprArg::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kCallExprArg;
}

bool CallExprArg::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kCallArgInterface) return true;
	if (i == kGraphInterface) return true;
	if (i == kNamedInterface) return true;
	return false;
}

NodePtr CallExprArg::copy() {
	Ptr c (new CallExprArg);
	Node::copy(this->graphPrev, c->graphPrev);
	Node::copy(this->name, c->name);
	Node::copy(this->expr, c->expr);
	return c;
}

bool CallExprArg::equalTo(const NodePtr& o) {
	const shared_ptr<CallExprArg>& other = boost::dynamic_pointer_cast<CallExprArg>(o);
	if (!other) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	if (!equal(this->name, other->name)) return false;
	if (!equal(this->expr, other->expr)) return false;
	return true;
}

std::string CallExprArg::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "CallExprArg{â€¦}";
	str << "CallExprArg{";
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	if (!this->name.empty()) b << "\n  \033[1mname\033[0m = \033[33m\"" << this->name << "\"\033[0m";
	if (this->expr) b << "\n  \033[1mexpr\033[0m = " << indent(this->expr->describe(depth-1));
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void CallExprArg::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void CallExprArg::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& CallExprArg::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void CallExprArg::setName(const std::string& v) {
	if (!equal(v, name)) {
		modify("name");
		name = v;
	}
}

const std::string& CallExprArg::getName(bool required) {
	const std::string& v = name;
	if (required && v.empty()) {
		throw std::runtime_error("Node " + getId().str() + " is required to have a non-empty string name set.");
	}
	return v;
}


void CallExprArg::setExpr(const NodePtr& v) {
	if (v && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'expr' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, expr)) {
		modify("expr");
		expr = v;
	}
}

const NodePtr& CallExprArg::getExpr(bool required) {
	const NodePtr& v = expr;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have expr set to a non-null value.");
	}
	return v;
}


void CallExprArg::encode(Encoder& e) {
	e.encode(this->graphPrev);
	e.encode(this->name);
	e.encode(this->expr);
}

void CallExprArg::decode(Decoder& d) {
	d.decode(this->graphPrev);
	d.decode(this->name);
	d.decode(this->expr);
}


void CallExprArg::updateHierarchyOfChildren() {
	if (this->expr) this->expr->updateHierarchy(id + "expr", repository, this);
}

const NodePtr& CallExprArg::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// expr.*
		if (size >= 4 && path[0] == 'e' && path[1] == 'x' && path[2] == 'p' && path[3] == 'r') {
			// expr
			if (size == 4) {
				return getExpr();
			} else if (path[4] == '.') {
				return getExpr()->resolvePath(path.substr(5));
			}
		}
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector CallExprArg::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getExpr(false)) v.push_back(n);
	return v;
}

