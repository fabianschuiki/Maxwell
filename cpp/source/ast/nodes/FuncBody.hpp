/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class FuncBody : public Node
{
public:
	FuncBody() : Node() {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kFuncBody;
	}

	virtual string getClassName() const { return "FuncBody"; }

	void setGraphPrev(const NodePtr& v)
	{
		if (v != graphPrev) {
			modify();
			graphPrev = v;
			graphPrev_ref.clear();
		}
	}
	const NodePtr& getGraphPrev()
	{
	if (!graphPrev_ref.empty()) {
		graphPrev = resolveReference(graphPrev_ref);
		graphPrev_ref.clear();
	}
		return graphPrev;
	}

	void setStmts(const NodeVector& v)
	{
		if (v != stmts) {
			modify();
			stmts = v;
		}
	}
	const NodeVector& getStmts()
	{
		return stmts;
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "FuncBody{â€¦}";
		stringstream str, b;
		str << "FuncBody{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = " << indent(this->graphPrev->describe(depth-1));
		if (!this->stmts.empty()) b << endl << "  \033[1mstmts\033[0m = " << indent(describeVector(this->stmts, depth-1)) << "";
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev, &graphPrev_ref);
		e.encode(this->stmts);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev, &graphPrev_ref);
		d.decode(this->stmts);
	}

	virtual void updateHierarchy(const NodeId& id, const weak_ptr<Repository>& repository = weak_ptr<Repository>(), const weak_ptr<Node>& parent = weak_ptr<Node>())
	{
		Node::updateHierarchy(id, repository, parent);
		const NodePtr& self(shared_from_this());
		if (this->graphPrev) this->graphPrev->updateHierarchy(id + "graphPrev", repository, self);
		for (int i = 0; i < this->stmts.size(); i++) {
			char buf[32]; snprintf(buf, 31, "%i", i);
			this->stmts[i]->updateHierarchy((id + "stmts") + buf, repository, self);
		}
	}

protected:
	NodePtr graphPrev;
	NodeId graphPrev_ref;
	NodeVector stmts;
};

} // namespace ast