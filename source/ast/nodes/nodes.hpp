/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "ArrayConstExpr.hpp"
#include "AssignmentExpr.hpp"
#include "BinaryOpExpr.hpp"
#include "BlockExpr.hpp"
#include "CallArg.hpp"
#include "CallCandidate.hpp"
#include "CallCandidateArg.hpp"
#include "CallExpr.hpp"
#include "CallExprArg.hpp"
#include "CastType.hpp"
#include "DefinedType.hpp"
#include "ForExpr.hpp"
#include "FuncArg.hpp"
#include "FuncDef.hpp"
#include "FuncExpr.hpp"
#include "FuncType.hpp"
#include "FuncTypeExpr.hpp"
#include "GenericType.hpp"
#include "IdentifierExpr.hpp"
#include "IfCaseExpr.hpp"
#include "IfCaseExprCond.hpp"
#include "IfExpr.hpp"
#include "ImplAccessor.hpp"
#include "IndexOpExpr.hpp"
#include "InterfaceQualifier.hpp"
#include "InvalidType.hpp"
#include "MapConstExpr.hpp"
#include "MapConstExprPair.hpp"
#include "MemberAccessExpr.hpp"
#include "NamedTypeExpr.hpp"
#include "NativeQualifier.hpp"
#include "NilType.hpp"
#include "NilTypeExpr.hpp"
#include "NumberConstExpr.hpp"
#include "OneTupleMappedType.hpp"
#include "QualifiedType.hpp"
#include "QualifiedTypeExpr.hpp"
#include "QualifiedTypeMember.hpp"
#include "QualifiedTypeNative.hpp"
#include "RangeQualifier.hpp"
#include "SetConstExpr.hpp"
#include "SpecializedType.hpp"
#include "SpecializedTypeExpr.hpp"
#include "StringConstExpr.hpp"
#include "StructureQualifier.hpp"
#include "StructureQualifierMember.hpp"
#include "TupleExpr.hpp"
#include "TupleExprArg.hpp"
#include "TupleType.hpp"
#include "TupleTypeArg.hpp"
#include "TupleTypeExpr.hpp"
#include "TupleTypeExprArg.hpp"
#include "TypeDef.hpp"
#include "TypeSet.hpp"
#include "TypelessVarDefExpr.hpp"
#include "UnaryOpExpr.hpp"
#include "UnionMappedType.hpp"
#include "UnionType.hpp"
#include "UnionTypeExpr.hpp"
#include "VarDefExpr.hpp"
#include <string>

namespace ast {

NodePtr makeNode(const std::string& name);

} // namespace ast

