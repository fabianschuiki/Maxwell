/*
 * This snippet of Maxwell code shows the various ways to construct a new object.
 */

class Book
{
	int pages;
	(int, int) dimensions;
	
	property readonly (pages, dimensions);
	
	/* Constructors are functions that don't have a return type but start with the keyword
	 * «construct». Constructors may take any number of named or unnamed arguments, just as any
	 * other function. One specialty of constructors is that they will automatically set the class's
	 * instance variables to the function arguments of the same name before the constructor code is
	 * being executed. */
	construct withPages:(pages) {}
	construct withDimensions:(dimensions) {}
	construct withPages:(pages) andDimensions:(dimensions) {}
	
	
	/* Maxwell supports automated construction. The keyword automatically causes the constructor to
	 * synthesize for the variables that follow the keyword. */
	construct automatically (pages, dimensions) { ... } //yields:
	construct withPages:(pages) andDimensions:(dimensions) { ... }
	
	construct automatically (pages, dimensions, string title) { title:print; } //yields:
	construct withPages:(pages) dimensions:(dimensions) andTitle:(string title) {}
	
	/* Optional arguments are also possible. Note that there aren't actually 4 constructors being
	 * spawned, one constructor will simply match the following function calls. */
	construct automatically (pages = 0, dimensions = (100, 141)) { ... } //yields:
	construct { ... }
	construct withPages:(pages) { ... }
	construct withDimensions:(dimensions) { ... }
	construct withPages:(pages) andDimensions:(dimensions) { ... }
	
	/* Automatic constructor synthesis is recessive, meaning that you may synthesize a constructor
	 * but also implement one of its incarnations by hand, with the synthesized constructor stepping
	 * aside. */
	construct automatically (title = 0) { ... }
	construct { OS:log; }
	//yields:
	construct withTitle:(title) { ... }	//synthesized
	construct { OS:log; }				//overrides the synthesized version
	
	/* Constructor arguments are named after the following scheme:
	 * first argument	"with" + capitalized argument name
	 * ...				argument name
	 * last argument	"and" + capitalized argument name
	 *
	 * This gives the following constructor argument names:
	 * withPages:
	 * withPages: andDimensions:
	 * withPages: dimensions: andTitle:
	 * withPages: dimensions: title: andBookmarks:
	 */
}

class Shelf
{
	- void populate
	{
		/* Creating new instances of a class is almost identical to C++: The keyword new followed by
		 * the name of the class that you want to instantiate. */
		Book book1 = new Book;
		Book book2 = new Book ();
		Book book3 = new Book (withPages:436 andDimensions:(20, 40));
	}
}
