/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "Stage.hpp"

namespace stage {

class BuildGraph : public Stage
{
public:
	string getName() const { return "BuildGraph"; }
	virtual void process(const NodePtr& node);
	BuildGraph(Repository& r) : Stage(r) {}

	/* Copyright © 2013 Fabian Schuiki */
	NodePtr process(const NodePtr& node, const NodePtr& carry);
};

class BindIdentifiers : public Stage
{
public:
	string getName() const { return "BindIdentifiers"; }
	virtual void process(const NodePtr& node);
	BindIdentifiers(Repository& r) : Stage(r) {}
};

class BindNamedTypes : public Stage
{
public:
	string getName() const { return "BindNamedTypes"; }
	virtual void process(const NodePtr& node);
	BindNamedTypes(Repository& r) : Stage(r) {}
};

class EvalTypeExprs : public Stage
{
public:
	string getName() const { return "EvalTypeExprs"; }
	virtual void process(const NodePtr& node);
	EvalTypeExprs(Repository& r) : Stage(r) {}
};

class ConfigureCalls : public Stage
{
public:
	string getName() const { return "ConfigureCalls"; }
	virtual void process(const NodePtr& node);
	ConfigureCalls(Repository& r) : Stage(r) {}
};

class CalcPossibleTypes : public Stage
{
public:
	string getName() const { return "CalcPossibleTypes"; }
	virtual void process(const NodePtr& node);
	CalcPossibleTypes(Repository& r) : Stage(r) {}

	/* Copyright © 2013 Fabian Schuiki */
	void processChildren(const NodePtr& node);
};

} // namespace stage
