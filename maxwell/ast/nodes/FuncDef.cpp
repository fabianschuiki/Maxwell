/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/FuncDef.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::FuncDef;
using ast::NodePtr;
using ast::NodeVector;

FuncDef::FuncDef() : Node(),
	interfaceCallable(this),
	interfaceGraph(this),
	interfaceNamed(this) {}

bool FuncDef::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kFuncDef;
}

bool FuncDef::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kCallableInterface) return true;
	if (i == kGraphInterface) return true;
	if (i == kNamedInterface) return true;
	return false;
}

NodePtr FuncDef::copy() {
	Ptr c (new FuncDef);
	Node::copy(this->graphPrev, c->graphPrev);
	Node::copy(this->name, c->name);
	Node::copy(this->in, c->in);
	Node::copy(this->out, c->out);
	Node::copy(this->body, c->body);
	Node::copy(this->type, c->type);
	Node::copy(this->implOut, c->implOut);
	return c;
}

bool FuncDef::equalTo(const NodePtr& o) {
	const shared_ptr<FuncDef>& other = boost::dynamic_pointer_cast<FuncDef>(o);
	if (!other) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	if (!equal(this->name, other->name)) return false;
	if (!equal(this->in, other->in)) return false;
	if (!equal(this->out, other->out)) return false;
	if (!equal(this->body, other->body)) return false;
	if (!equal(this->type, other->type)) return false;
	if (!equal(this->implOut, other->implOut)) return false;
	return true;
}

std::string FuncDef::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "FuncDef{â€¦}";
	str << "FuncDef{";
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	if (!this->name.empty()) b << "\n  \033[1mname\033[0m = \033[33m\"" << this->name << "\"\033[0m";
	if (!this->in.empty()) b << "\n  \033[1min\033[0m = " << indent(describeVector(this->in, depth-1));
	if (!this->out.empty()) b << "\n  \033[1mout\033[0m = " << indent(describeVector(this->out, depth-1));
	if (this->body) b << "\n  \033[1mbody\033[0m = " << indent(this->body->describe(depth-1));
	if (this->type) b << "\n  \033[1mtype\033[0m = " << indent(this->type->describe(depth-1));
	b << "\n  \033[1mimplOut\033[0m = \033[34m" << (this->implOut ? "true" : "false") << "\033[0m";
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void FuncDef::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void FuncDef::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& FuncDef::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void FuncDef::setName(const std::string& v) {
	if (!equal(v, name)) {
		modify("name");
		name = v;
	}
}

const std::string& FuncDef::getName(bool required) {
	const std::string& v = name;
	if (required && v.empty()) {
		throw std::runtime_error("Node " + getId().str() + " is required to have a non-empty string name set.");
	}
	return v;
}


void FuncDef::setIn(const NodeVector& v) {
	if (!equal(v, in)) {
		modify("in");
		in = v;
	}
}

const NodeVector& FuncDef::getIn(bool required) {
	const NodeVector& v = in;
	return v;
}


void FuncDef::setOut(const NodeVector& v) {
	if (!equal(v, out)) {
		modify("out");
		out = v;
	}
}

const NodeVector& FuncDef::getOut(bool required) {
	const NodeVector& v = out;
	return v;
}


void FuncDef::setBody(const NodePtr& v) {
	if (v && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'body' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, body)) {
		modify("body");
		body = v;
	}
}

const NodePtr& FuncDef::getBody(bool required) {
	const NodePtr& v = body;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have body set to a non-null value.");
	}
	return v;
}


void FuncDef::setType(const NodePtr& v) {
	if (v && !v->isKindOf(kFuncType)) {
		throw std::runtime_error("'type' of " + id.str() + " needs to be of kind {FuncType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, type)) {
		modify("type");
		type = v;
	}
}

const NodePtr& FuncDef::getType(bool required) {
	const NodePtr& v = type;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have type set to a non-null value.");
	}
	return v;
}


void FuncDef::setImplOut(const bool& v) {
	if (!equal(v, implOut)) {
		modify("implOut");
		implOut = v;
	}
}

const bool& FuncDef::getImplOut(bool required) {
	const bool& v = implOut;
	return v;
}


void FuncDef::encode(Encoder& e) {
	e.encode(this->graphPrev);
	e.encode(this->name);
	e.encode(this->in);
	e.encode(this->out);
	e.encode(this->body);
	e.encode(this->type);
	e.encode(this->implOut);
}

void FuncDef::decode(Decoder& d) {
	d.decode(this->graphPrev);
	d.decode(this->name);
	d.decode(this->in);
	d.decode(this->out);
	d.decode(this->body);
	d.decode(this->type);
	d.decode(this->implOut);
}


void FuncDef::updateHierarchyOfChildren() {
	for (unsigned i = 0; i < this->in.size(); i++) {
		char buf[32]; snprintf(buf, 31, "%i", i);
		this->in[i]->updateHierarchy((id + "in") + buf, repository, this);
	}
	for (unsigned i = 0; i < this->out.size(); i++) {
		char buf[32]; snprintf(buf, 31, "%i", i);
		this->out[i]->updateHierarchy((id + "out") + buf, repository, this);
	}
	if (this->body) this->body->updateHierarchy(id + "body", repository, this);
	if (this->type) this->type->updateHierarchy(id + "type", repository, this);
}

const NodePtr& FuncDef::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// body.*
		if (size >= 4 && path[0] == 'b' && path[1] == 'o' && path[2] == 'd' && path[3] == 'y') {
			// body
			if (size == 4) {
				return getBody();
			} else if (path[4] == '.') {
				return getBody()->resolvePath(path.substr(5));
			}
		}
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
		// in.*
		if (size >= 2 && path[0] == 'i' && path[1] == 'n') {
			// in
			if (size == 2) {
				throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
			} else if (path[2] == '.') {
				size_t dot = path.find(".", 3);
				string idx_str = path.substr(3, dot);
				int idx = atoi(idx_str.c_str());
				const NodeVector& a = getIn();
				if (idx < 0 || idx >= (int)a.size()) {
					throw std::runtime_error("Index into array '" + path.substr(0, 2) + "' is out of bounds.");
				}
				if (dot == string::npos) {
					return a[idx];
				} else {
					return a[idx]->resolvePath(path.substr(dot + 1));
				}
			}
		}
		// out.*
		if (size >= 3 && path[0] == 'o' && path[1] == 'u' && path[2] == 't') {
			// out
			if (size == 3) {
				throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
			} else if (path[3] == '.') {
				size_t dot = path.find(".", 4);
				string idx_str = path.substr(4, dot);
				int idx = atoi(idx_str.c_str());
				const NodeVector& a = getOut();
				if (idx < 0 || idx >= (int)a.size()) {
					throw std::runtime_error("Index into array '" + path.substr(0, 3) + "' is out of bounds.");
				}
				if (dot == string::npos) {
					return a[idx];
				} else {
					return a[idx]->resolvePath(path.substr(dot + 1));
				}
			}
		}
		// type.*
		if (size >= 4 && path[0] == 't' && path[1] == 'y' && path[2] == 'p' && path[3] == 'e') {
			// type
			if (size == 4) {
				return getType();
			} else if (path[4] == '.') {
				return getType()->resolvePath(path.substr(5));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector FuncDef::getChildren() {
	NodeVector v;
	v.insert(v.end(), this->in.begin(), this->in.end());
	v.insert(v.end(), this->out.begin(), this->out.end());
	if (const NodePtr& n = this->getBody(false)) v.push_back(n);
	if (const NodePtr& n = this->getType(false)) v.push_back(n);
	return v;
}

