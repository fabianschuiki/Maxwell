/* Copyright (c) 2015 Fabian Schuiki */

/// \file
/// This file declares all standard C functions that may be used from a Maxwell
/// program.

native c {

	type char_ptr char *;
	type const_char_ptr const char *;

	type void_ptr void *;
	type const_void_ptr const void *;

	interface "stdio.h" {
		type stdio_file  FILE *;
		type stdio_off_t off_t *;
		type stdio_vp    void *;
		type stdio_cvp   const void *;

		// void     clearerr(FILE *);
		// char    *ctermid(char *);
		// char    *cuserid(char *);(LEGACY)
		// int      fclose(FILE *);
		func fclose (_: stdio_file) -> (_: Int);
		// FILE    *fdopen(int, const char *);
		// int      feof(FILE *);
		func feof (_: stdio_file) -> (_: Int);
		// int      ferror(FILE *);
		func ferror (_: stdio_file) -> (_: Int);
		// int      fflush(FILE *);
		func fflush (_: stdio_file) -> (_: Int);
		// int      fgetc(FILE *);
		func fgetc (_: stdio_file) -> (_: Int);
		// int      fgetpos(FILE *, fpos_t *);
		// char    *fgets(char *, int, FILE *);
		// int      fileno(FILE *);
		// void     flockfile(FILE *);
		// FILE    *fopen(const char *, const char *);
		func fopen (_: String, _: String) -> (_: stdio_file);
		// int      fprintf(FILE *, const char *, ...);
		// int      fputc(int, FILE *);
		func fputc (_: Int, _: stdio_file) -> (_: Int);
		// int      fputs(const char *, FILE *);
		func fputs (_: String, _: stdio_file) -> (_: Int);
		// size_t   fread(void *, size_t, size_t, FILE *);
		func fread (_: stdio_vp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		// FILE    *freopen(const char *, const char *, FILE *);
		// int      fscanf(FILE *, const char *, ...);
		// int      fseek(FILE *, long int, int);
		func fseek (_: stdio_file, _: Int, _: Int) -> (_: Int);
		// int      fseeko(FILE *, off_t, int);
		func fseek (_: stdio_file, _: stdio_off_t, _: Int) -> (_: Int);
		// int      fsetpos(FILE *, const fpos_t *);
		// long int ftell(FILE *);
		func ftell (_: stdio_file) -> (_: Int);
		// off_t    ftello(FILE *);
		func ftello (_: stdio_file) -> (_: stdio_off_t);
		// int      ftrylockfile(FILE *);
		// void     funlockfile(FILE *);
		// size_t   fwrite(const void *, size_t, size_t, FILE *);
		func fwrite (_: stdio_cvp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		func fwrite (_: stdio_vp, _: Int, _: Int, _: stdio_file) -> (_: Int);
		// int      getc(FILE *);
		// int      getchar(void);
		func getchar () -> (_: Int);
		// int      getc_unlocked(FILE *);
		// int      getchar_unlocked(void);
		// int      getopt(int, char * const[], const char); (LEGACY)
		// char    *gets(char *);
		func gets (_: String) -> (_: String);
		// int      getw(FILE *);
		// int      pclose(FILE *);
		// void     perror(const char *);
		// FILE    *popen(const char *, const char *);
		// int      printf(const char *, ...);
		func printf (_: String, _: Real) -> (_: Int);
		func printf (_: String, _: Real, _: Real) -> (_: Int);
		// int      putc(int, FILE *);
		// int      putchar(int);
		// int      puts(const char *);
		func puts (_: String) -> (_: Int);
		// int      putw(int, FILE *);
		// int      remove(const char *);
		// int      rename(const char *, const char *);
		// void     rewind(FILE *);
		// int      scanf(const char *, ...);
		// void     setbuf(FILE *, char *);
		// int      setvbuf(FILE *, char *, int, size_t);
		// int      snprintf(char *, size_t, const char *, ...);
		// int      sprintf(char *, const char *, ...);
		// int      sscanf(const char *, const char *, int ...);
		// char    *tempnam(const char *, const char *);
		// FILE    *tmpfile(void);
		// char    *tmpnam(char *);
		// int      ungetc(int, FILE *);
		// int      vfprintf(FILE *, const char *, va_list);
		// int      vprintf(const char *, va_list);
		// int      vsnprintf(char *, size_t, const char *, va_list);
		// int      vsprintf(char *, const char *, va_list);
	}

	interface "math.h" {
		func sqrt (f: Real) -> (o: Real);
	}

	interface "stdlib.h" {
		// long      a64l(const char *);
		// void      abort(void);
		// int       abs(int);
		// int       atexit(void (*)(void));
		// double    atof(const char *);
		// int       atoi(const char *);
		// long int  atol(const char *);
		// void     *bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
		// void     *calloc(size_t, size_t);
		func malloc (_: Int, _: Int) -> (_: void_ptr);
		// div_t     div(int, int);
		// double    drand48(void);
		// char     *ecvt(double, int, int *, int *);
		// double    erand48(unsigned short int[3]);
		// void      exit(int);
		// char     *fcvt (double, int, int *, int *);
		// void      free(void *);
		func free (_: void_ptr);

		// char     *gcvt(double, int, char *);
		// char     *getenv(const char *);
		// int       getsubopt(char **, char *const *, char **);
		// int       grantpt(int);
		// char     *initstate(unsigned int, char *, size_t);
		// long int  jrand48(unsigned short int[3]);
		// char     *l64a(long);
		// long int  labs(long int);
		// void      lcong48(unsigned short int[7]);
		// ldiv_t    ldiv(long int, long int);
		// long int  lrand48(void);
		// void     *malloc(size_t);
		func malloc (_: Int) -> (_: void_ptr);
		// int       mblen(const char *, size_t);
		// size_t    mbstowcs(wchar_t *, const char *, size_t);
		// int       mbtowc(wchar_t *, const char *, size_t);
		// char     *mktemp(char *);
		// int       mkstemp(char *);
		// long int  mrand48(void);
		// long int  nrand48(unsigned short int [3]);
		// char     *ptsname(int);
		// int       putenv(char *);
		// void      qsort(void *, size_t, size_t, int (*)(const void *, const void *));
		// int       rand(void);
		// int       rand_r(unsigned int *);
		// long      random(void);
		// void     *realloc(void *, size_t);
		func realloc (_: void_ptr, _: Int) -> (_: void_ptr);
		// char     *realpath(const char *, char *);
		// unsigned  short int    seed48(unsigned short int[3]);
		// void      setkey(const char *);
		// char     *setstate(const char *);
		// void      srand(unsigned int);
		// void      srand48(long int);
		// void      srandom(unsigned);
		// double    strtod(const char *, char **);
		// long int  strtol(const char *, char **, int);
		// unsigned long int strtoul(const char *, char **, int);
		// int       system(const char *);
		// int       ttyslot(void); (LEGACY)
		// int       unlockpt(int);
		// void     *valloc(size_t); (LEGACY)
		// size_t    wcstombs(char *, const wchar_t *, size_t);
		// int       wctomb(char *, wchar_t);
	}
}
