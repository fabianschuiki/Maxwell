/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/InvalidType.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::InvalidType;
using ast::NodePtr;
using ast::NodeVector;

InvalidType::InvalidType() : Node() {}

bool InvalidType::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kInvalidType;
}

bool InvalidType::implements(Interface i) {
	if (Node::implements(i)) return true;
	return false;
}

NodePtr InvalidType::copy() {
	Ptr c (new InvalidType);
	return c;
}

bool InvalidType::equalTo(const NodePtr& o) {
	const shared_ptr<InvalidType>& other = boost::dynamic_pointer_cast<InvalidType>(o);
	if (!other) return false;
	return true;
}

std::string InvalidType::describe(int depth) {
	std::stringstream str, b;
	str << "<invalid>";
	return str.str();
}


void InvalidType::encode(Encoder& e) {
}

void InvalidType::decode(Decoder& d) {
}


void InvalidType::updateHierarchyOfChildren() {
}

const NodePtr& InvalidType::resolvePath(const std::string& path) {
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

