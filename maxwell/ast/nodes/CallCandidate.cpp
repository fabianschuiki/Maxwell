/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/CallCandidate.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::CallCandidate;
using ast::NodePtr;
using ast::NodeVector;

CallCandidate::CallCandidate() : Node(),
	interfaceGraph(this),
	interfaceType(this) {}

bool CallCandidate::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kCallCandidate;
}

bool CallCandidate::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kGraphInterface) return true;
	if (i == kTypeInterface) return true;
	return false;
}

NodePtr CallCandidate::copy() {
	Ptr c (new CallCandidate);
	Node::copy(this->func, c->func);
	Node::copy(this->args, c->args);
	Node::copy(this->feasible, c->feasible);
	Node::copy(this->cost, c->cost);
	Node::copy(this->possibleType, c->possibleType);
	Node::copy(this->requiredType, c->requiredType);
	Node::copy(this->actualType, c->actualType);
	Node::copy(this->graphPrev, c->graphPrev);
	return c;
}

bool CallCandidate::equalTo(const NodePtr& o) {
	const shared_ptr<CallCandidate>& other = boost::dynamic_pointer_cast<CallCandidate>(o);
	if (!other) return false;
	if (!equal(this->func, other->func)) return false;
	if (!equal(this->args, other->args)) return false;
	if (!equal(this->feasible, other->feasible)) return false;
	if (!equal(this->cost, other->cost)) return false;
	if (!equal(this->possibleType, other->possibleType)) return false;
	if (!equal(this->requiredType, other->requiredType)) return false;
	if (!equal(this->actualType, other->actualType)) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	return true;
}

std::string CallCandidate::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "CallCandidate{â€¦}";
	str << "CallCandidate{";
	if (this->func) b << "\n  \033[1mfunc\033[0m = \033[36m" << this->func.id << "\033[0m";
	if (!this->args.empty()) b << "\n  \033[1margs\033[0m = " << indent(describeVector(this->args, depth-1));
	b << "\n  \033[1mfeasible\033[0m = \033[34m" << (this->feasible ? "true" : "false") << "\033[0m";
	b << "\n  \033[1mcost\033[0m = \033[35m" << this->cost << "\033[0m";
	if (this->possibleType) b << "\n  \033[1mpossibleType\033[0m = " << indent(this->possibleType->describe(depth-1));
	if (this->requiredType) b << "\n  \033[1mrequiredType\033[0m = " << indent(this->requiredType->describe(depth-1));
	if (this->actualType) b << "\n  \033[1mactualType\033[0m = " << indent(this->actualType->describe(depth-1));
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void CallCandidate::setFunc(const NodePtr& v) {
	if (v && !v->implements(kCallableInterface) && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'func' of " + id.str() + " needs to be of kind {} or implement interface {Callable, Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!v && func) {
		modify("func");
		func.reset();
	}
	if (!func || v->getId() != func.id) {
		modify("func");
		func.set(v);
	}
}

void CallCandidate::setFunc(const NodeId& v) {
	if (v != func.id) {
		modify("func");
		func.set(v);
	}
}

const NodePtr& CallCandidate::getFunc(bool required) {
	const NodePtr& v = func.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have func set to a non-null value.");
	}
	return v;
}


void CallCandidate::setArgs(const NodeVector& v) {
	if (!equal(v, args)) {
		modify("args");
		args = v;
	}
}

const NodeVector& CallCandidate::getArgs(bool required) {
	const NodeVector& v = args;
	return v;
}


void CallCandidate::setFeasible(const bool& v) {
	if (!equal(v, feasible)) {
		modify("feasible");
		feasible = v;
	}
}

const bool& CallCandidate::getFeasible(bool required) {
	const bool& v = feasible;
	return v;
}


void CallCandidate::setCost(const int& v) {
	if (!equal(v, cost)) {
		modify("cost");
		cost = v;
	}
}

const int& CallCandidate::getCost(bool required) {
	const int& v = cost;
	return v;
}


void CallCandidate::setPossibleType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType)) {
		throw std::runtime_error("'possibleType' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, possibleType)) {
		modify("possibleType");
		possibleType = v;
	}
}

const NodePtr& CallCandidate::getPossibleType(bool required) {
	const NodePtr& v = possibleType;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have possibleType set to a non-null value.");
	}
	return v;
}


void CallCandidate::setRequiredType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType)) {
		throw std::runtime_error("'requiredType' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, requiredType)) {
		modify("requiredType");
		requiredType = v;
	}
}

const NodePtr& CallCandidate::getRequiredType(bool required) {
	const NodePtr& v = requiredType;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have requiredType set to a non-null value.");
	}
	return v;
}


void CallCandidate::setActualType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType)) {
		throw std::runtime_error("'actualType' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, actualType)) {
		modify("actualType");
		actualType = v;
	}
}

const NodePtr& CallCandidate::getActualType(bool required) {
	const NodePtr& v = actualType;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have actualType set to a non-null value.");
	}
	return v;
}


void CallCandidate::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void CallCandidate::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& CallCandidate::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void CallCandidate::encode(Encoder& e) {
	e.encode(this->func);
	e.encode(this->args);
	e.encode(this->feasible);
	e.encode(this->cost);
	e.encode(this->possibleType);
	e.encode(this->requiredType);
	e.encode(this->actualType);
	e.encode(this->graphPrev);
}

void CallCandidate::decode(Decoder& d) {
	d.decode(this->func);
	d.decode(this->args);
	d.decode(this->feasible);
	d.decode(this->cost);
	d.decode(this->possibleType);
	d.decode(this->requiredType);
	d.decode(this->actualType);
	d.decode(this->graphPrev);
}


void CallCandidate::updateHierarchyOfChildren() {
	for (unsigned i = 0; i < this->args.size(); i++) {
		char buf[32]; snprintf(buf, 31, "%i", i);
		this->args[i]->updateHierarchy((id + "args") + buf, repository, this);
	}
	if (this->possibleType) this->possibleType->updateHierarchy(id + "possibleType", repository, this);
	if (this->requiredType) this->requiredType->updateHierarchy(id + "requiredType", repository, this);
	if (this->actualType) this->actualType->updateHierarchy(id + "actualType", repository, this);
}

const NodePtr& CallCandidate::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// a.*
		if (size >= 1 && path[0] == 'a') {
			// actualType.*
			if (size >= 10 && path[1] == 'c' && path[2] == 't' && path[3] == 'u' && path[4] == 'a' && path[5] == 'l' && path[6] == 'T' && path[7] == 'y' && path[8] == 'p' && path[9] == 'e') {
				// actualType
				if (size == 10) {
					return getActualType();
				} else if (path[10] == '.') {
					return getActualType()->resolvePath(path.substr(11));
				}
			}
			// args.*
			if (size >= 4 && path[1] == 'r' && path[2] == 'g' && path[3] == 's') {
				// args
				if (size == 4) {
					throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
				} else if (path[4] == '.') {
					size_t dot = path.find(".", 5);
					string idx_str = path.substr(5, dot);
					int idx = atoi(idx_str.c_str());
					const NodeVector& a = getArgs();
					if (idx < 0 || idx >= (int)a.size()) {
						throw std::runtime_error("Index into array '" + path.substr(0, 4) + "' is out of bounds.");
					}
					if (dot == string::npos) {
						return a[idx];
					} else {
						return a[idx]->resolvePath(path.substr(dot + 1));
					}
				}
			}
		}
		// func.*
		if (size >= 4 && path[0] == 'f' && path[1] == 'u' && path[2] == 'n' && path[3] == 'c') {
			// func
			if (size == 4) {
				return getFunc();
			} else if (path[4] == '.') {
				return getFunc()->resolvePath(path.substr(5));
			}
		}
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
		// possibleType.*
		if (size >= 12 && path[0] == 'p' && path[1] == 'o' && path[2] == 's' && path[3] == 's' && path[4] == 'i' && path[5] == 'b' && path[6] == 'l' && path[7] == 'e' && path[8] == 'T' && path[9] == 'y' && path[10] == 'p' && path[11] == 'e') {
			// possibleType
			if (size == 12) {
				return getPossibleType();
			} else if (path[12] == '.') {
				return getPossibleType()->resolvePath(path.substr(13));
			}
		}
		// requiredType.*
		if (size >= 12 && path[0] == 'r' && path[1] == 'e' && path[2] == 'q' && path[3] == 'u' && path[4] == 'i' && path[5] == 'r' && path[6] == 'e' && path[7] == 'd' && path[8] == 'T' && path[9] == 'y' && path[10] == 'p' && path[11] == 'e') {
			// requiredType
			if (size == 12) {
				return getRequiredType();
			} else if (path[12] == '.') {
				return getRequiredType()->resolvePath(path.substr(13));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector CallCandidate::getChildren() {
	NodeVector v;
	v.insert(v.end(), this->args.begin(), this->args.end());
	return v;
}

