Terminals which are not used

   "symbol"
   "nil constant"
   "incase keyword"


State 213 conflicts: 1 shift/reduce


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 body: "opening braces {" "closing braces }"
   24     | "opening braces {" stmts "closing braces }"

   25 stmts: stmt
   26      | stmts stmt

   27 stmt: expr ";"
   28     | if_stmt
   29     | for_stmt
   30     | "opening braces {" "closing braces }"
   31     | "opening braces {" stmts "closing braces }"

   32 if_stmt: "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt

   34 for_stmt: "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt

   36 primary_expr: "identifier"
   37             | "opening paranthesis (" expr "closing paranthesis )"
   38             | "number constant"
   39             | "string constant"
   40             | "opening bracket [" expr_list "closing bracket ]"
   41             | "opening braces {" expr_list "closing braces }"
   42             | "opening braces {" map_expr_pairs "closing braces }"
   43             | if_expr

   44 map_expr_pairs: map_expr_pair
   45               | map_expr_pairs "," map_expr_pair

   46 map_expr_pair: primary_expr ":" expr

   47 if_expr: "opening braces {" if_expr_conds "closing braces }"
   48        | "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"

   49 if_expr_conds: if_expr_cond
   50              | if_expr_conds "," if_expr_cond

   51 if_expr_cond: expr "if keyword" expr

   52 postfix_expr: primary_expr
   53             | postfix_expr OPERATOR
   54             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | postfix_expr "." "identifier"
   57             | "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   59 call_args: call_arg
   60          | call_args "," call_arg

   61 call_arg: "identifier" ":" expr
   62         | expr

   63 prefix_expr: postfix_expr
   64            | any_operator prefix_expr

   65 any_operator: MULTIPLICATIVE_OPERATOR
   66             | ADDITIVE_OPERATOR
   67             | RELATIONAL_OPERATOR
   68             | OPERATOR

   69 multiplicative_expr: prefix_expr
   70                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   71 additive_expr: multiplicative_expr
   72              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   73 relational_expr: additive_expr
   74                | relational_expr RELATIONAL_OPERATOR additive_expr

   75 equality_expr: relational_expr
   76              | equality_expr EQUALITY_OPERATOR relational_expr

   77 and_expr: equality_expr
   78         | and_expr AND_OPERATOR equality_expr

   79 or_expr: and_expr
   80        | or_expr OR_OPERATOR and_expr

   81 assignment_expr: or_expr
   82                | assignment_expr "assignment operator =" or_expr

   83 var_expr: "var keyword" "identifier" typeexpr
   84         | "var keyword" "identifier"

   85 expr: assignment_expr
   86     | var_expr
   87     | var_expr "assignment operator =" assignment_expr

   88 expr_list: expr
   89          | expr_list "," expr

   90 typeexpr: nonunion_typeexpr
   91         | union_typeexpr

   92 nonunion_typeexpr: "identifier"
   93                  | tuple_typeexpr
   94                  | qualified_typeexpr
   95                  | specialized_typeexpr

   96 union_typeexpr: union_typeexprs

   97 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   99 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

  100 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
  101                    | tuple_typeexpr_args "," tuple_typeexpr_arg

  102 tuple_typeexpr_arg: typeexpr
  103                   | "identifier" ":" typeexpr

  104 qualified_typeexpr: qualified_typeexpr_qualifiers

  105 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
  106                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

  107 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

  108 specialized_typeexpr_specs: typeexpr
  109                           | specialized_typeexpr_specs "," typeexpr

  110 qualified_typeexpr_qualifier: structure_qualifier
  111                             | interface_qualifier
  112                             | native_qualifier
  113                             | range_qualifier

  114 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

  116 structure_qualifier_decl: "value keyword"
  117                         | "object keyword"

  118 structure_qualifier_stmts: structure_qualifier_stmt
  119                          | structure_qualifier_stmts structure_qualifier_stmt

  120 structure_qualifier_stmt: "identifier" ";"
  121                         | "identifier" typeexpr ";"

  122 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
  123                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

  124 interface_qualifier_stmts: interface_qualifier_stmt
  125                          | interface_qualifier_stmts interface_qualifier_stmt

  126 interface_qualifier_stmt: "identifier"

  127 native_qualifier: "native keyword" "identifier"

  128 range_qualifier: range_qualifier_decl
  129                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

  130 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 36 54 55 56 57 58 61 83 84 92 103 120
    121 126 127 130
"number constant" (259) 38 129
"string constant" (260) 39
MULTIPLICATIVE_OPERATOR (261) 65 70
ADDITIVE_OPERATOR (262) 66 72
RELATIONAL_OPERATOR (263) 67 74
EQUALITY_OPERATOR (264) 76
AND_OPERATOR (265) 78
OR_OPERATOR (266) 80
OPERATOR (267) 53 68
"symbol" (268)
"func keyword" (269) 10 11 12
"var keyword" (270) 83 84
"type keyword" (271) 22
"unary keyword" (272) 12
"value keyword" (273) 116
"object keyword" (274) 117
"interface keyword" (275) 122 123
"native keyword" (276) 127
"range keyword" (277) 130
"if keyword" (278) 32 33 51
"else keyword" (279) 33
"for keyword" (280) 34 35
"nil constant" (281)
"incase keyword" (282)
"otherwise keyword" (283) 48
"opening paranthesis (" (284) 13 15 32 33 34 35 37 54 55 57 58 99 129
"closing paranthesis )" (285) 13 15 32 33 34 35 37 54 55 57 58 99 129
"opening braces {" (286) 23 24 30 31 41 42 47 48 114 115 122 123
"closing braces }" (287) 23 24 30 31 41 42 47 48 114 115 122 123
"opening bracket [" (288) 40 107
"closing bracket ]" (289) 40 107
"vertical pipe |" (290) 97 98
"." (291) 54 55 56
"," (292) 17 45 48 50 60 89 100 101 109 129
":" (293) 46 61 103
";" (294) 27 35 120 121
"right arrow ->" (295) 8 9
"assignment operator =" (296) 82 87


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
root (43)
    on left: 1, on right: 0
root_stmts (44)
    on left: 2 3, on right: 1 2
root_stmt (45)
    on left: 4 5, on right: 2 3
func_decl (46)
    on left: 6 7 8 9, on right: 4
func_decl_name (47)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (48)
    on left: 13 14 15, on right: 7 8 9
func_args (49)
    on left: 16 17, on right: 15 17
func_arg (50)
    on left: 18 19, on right: 14 16 17
type_decl (51)
    on left: 20 21, on right: 5
type_decl_name (52)
    on left: 22, on right: 20 21
body (53)
    on left: 23 24, on right: 6 7 8 9
stmts (54)
    on left: 25 26, on right: 24 26 31
stmt (55)
    on left: 27 28 29 30 31, on right: 25 26 32 33 34 35
if_stmt (56)
    on left: 32 33, on right: 28
for_stmt (57)
    on left: 34 35, on right: 29
primary_expr (58)
    on left: 36 37 38 39 40 41 42 43, on right: 46 52
map_expr_pairs (59)
    on left: 44 45, on right: 42 45
map_expr_pair (60)
    on left: 46, on right: 44 45
if_expr (61)
    on left: 47 48, on right: 43
if_expr_conds (62)
    on left: 49 50, on right: 47 48 50
if_expr_cond (63)
    on left: 51, on right: 49 50
postfix_expr (64)
    on left: 52 53 54 55 56 57 58, on right: 53 54 55 56 63
call_args (65)
    on left: 59 60, on right: 55 58 60
call_arg (66)
    on left: 61 62, on right: 59 60
prefix_expr (67)
    on left: 63 64, on right: 64 69 70
any_operator (68)
    on left: 65 66 67 68, on right: 11 12 64
multiplicative_expr (69)
    on left: 69 70, on right: 70 71 72
additive_expr (70)
    on left: 71 72, on right: 72 73 74
relational_expr (71)
    on left: 73 74, on right: 74 75 76
equality_expr (72)
    on left: 75 76, on right: 76 77 78
and_expr (73)
    on left: 77 78, on right: 78 79 80
or_expr (74)
    on left: 79 80, on right: 80 81 82
assignment_expr (75)
    on left: 81 82, on right: 82 85 87
var_expr (76)
    on left: 83 84, on right: 86 87
expr (77)
    on left: 85 86 87, on right: 27 32 33 34 35 37 46 48 51 61 62 88
    89
expr_list (78)
    on left: 88 89, on right: 40 41 89
typeexpr (79)
    on left: 90 91, on right: 19 21 83 102 103 108 109 121
nonunion_typeexpr (80)
    on left: 92 93 94 95, on right: 90 97 98 107
union_typeexpr (81)
    on left: 96, on right: 91
union_typeexprs (82)
    on left: 97 98, on right: 96 98
tuple_typeexpr (83)
    on left: 99, on right: 93
tuple_typeexpr_args (84)
    on left: 100 101, on right: 99 101
tuple_typeexpr_arg (85)
    on left: 102 103, on right: 100 101
qualified_typeexpr (86)
    on left: 104, on right: 94
qualified_typeexpr_qualifiers (87)
    on left: 105 106, on right: 104 106
specialized_typeexpr (88)
    on left: 107, on right: 95
specialized_typeexpr_specs (89)
    on left: 108 109, on right: 107 109
qualified_typeexpr_qualifier (90)
    on left: 110 111 112 113, on right: 105 106
structure_qualifier (91)
    on left: 114 115, on right: 110
structure_qualifier_decl (92)
    on left: 116 117, on right: 114 115
structure_qualifier_stmts (93)
    on left: 118 119, on right: 115 119
structure_qualifier_stmt (94)
    on left: 120 121, on right: 118 119
interface_qualifier (95)
    on left: 122 123, on right: 111
interface_qualifier_stmts (96)
    on left: 124 125, on right: 123 125
interface_qualifier_stmt (97)
    on left: 126, on right: 124 125
native_qualifier (98)
    on left: 127, on right: 112
range_qualifier (99)
    on left: 128 129, on right: 113
range_qualifier_decl (100)
    on left: 130, on right: 128 129


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    body             go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 34
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   65 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 65 (any_operator)


state 12

   66 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 66 (any_operator)


state 13

   67 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 67 (any_operator)


state 14

   68 any_operator: OPERATOR .

    $default  reduce using rule 68 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 49


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 50
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 51

    func_args  go to state 52
    func_arg   go to state 53


state 22

   23 body: "opening braces {" . "closing braces }"
   24     | "opening braces {" . stmts "closing braces }"
   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "closing braces }"       shift, and go to state 62
    "opening bracket ["      shift, and go to state 63

    stmts                go to state 64
    stmt                 go to state 65
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 82
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 83

    body  go to state 84


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 27

   92 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 92 (nonunion_typeexpr)


state 28

  116 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 116 (structure_qualifier_decl)


state 29

  117 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 117 (structure_qualifier_decl)


state 30

  122 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
  123                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 85


state 31

  127 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 86


state 32

  130 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 87


state 33

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   99               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
  100 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
  101                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
  102 tuple_typeexpr_arg: . typeexpr
  103                   | . "identifier" ":" typeexpr
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 88
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 89
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_args            go to state 90
    tuple_typeexpr_arg             go to state 91
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 34

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 35

   90 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   97 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr
  107 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 92
    "vertical pipe |"    shift, and go to state 93

    $default  reduce using rule 90 (typeexpr)


state 36

   91 typeexpr: union_typeexpr .

    $default  reduce using rule 91 (typeexpr)


state 37

   96 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   98 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 94

    $default  reduce using rule 96 (union_typeexpr)


state 38

   93 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 93 (nonunion_typeexpr)


state 39

   94 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 94 (nonunion_typeexpr)


state 40

  104 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  106 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 104 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 95
    structure_qualifier           go to state 43
    structure_qualifier_decl      go to state 44
    interface_qualifier           go to state 45
    native_qualifier              go to state 46
    range_qualifier               go to state 47
    range_qualifier_decl          go to state 48


state 41

   95 nonunion_typeexpr: specialized_typeexpr .

    $default  reduce using rule 95 (nonunion_typeexpr)


state 42

  105 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 105 (qualified_typeexpr_qualifiers)


state 43

  110 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 110 (qualified_typeexpr_qualifier)


state 44

  114 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
  115                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 96


state 45

  111 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 111 (qualified_typeexpr_qualifier)


state 46

  112 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 112 (qualified_typeexpr_qualifier)


state 47

  113 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 113 (qualified_typeexpr_qualifier)


state 48

  128 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "opening bracket [", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  129                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 97

    $default  reduce using rule 128 (range_qualifier)


state 49

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 50

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 51

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 52

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 98
    ","                      shift, and go to state 99


state 53

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 54

   36 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ":", ";", "assignment operator ="]
   57 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   58             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 100

    $default  reduce using rule 36 (primary_expr)


state 55

   38 primary_expr: "number constant" .

    $default  reduce using rule 38 (primary_expr)


state 56

   39 primary_expr: "string constant" .

    $default  reduce using rule 39 (primary_expr)


state 57

   83 var_expr: "var keyword" . "identifier" typeexpr
   84         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 101


state 58

   32 if_stmt: "if keyword" . "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | "if keyword" . "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt

    "opening paranthesis ("  shift, and go to state 102


state 59

   34 for_stmt: "for keyword" . "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | "for keyword" . "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt

    "opening paranthesis ("  shift, and go to state 103


state 60

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   37             | "opening paranthesis (" . expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 105


state 61

   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   30     | "opening braces {" . "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   31     | "opening braces {" . stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   41             | "opening braces {" . expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   42             | "opening braces {" . map_expr_pairs "closing braces }"
   43             | . if_expr
   44 map_expr_pairs: . map_expr_pair
   45               | . map_expr_pairs "," map_expr_pair
   46 map_expr_pair: . primary_expr ":" expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   47        | "opening braces {" . if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   48        | "opening braces {" . if_expr_conds "," expr "otherwise keyword" "closing braces }"
   49 if_expr_conds: . if_expr_cond
   50              | . if_expr_conds "," if_expr_cond
   51 if_expr_cond: . expr "if keyword" expr
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr
   88 expr_list: . expr
   89          | . expr_list "," expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "closing braces }"       shift, and go to state 106
    "opening bracket ["      shift, and go to state 63

    stmts                go to state 107
    stmt                 go to state 65
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 108
    map_expr_pairs       go to state 109
    map_expr_pair        go to state 110
    if_expr              go to state 69
    if_expr_conds        go to state 111
    if_expr_cond         go to state 112
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 113
    expr_list            go to state 114


state 62

   23 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 23 (body)


state 63

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   40             | "opening bracket [" . expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr
   88 expr_list: . expr
   89          | . expr_list "," expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 115
    expr_list            go to state 116


state 64

   24 body: "opening braces {" stmts . "closing braces }"
   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "closing braces }"       shift, and go to state 117
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 118
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 65

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


state 66

   28 stmt: if_stmt .

    $default  reduce using rule 28 (stmt)


state 67

   29 stmt: for_stmt .

    $default  reduce using rule 29 (stmt)


state 68

   52 postfix_expr: primary_expr .

    $default  reduce using rule 52 (postfix_expr)


state 69

   43 primary_expr: if_expr .

    $default  reduce using rule 43 (primary_expr)


state 70

   53 postfix_expr: postfix_expr . OPERATOR
   54             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | postfix_expr . "." "identifier"
   63 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 119
    "."       shift, and go to state 120

    $default  reduce using rule 63 (prefix_expr)


state 71

   69 multiplicative_expr: prefix_expr .

    $default  reduce using rule 69 (multiplicative_expr)


state 72

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   64            | any_operator . prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr  go to state 68
    if_expr       go to state 69
    postfix_expr  go to state 70
    prefix_expr   go to state 121
    any_operator  go to state 72


state 73

   70 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 122

    $default  reduce using rule 71 (additive_expr)


state 74

   72 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 123

    $default  reduce using rule 73 (relational_expr)


state 75

   74 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   75 equality_expr: relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 124

    $default  reduce using rule 75 (equality_expr)


state 76

   76 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   77 and_expr: equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 125

    $default  reduce using rule 77 (and_expr)


state 77

   78 and_expr: and_expr . AND_OPERATOR equality_expr
   79 or_expr: and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 126

    $default  reduce using rule 79 (or_expr)


state 78

   80 or_expr: or_expr . OR_OPERATOR and_expr
   81 assignment_expr: or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 127

    $default  reduce using rule 81 (assignment_expr)


state 79

   82 assignment_expr: assignment_expr . "assignment operator =" or_expr
   85 expr: assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 128

    $default  reduce using rule 85 (expr)


state 80

   86 expr: var_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]
   87     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 129

    $default  reduce using rule 86 (expr)


state 81

   27 stmt: expr . ";"

    ";"  shift, and go to state 130


state 82

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 131


state 83

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 132
    func_arg         go to state 25


state 84

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 85

  122 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
  123                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
  124 interface_qualifier_stmts: . interface_qualifier_stmt
  125                          | . interface_qualifier_stmts interface_qualifier_stmt
  126 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 133
    "closing braces }"  shift, and go to state 134

    interface_qualifier_stmts  go to state 135
    interface_qualifier_stmt   go to state 136


state 86

  127 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 127 (native_qualifier)


state 87

  130 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 130 (range_qualifier_decl)


state 88

   92 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "opening bracket [", "vertical pipe |", ","]
  103 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 137

    $default  reduce using rule 92 (nonunion_typeexpr)


state 89

  102 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 102 (tuple_typeexpr_arg)


state 90

   99 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
  101 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 138
    ","                      shift, and go to state 139


state 91

  100 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 140


state 92

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  107                     | nonunion_typeexpr "opening bracket [" . specialized_typeexpr_specs "closing bracket ]"
  108 specialized_typeexpr_specs: . typeexpr
  109                           | . specialized_typeexpr_specs "," typeexpr
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 141
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    specialized_typeexpr_specs     go to state 142
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 93

   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   97 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 143
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 94

   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   98 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 144
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 95

  106 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 106 (qualified_typeexpr_qualifiers)


state 96

  114 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
  115                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
  118 structure_qualifier_stmts: . structure_qualifier_stmt
  119                          | . structure_qualifier_stmts structure_qualifier_stmt
  120 structure_qualifier_stmt: . "identifier" ";"
  121                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 145
    "closing braces }"  shift, and go to state 146

    structure_qualifier_stmts  go to state 147
    structure_qualifier_stmt   go to state 148


state 97

  129 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 149


state 98

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 99

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 150


state 100

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   57             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   58             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   59 call_args: . call_arg
   60          | . call_args "," call_arg
   61 call_arg: . "identifier" ":" expr
   62         | . expr
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 151
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "closing paranthesis )"  shift, and go to state 152
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    call_args            go to state 153
    call_arg             go to state 154
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 155


state 101

   83 var_expr: "var keyword" "identifier" . typeexpr
   84         | "var keyword" "identifier" .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]
   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 84 (var_expr)

    typeexpr                       go to state 156
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 102

   32 if_stmt: "if keyword" "opening paranthesis (" . expr "closing paranthesis )" stmt
   33        | "if keyword" "opening paranthesis (" . expr "closing paranthesis )" stmt "else keyword" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 157


state 103

   34 for_stmt: "for keyword" "opening paranthesis (" . expr "closing paranthesis )" stmt
   35         | "for keyword" "opening paranthesis (" . expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 158


state 104

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   41             | "opening braces {" . expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   42             | "opening braces {" . map_expr_pairs "closing braces }"
   43             | . if_expr
   44 map_expr_pairs: . map_expr_pair
   45               | . map_expr_pairs "," map_expr_pair
   46 map_expr_pair: . primary_expr ":" expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   47        | "opening braces {" . if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   48        | "opening braces {" . if_expr_conds "," expr "otherwise keyword" "closing braces }"
   49 if_expr_conds: . if_expr_cond
   50              | . if_expr_conds "," if_expr_cond
   51 if_expr_cond: . expr "if keyword" expr
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr
   88 expr_list: . expr
   89          | . expr_list "," expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 108
    map_expr_pairs       go to state 109
    map_expr_pair        go to state 110
    if_expr              go to state 69
    if_expr_conds        go to state 111
    if_expr_cond         go to state 112
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 159
    expr_list            go to state 114


state 105

   37 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 160


state 106

   30 stmt: "opening braces {" "closing braces }" .

    $default  reduce using rule 30 (stmt)


state 107

   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   31     | "opening braces {" stmts . "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "closing braces }"       shift, and go to state 161
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 118
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 108

   46 map_expr_pair: primary_expr . ":" expr
   52 postfix_expr: primary_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "closing braces }", ".", ",", ";", "assignment operator ="]

    ":"  shift, and go to state 162

    $default  reduce using rule 52 (postfix_expr)


state 109

   42 primary_expr: "opening braces {" map_expr_pairs . "closing braces }"
   45 map_expr_pairs: map_expr_pairs . "," map_expr_pair

    "closing braces }"  shift, and go to state 163
    ","                 shift, and go to state 164


state 110

   44 map_expr_pairs: map_expr_pair .

    $default  reduce using rule 44 (map_expr_pairs)


state 111

   47 if_expr: "opening braces {" if_expr_conds . "closing braces }"
   48        | "opening braces {" if_expr_conds . "," expr "otherwise keyword" "closing braces }"
   50 if_expr_conds: if_expr_conds . "," if_expr_cond

    "closing braces }"  shift, and go to state 165
    ","                 shift, and go to state 166


state 112

   49 if_expr_conds: if_expr_cond .

    $default  reduce using rule 49 (if_expr_conds)


state 113

   27 stmt: expr . ";"
   51 if_expr_cond: expr . "if keyword" expr
   88 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 167
    ";"           shift, and go to state 130

    $default  reduce using rule 88 (expr_list)


state 114

   41 primary_expr: "opening braces {" expr_list . "closing braces }"
   89 expr_list: expr_list . "," expr

    "closing braces }"  shift, and go to state 168
    ","                 shift, and go to state 169


state 115

   88 expr_list: expr .

    $default  reduce using rule 88 (expr_list)


state 116

   40 primary_expr: "opening bracket [" expr_list . "closing bracket ]"
   89 expr_list: expr_list . "," expr

    "closing bracket ]"  shift, and go to state 170
    ","                  shift, and go to state 169


state 117

   24 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 24 (body)


state 118

   26 stmts: stmts stmt .

    $default  reduce using rule 26 (stmts)


state 119

   53 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 53 (postfix_expr)


state 120

   54 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 171


state 121

   64 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 64 (prefix_expr)


state 122

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   70 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr  go to state 68
    if_expr       go to state 69
    postfix_expr  go to state 70
    prefix_expr   go to state 172
    any_operator  go to state 72


state 123

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 173


state 124

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 174


state 125

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   76 equality_expr: equality_expr EQUALITY_OPERATOR . relational_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 175


state 126

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   78 and_expr: and_expr AND_OPERATOR . equality_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 176


state 127

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   80 or_expr: or_expr OR_OPERATOR . and_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 177


state 128

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   82 assignment_expr: assignment_expr "assignment operator =" . or_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 178


state 129

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   87 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 179


state 130

   27 stmt: expr ";" .

    $default  reduce using rule 27 (stmt)


state 131

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 132

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 180


state 133

  126 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 126 (interface_qualifier_stmt)


state 134

  122 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 122 (interface_qualifier)


state 135

  123 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
  125 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
  126 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 133
    "closing braces }"  shift, and go to state 181

    interface_qualifier_stmt  go to state 182


state 136

  124 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 124 (interface_qualifier_stmts)


state 137

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  103 tuple_typeexpr_arg: "identifier" ":" . typeexpr
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 183
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 138

   99 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 99 (tuple_typeexpr)


state 139

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  101 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
  102 tuple_typeexpr_arg: . typeexpr
  103                   | . "identifier" ":" typeexpr
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 88
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 89
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 184
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 140

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  100 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
  102 tuple_typeexpr_arg: . typeexpr
  103                   | . "identifier" ":" typeexpr
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 88
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 89
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 185
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 141

  108 specialized_typeexpr_specs: typeexpr .

    $default  reduce using rule 108 (specialized_typeexpr_specs)


state 142

  107 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs . "closing bracket ]"
  109 specialized_typeexpr_specs: specialized_typeexpr_specs . "," typeexpr

    "closing bracket ]"  shift, and go to state 186
    ","                  shift, and go to state 187


state 143

   97 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  107 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 92

    $default  reduce using rule 97 (union_typeexprs)


state 144

   98 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "if keyword", "otherwise keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  107 specialized_typeexpr: nonunion_typeexpr . "opening bracket [" specialized_typeexpr_specs "closing bracket ]"

    "opening bracket ["  shift, and go to state 92

    $default  reduce using rule 98 (union_typeexprs)


state 145

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  120 structure_qualifier_stmt: "identifier" . ";"
  121                         | "identifier" . typeexpr ";"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    ";"                      shift, and go to state 188

    typeexpr                       go to state 189
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 146

  114 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 114 (structure_qualifier)


state 147

  115 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
  119 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
  120 structure_qualifier_stmt: . "identifier" ";"
  121                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 145
    "closing braces }"  shift, and go to state 190

    structure_qualifier_stmt  go to state 191


state 148

  118 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 118 (structure_qualifier_stmts)


state 149

  129 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 192


state 150

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 151

   36 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   57 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   58             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   61 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 100
    ":"                      shift, and go to state 193

    $default  reduce using rule 36 (primary_expr)


state 152

   57 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 57 (postfix_expr)


state 153

   58 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   60 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 194
    ","                      shift, and go to state 195


state 154

   59 call_args: call_arg .

    $default  reduce using rule 59 (call_args)


state 155

   62 call_arg: expr .

    $default  reduce using rule 62 (call_arg)


state 156

   83 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 83 (var_expr)


state 157

   32 if_stmt: "if keyword" "opening paranthesis (" expr . "closing paranthesis )" stmt
   33        | "if keyword" "opening paranthesis (" expr . "closing paranthesis )" stmt "else keyword" stmt

    "closing paranthesis )"  shift, and go to state 196


state 158

   34 for_stmt: "for keyword" "opening paranthesis (" expr . "closing paranthesis )" stmt
   35         | "for keyword" "opening paranthesis (" expr . ";" expr ";" expr "closing paranthesis )" stmt

    "closing paranthesis )"  shift, and go to state 197
    ";"                      shift, and go to state 198


state 159

   51 if_expr_cond: expr . "if keyword" expr
   88 expr_list: expr .  ["closing braces }", ","]

    "if keyword"  shift, and go to state 167

    $default  reduce using rule 88 (expr_list)


state 160

   37 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 37 (primary_expr)


state 161

   31 stmt: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 31 (stmt)


state 162

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   46 map_expr_pair: primary_expr ":" . expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 199


state 163

   42 primary_expr: "opening braces {" map_expr_pairs "closing braces }" .

    $default  reduce using rule 42 (primary_expr)


state 164

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   45 map_expr_pairs: map_expr_pairs "," . map_expr_pair
   46 map_expr_pair: . primary_expr ":" expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"

    "identifier"             shift, and go to state 200
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr   go to state 201
    map_expr_pair  go to state 202
    if_expr        go to state 69


state 165

   47 if_expr: "opening braces {" if_expr_conds "closing braces }" .

    $default  reduce using rule 47 (if_expr)


state 166

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   48        | "opening braces {" if_expr_conds "," . expr "otherwise keyword" "closing braces }"
   50 if_expr_conds: if_expr_conds "," . if_expr_cond
   51 if_expr_cond: . expr "if keyword" expr
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    if_expr_cond         go to state 203
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 204


state 167

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   51 if_expr_cond: expr "if keyword" . expr
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 205


state 168

   41 primary_expr: "opening braces {" expr_list "closing braces }" .

    $default  reduce using rule 41 (primary_expr)


state 169

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr
   89 expr_list: expr_list "," . expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 206


state 170

   40 primary_expr: "opening bracket [" expr_list "closing bracket ]" .

    $default  reduce using rule 40 (primary_expr)


state 171

   54 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   55             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   56             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 207

    $default  reduce using rule 56 (postfix_expr)


state 172

   70 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 70 (multiplicative_expr)


state 173

   70 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   72 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 122

    $default  reduce using rule 72 (additive_expr)


state 174

   72 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   74 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 123

    $default  reduce using rule 74 (relational_expr)


state 175

   74 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   76 equality_expr: equality_expr EQUALITY_OPERATOR relational_expr .  [EQUALITY_OPERATOR, AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 124

    $default  reduce using rule 76 (equality_expr)


state 176

   76 equality_expr: equality_expr . EQUALITY_OPERATOR relational_expr
   78 and_expr: and_expr AND_OPERATOR equality_expr .  [AND_OPERATOR, OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    EQUALITY_OPERATOR  shift, and go to state 125

    $default  reduce using rule 78 (and_expr)


state 177

   78 and_expr: and_expr . AND_OPERATOR equality_expr
   80 or_expr: or_expr OR_OPERATOR and_expr .  [OR_OPERATOR, "if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    AND_OPERATOR  shift, and go to state 126

    $default  reduce using rule 80 (or_expr)


state 178

   80 or_expr: or_expr . OR_OPERATOR and_expr
   82 assignment_expr: assignment_expr "assignment operator =" or_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OR_OPERATOR  shift, and go to state 127

    $default  reduce using rule 82 (assignment_expr)


state 179

   82 assignment_expr: assignment_expr . "assignment operator =" or_expr
   87 expr: var_expr "assignment operator =" assignment_expr .  ["if keyword", "otherwise keyword", "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 128

    $default  reduce using rule 87 (expr)


state 180

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 181

  123 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 123 (interface_qualifier)


state 182

  125 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 125 (interface_qualifier_stmts)


state 183

  103 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 103 (tuple_typeexpr_arg)


state 184

  101 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 101 (tuple_typeexpr_args)


state 185

  100 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 100 (tuple_typeexpr_args)


state 186

  107 specialized_typeexpr: nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]" .

    $default  reduce using rule 107 (specialized_typeexpr)


state 187

   90 typeexpr: . nonunion_typeexpr
   91         | . union_typeexpr
   92 nonunion_typeexpr: . "identifier"
   93                  | . tuple_typeexpr
   94                  | . qualified_typeexpr
   95                  | . specialized_typeexpr
   96 union_typeexpr: . union_typeexprs
   97 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   98                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   99 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
  104 qualified_typeexpr: . qualified_typeexpr_qualifiers
  105 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
  106                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
  107 specialized_typeexpr: . nonunion_typeexpr "opening bracket [" specialized_typeexpr_specs "closing bracket ]"
  109 specialized_typeexpr_specs: specialized_typeexpr_specs "," . typeexpr
  110 qualified_typeexpr_qualifier: . structure_qualifier
  111                             | . interface_qualifier
  112                             | . native_qualifier
  113                             | . range_qualifier
  114 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
  115                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
  116 structure_qualifier_decl: . "value keyword"
  117                         | . "object keyword"
  122 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
  123                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  127 native_qualifier: . "native keyword" "identifier"
  128 range_qualifier: . range_qualifier_decl
  129                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  130 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 208
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    specialized_typeexpr           go to state 41
    qualified_typeexpr_qualifier   go to state 42
    structure_qualifier            go to state 43
    structure_qualifier_decl       go to state 44
    interface_qualifier            go to state 45
    native_qualifier               go to state 46
    range_qualifier                go to state 47
    range_qualifier_decl           go to state 48


state 188

  120 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 120 (structure_qualifier_stmt)


state 189

  121 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 209


state 190

  115 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 115 (structure_qualifier)


state 191

  119 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 119 (structure_qualifier_stmts)


state 192

  129 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 210


state 193

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   61 call_arg: "identifier" ":" . expr
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 211


state 194

   58 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 58 (postfix_expr)


state 195

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   60 call_args: call_args "," . call_arg
   61 call_arg: . "identifier" ":" expr
   62         | . expr
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 151
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    call_arg             go to state 212
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 155


state 196

   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   32        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" . stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   33        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" . stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 213
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 197

   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   34         | "for keyword" "opening paranthesis (" expr "closing paranthesis )" . stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 214
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 198

   35 for_stmt: "for keyword" "opening paranthesis (" expr ";" . expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 215


state 199

   46 map_expr_pair: primary_expr ":" expr .

    $default  reduce using rule 46 (map_expr_pair)


state 200

   36 primary_expr: "identifier" .

    $default  reduce using rule 36 (primary_expr)


state 201

   46 map_expr_pair: primary_expr . ":" expr

    ":"  shift, and go to state 162


state 202

   45 map_expr_pairs: map_expr_pairs "," map_expr_pair .

    $default  reduce using rule 45 (map_expr_pairs)


state 203

   50 if_expr_conds: if_expr_conds "," if_expr_cond .

    $default  reduce using rule 50 (if_expr_conds)


state 204

   48 if_expr: "opening braces {" if_expr_conds "," expr . "otherwise keyword" "closing braces }"
   51 if_expr_cond: expr . "if keyword" expr

    "if keyword"         shift, and go to state 167
    "otherwise keyword"  shift, and go to state 216


state 205

   51 if_expr_cond: expr "if keyword" expr .

    $default  reduce using rule 51 (if_expr_cond)


state 206

   89 expr_list: expr_list "," expr .

    $default  reduce using rule 89 (expr_list)


state 207

   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   54             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   55             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   59 call_args: . call_arg
   60          | . call_args "," call_arg
   61 call_arg: . "identifier" ":" expr
   62         | . expr
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 151
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "closing paranthesis )"  shift, and go to state 217
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    call_args            go to state 218
    call_arg             go to state 154
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 155


state 208

  109 specialized_typeexpr_specs: specialized_typeexpr_specs "," typeexpr .

    $default  reduce using rule 109 (specialized_typeexpr_specs)


state 209

  121 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 121 (structure_qualifier_stmt)


state 210

  129 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 219


state 211

   61 call_arg: "identifier" ":" expr .

    $default  reduce using rule 61 (call_arg)


state 212

   60 call_args: call_args "," call_arg .

    $default  reduce using rule 60 (call_args)


state 213

   32 if_stmt: "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt .  ["identifier", "number constant", "string constant", MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "var keyword", "if keyword", "else keyword", "for keyword", "opening paranthesis (", "opening braces {", "closing braces }", "opening bracket ["]
   33        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt . "else keyword" stmt

    "else keyword"  shift, and go to state 220

    "else keyword"  [reduce using rule 32 (if_stmt)]
    $default        reduce using rule 32 (if_stmt)


state 214

   34 for_stmt: "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt .

    $default  reduce using rule 34 (for_stmt)


state 215

   35 for_stmt: "for keyword" "opening paranthesis (" expr ";" expr . ";" expr "closing paranthesis )" stmt

    ";"  shift, and go to state 221


state 216

   48 if_expr: "opening braces {" if_expr_conds "," expr "otherwise keyword" . "closing braces }"

    "closing braces }"  shift, and go to state 222


state 217

   54 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 54 (postfix_expr)


state 218

   55 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   60 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 223
    ","                      shift, and go to state 195


state 219

  129 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 129 (range_qualifier)


state 220

   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   33        | "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" . stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 224
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 221

   35 for_stmt: "for keyword" "opening paranthesis (" expr ";" expr ";" . expr "closing paranthesis )" stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 104
    "opening bracket ["      shift, and go to state 63

    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 225


state 222

   48 if_expr: "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }" .

    $default  reduce using rule 48 (if_expr)


state 223

   55 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 55 (postfix_expr)


state 224

   33 if_stmt: "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt .

    $default  reduce using rule 33 (if_stmt)


state 225

   35 for_stmt: "for keyword" "opening paranthesis (" expr ";" expr ";" expr . "closing paranthesis )" stmt

    "closing paranthesis )"  shift, and go to state 226


state 226

   27 stmt: . expr ";"
   28     | . if_stmt
   29     | . for_stmt
   30     | . "opening braces {" "closing braces }"
   31     | . "opening braces {" stmts "closing braces }"
   32 if_stmt: . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   33        | . "if keyword" "opening paranthesis (" expr "closing paranthesis )" stmt "else keyword" stmt
   34 for_stmt: . "for keyword" "opening paranthesis (" expr "closing paranthesis )" stmt
   35         | . "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt
   35         | "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" . stmt
   36 primary_expr: . "identifier"
   37             | . "opening paranthesis (" expr "closing paranthesis )"
   38             | . "number constant"
   39             | . "string constant"
   40             | . "opening bracket [" expr_list "closing bracket ]"
   41             | . "opening braces {" expr_list "closing braces }"
   42             | . "opening braces {" map_expr_pairs "closing braces }"
   43             | . if_expr
   47 if_expr: . "opening braces {" if_expr_conds "closing braces }"
   48        | . "opening braces {" if_expr_conds "," expr "otherwise keyword" "closing braces }"
   52 postfix_expr: . primary_expr
   53             | . postfix_expr OPERATOR
   54             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   55             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   56             | . postfix_expr "." "identifier"
   57             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   58             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   63 prefix_expr: . postfix_expr
   64            | . any_operator prefix_expr
   65 any_operator: . MULTIPLICATIVE_OPERATOR
   66             | . ADDITIVE_OPERATOR
   67             | . RELATIONAL_OPERATOR
   68             | . OPERATOR
   69 multiplicative_expr: . prefix_expr
   70                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   71 additive_expr: . multiplicative_expr
   72              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   73 relational_expr: . additive_expr
   74                | . relational_expr RELATIONAL_OPERATOR additive_expr
   75 equality_expr: . relational_expr
   76              | . equality_expr EQUALITY_OPERATOR relational_expr
   77 and_expr: . equality_expr
   78         | . and_expr AND_OPERATOR equality_expr
   79 or_expr: . and_expr
   80        | . or_expr OR_OPERATOR and_expr
   81 assignment_expr: . or_expr
   82                | . assignment_expr "assignment operator =" or_expr
   83 var_expr: . "var keyword" "identifier" typeexpr
   84         | . "var keyword" "identifier"
   85 expr: . assignment_expr
   86     | . var_expr
   87     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 54
    "number constant"        shift, and go to state 55
    "string constant"        shift, and go to state 56
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 57
    "if keyword"             shift, and go to state 58
    "for keyword"            shift, and go to state 59
    "opening paranthesis ("  shift, and go to state 60
    "opening braces {"       shift, and go to state 61
    "opening bracket ["      shift, and go to state 63

    stmt                 go to state 227
    if_stmt              go to state 66
    for_stmt             go to state 67
    primary_expr         go to state 68
    if_expr              go to state 69
    postfix_expr         go to state 70
    prefix_expr          go to state 71
    any_operator         go to state 72
    multiplicative_expr  go to state 73
    additive_expr        go to state 74
    relational_expr      go to state 75
    equality_expr        go to state 76
    and_expr             go to state 77
    or_expr              go to state 78
    assignment_expr      go to state 79
    var_expr             go to state 80
    expr                 go to state 81


state 227

   35 for_stmt: "for keyword" "opening paranthesis (" expr ";" expr ";" expr "closing paranthesis )" stmt .

    $default  reduce using rule 35 (for_stmt)
