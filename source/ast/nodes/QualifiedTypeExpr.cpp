/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "QualifiedTypeExpr.hpp"
#include "ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::QualifiedTypeExpr;
using ast::NodePtr;
using ast::NodeVector;

QualifiedTypeExpr::QualifiedTypeExpr() : Node(),
	interfaceGraph(this),
	interfaceTypeExpr(this) {}

bool QualifiedTypeExpr::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kQualifiedTypeExpr;
}

bool QualifiedTypeExpr::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kGraphInterface) return true;
	if (i == kTypeExprInterface) return true;
	return false;
}

NodePtr QualifiedTypeExpr::copy() {
	Ptr c (new QualifiedTypeExpr);
	Node::copy(this->graphPrev, c->graphPrev);
	Node::copy(this->evaluatedType, c->evaluatedType);
	Node::copy(this->exprs, c->exprs);
	return c;
}

bool QualifiedTypeExpr::equalTo(const NodePtr& o) {
	const shared_ptr<QualifiedTypeExpr>& other = boost::dynamic_pointer_cast<QualifiedTypeExpr>(o);
	if (!other) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	if (!equal(this->evaluatedType, other->evaluatedType)) return false;
	if (!equal(this->exprs, other->exprs)) return false;
	return true;
}

std::string QualifiedTypeExpr::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "QualifiedTypeExpr{â€¦}";
	str << "QualifiedTypeExpr{";
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	if (this->evaluatedType) b << "\n  \033[1mevaluatedType\033[0m = " << indent(this->evaluatedType->describe(depth-1));
	if (!this->exprs.empty()) b << "\n  \033[1mexprs\033[0m = " << indent(describeVector(this->exprs, depth-1));
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void QualifiedTypeExpr::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void QualifiedTypeExpr::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& QualifiedTypeExpr::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void QualifiedTypeExpr::setEvaluatedType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType)) {
		throw std::runtime_error("'evaluatedType' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, evaluatedType)) {
		modify("evaluatedType");
		evaluatedType = v;
	}
}

const NodePtr& QualifiedTypeExpr::getEvaluatedType(bool required) {
	const NodePtr& v = evaluatedType;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have evaluatedType set to a non-null value.");
	}
	return v;
}


void QualifiedTypeExpr::setExprs(const NodeVector& v) {
	if (!equal(v, exprs)) {
		modify("exprs");
		exprs = v;
	}
}

const NodeVector& QualifiedTypeExpr::getExprs(bool required) {
	const NodeVector& v = exprs;
	return v;
}


void QualifiedTypeExpr::encode(Encoder& e) {
	e.encode(this->graphPrev);
	e.encode(this->evaluatedType);
	e.encode(this->exprs);
}

void QualifiedTypeExpr::decode(Decoder& d) {
	d.decode(this->graphPrev);
	d.decode(this->evaluatedType);
	d.decode(this->exprs);
}


void QualifiedTypeExpr::updateHierarchyOfChildren() {
	if (this->evaluatedType) this->evaluatedType->updateHierarchy(id + "evaluatedType", repository, this);
	for (int i = 0; i < this->exprs.size(); i++) {
		char buf[32]; snprintf(buf, 31, "%i", i);
		this->exprs[i]->updateHierarchy((id + "exprs") + buf, repository, this);
	}
}

const NodePtr& QualifiedTypeExpr::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// e.*
		if (size >= 1 && path[0] == 'e') {
			// evaluatedType.*
			if (size >= 13 && path[1] == 'v' && path[2] == 'a' && path[3] == 'l' && path[4] == 'u' && path[5] == 'a' && path[6] == 't' && path[7] == 'e' && path[8] == 'd' && path[9] == 'T' && path[10] == 'y' && path[11] == 'p' && path[12] == 'e') {
				// evaluatedType
				if (size == 13) {
					return getEvaluatedType();
				} else if (path[13] == '.') {
					return getEvaluatedType()->resolvePath(path.substr(14));
				}
			}
			// exprs.*
			if (size >= 5 && path[1] == 'x' && path[2] == 'p' && path[3] == 'r' && path[4] == 's') {
				// exprs
				if (size == 5) {
					throw std::runtime_error("Path '" + path + "' refers to an array instead of a concrete array element.");
				} else if (path[5] == '.') {
					size_t dot = path.find(".", 6);
					string idx_str = path.substr(6, dot);
					int idx = atoi(idx_str.c_str());
					const NodeVector& a = getExprs();
					if (idx < 0 || idx >= a.size()) {
						throw std::runtime_error("Index into array '" + path.substr(0, 5) + "' is out of bounds.");
					}
					if (dot == string::npos) {
						return a[idx];
					} else {
						return a[idx]->resolvePath(path.substr(dot + 1));
					}
				}
			}
		}
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector QualifiedTypeExpr::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getEvaluatedType(false)) v.push_back(n);
	v.insert(v.end(), this->exprs.begin(), this->exprs.end());
	return v;
}

