/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/CallArg.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::CallArg;
using ast::NodePtr;
using ast::NodeVector;

CallArg::CallArg() : Node(),
	interfaceCallArg(this),
	interfaceNamed(this) {}

bool CallArg::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kCallArg;
}

bool CallArg::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kCallArgInterface) return true;
	if (i == kNamedInterface) return true;
	return false;
}

NodePtr CallArg::copy() {
	Ptr c (new CallArg);
	Node::copy(this->name, c->name);
	Node::copy(this->expr, c->expr);
	return c;
}

bool CallArg::equalTo(const NodePtr& o) {
	const shared_ptr<CallArg>& other = boost::dynamic_pointer_cast<CallArg>(o);
	if (!other) return false;
	if (!equal(this->name, other->name)) return false;
	if (!equal(this->expr, other->expr)) return false;
	return true;
}

std::string CallArg::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "CallArg{â€¦}";
	str << "CallArg{";
	if (!this->name.empty()) b << "\n  \033[1mname\033[0m = \033[33m\"" << this->name << "\"\033[0m";
	if (this->expr) b << "\n  \033[1mexpr\033[0m = \033[36m" << this->expr.id << "\033[0m";
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void CallArg::setName(const std::string& v) {
	if (!equal(v, name)) {
		modify("name");
		name = v;
	}
}

const std::string& CallArg::getName(bool required) {
	const std::string& v = name;
	if (required && v.empty()) {
		throw std::runtime_error("Node " + getId().str() + " is required to have a non-empty string name set.");
	}
	return v;
}


void CallArg::setExpr(const NodePtr& v) {
	if (v && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'expr' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!v && expr) {
		modify("expr");
		expr.reset();
	}
	if (!expr || v->getId() != expr.id) {
		modify("expr");
		expr.set(v);
	}
}

void CallArg::setExpr(const NodeId& v) {
	if (v != expr.id) {
		modify("expr");
		expr.set(v);
	}
}

const NodePtr& CallArg::getExpr(bool required) {
	const NodePtr& v = expr.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have expr set to a non-null value.");
	}
	return v;
}


void CallArg::encode(Encoder& e) {
	e.encode(this->name);
	e.encode(this->expr);
}

void CallArg::decode(Decoder& d) {
	d.decode(this->name);
	d.decode(this->expr);
}


void CallArg::updateHierarchyOfChildren() {
}

const NodePtr& CallArg::resolvePath(const std::string& path) {
	size_t size = path.size();
	// expr.*
	if (size >= 4 && path[0] == 'e' && path[1] == 'x' && path[2] == 'p' && path[3] == 'r') {
		// expr
		if (size == 4) {
			return getExpr();
		} else if (path[4] == '.') {
			return getExpr()->resolvePath(path.substr(5));
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

