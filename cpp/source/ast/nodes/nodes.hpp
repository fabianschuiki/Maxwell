/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include <string>

#include "ArrayConstExpr.hpp"
#include "AssignmentExpr.hpp"
#include "BinaryOpExpr.hpp"
#include "BlockExpr.hpp"
#include "CallArg.hpp"
#include "CallCandidate.hpp"
#include "CallCandidateArg.hpp"
#include "CallExpr.hpp"
#include "CallExprArg.hpp"
#include "DefinedType.hpp"
#include "ForExpr.hpp"
#include "FuncArg.hpp"
#include "FuncDef.hpp"
#include "FuncType.hpp"
#include "GenericType.hpp"
#include "IdentifierExpr.hpp"
#include "IfCaseExpr.hpp"
#include "IfCaseExprCond.hpp"
#include "IfExpr.hpp"
#include "ImplAccessor.hpp"
#include "ImplAccessorArg.hpp"
#include "InterfaceQualifier.hpp"
#include "InvalidType.hpp"
#include "MapConstExpr.hpp"
#include "MapConstExprPair.hpp"
#include "MemberAccessExpr.hpp"
#include "NamedTypeExpr.hpp"
#include "NativeQualifier.hpp"
#include "NumberConstExpr.hpp"
#include "QualifiedType.hpp"
#include "QualifiedTypeExpr.hpp"
#include "QualifiedTypeMember.hpp"
#include "RangeQualifier.hpp"
#include "SetConstExpr.hpp"
#include "SpecializedType.hpp"
#include "SpecializedTypeExpr.hpp"
#include "StringConstExpr.hpp"
#include "StructureQualifier.hpp"
#include "StructureQualifierMember.hpp"
#include "TupleType.hpp"
#include "TupleTypeArg.hpp"
#include "TupleTypeExpr.hpp"
#include "TupleTypeExprArg.hpp"
#include "TypeDef.hpp"
#include "TypeSet.hpp"
#include "UnaryOpExpr.hpp"
#include "UnionMappedType.hpp"
#include "UnionType.hpp"
#include "UnionTypeExpr.hpp"
#include "VarDefExpr.hpp"

namespace ast {

using std::string;

/// Node factory.
class NodeFactory
{
public:
	static NodePtr make(const string& name)
	{
		size_t size = name.size();
		// .*
		if (true) {
			// A.*
			if (size >= 1 && name[0] == 'A') {
				// ArrayConstExpr.*
				if (size >= 14 && name[1] == 'r' && name[2] == 'r' && name[3] == 'a' && name[4] == 'y' && name[5] == 'C' && name[6] == 'o' && name[7] == 'n' && name[8] == 's' && name[9] == 't' && name[10] == 'E' && name[11] == 'x' && name[12] == 'p' && name[13] == 'r') {
					// ArrayConstExpr
					if (size == 14) return NodePtr(new ArrayConstExpr);
				}
				// AssignmentExpr.*
				if (size >= 14 && name[1] == 's' && name[2] == 's' && name[3] == 'i' && name[4] == 'g' && name[5] == 'n' && name[6] == 'm' && name[7] == 'e' && name[8] == 'n' && name[9] == 't' && name[10] == 'E' && name[11] == 'x' && name[12] == 'p' && name[13] == 'r') {
					// AssignmentExpr
					if (size == 14) return NodePtr(new AssignmentExpr);
				}
			}
			// B.*
			if (size >= 1 && name[0] == 'B') {
				// BinaryOpExpr.*
				if (size >= 12 && name[1] == 'i' && name[2] == 'n' && name[3] == 'a' && name[4] == 'r' && name[5] == 'y' && name[6] == 'O' && name[7] == 'p' && name[8] == 'E' && name[9] == 'x' && name[10] == 'p' && name[11] == 'r') {
					// BinaryOpExpr
					if (size == 12) return NodePtr(new BinaryOpExpr);
				}
				// BlockExpr.*
				if (size >= 9 && name[1] == 'l' && name[2] == 'o' && name[3] == 'c' && name[4] == 'k' && name[5] == 'E' && name[6] == 'x' && name[7] == 'p' && name[8] == 'r') {
					// BlockExpr
					if (size == 9) return NodePtr(new BlockExpr);
				}
			}
			// Call.*
			if (size >= 4 && name[0] == 'C' && name[1] == 'a' && name[2] == 'l' && name[3] == 'l') {
				// CallArg.*
				if (size >= 7 && name[4] == 'A' && name[5] == 'r' && name[6] == 'g') {
					// CallArg
					if (size == 7) return NodePtr(new CallArg);
				}
				// CallCandidate.*
				if (size >= 13 && name[4] == 'C' && name[5] == 'a' && name[6] == 'n' && name[7] == 'd' && name[8] == 'i' && name[9] == 'd' && name[10] == 'a' && name[11] == 't' && name[12] == 'e') {
					// CallCandidate
					if (size == 13) return NodePtr(new CallCandidate);
					// CallCandidateArg.*
					if (size >= 16 && name[13] == 'A' && name[14] == 'r' && name[15] == 'g') {
						// CallCandidateArg
						if (size == 16) return NodePtr(new CallCandidateArg);
					}
				}
				// CallExpr.*
				if (size >= 8 && name[4] == 'E' && name[5] == 'x' && name[6] == 'p' && name[7] == 'r') {
					// CallExpr
					if (size == 8) return NodePtr(new CallExpr);
					// CallExprArg.*
					if (size >= 11 && name[8] == 'A' && name[9] == 'r' && name[10] == 'g') {
						// CallExprArg
						if (size == 11) return NodePtr(new CallExprArg);
					}
				}
			}
			// DefinedType.*
			if (size >= 11 && name[0] == 'D' && name[1] == 'e' && name[2] == 'f' && name[3] == 'i' && name[4] == 'n' && name[5] == 'e' && name[6] == 'd' && name[7] == 'T' && name[8] == 'y' && name[9] == 'p' && name[10] == 'e') {
				// DefinedType
				if (size == 11) return NodePtr(new DefinedType);
			}
			// F.*
			if (size >= 1 && name[0] == 'F') {
				// ForExpr.*
				if (size >= 7 && name[1] == 'o' && name[2] == 'r' && name[3] == 'E' && name[4] == 'x' && name[5] == 'p' && name[6] == 'r') {
					// ForExpr
					if (size == 7) return NodePtr(new ForExpr);
				}
				// Func.*
				if (size >= 4 && name[1] == 'u' && name[2] == 'n' && name[3] == 'c') {
					// FuncArg.*
					if (size >= 7 && name[4] == 'A' && name[5] == 'r' && name[6] == 'g') {
						// FuncArg
						if (size == 7) return NodePtr(new FuncArg);
					}
					// FuncDef.*
					if (size >= 7 && name[4] == 'D' && name[5] == 'e' && name[6] == 'f') {
						// FuncDef
						if (size == 7) return NodePtr(new FuncDef);
					}
					// FuncType.*
					if (size >= 8 && name[4] == 'T' && name[5] == 'y' && name[6] == 'p' && name[7] == 'e') {
						// FuncType
						if (size == 8) return NodePtr(new FuncType);
					}
				}
			}
			// GenericType.*
			if (size >= 11 && name[0] == 'G' && name[1] == 'e' && name[2] == 'n' && name[3] == 'e' && name[4] == 'r' && name[5] == 'i' && name[6] == 'c' && name[7] == 'T' && name[8] == 'y' && name[9] == 'p' && name[10] == 'e') {
				// GenericType
				if (size == 11) return NodePtr(new GenericType);
			}
			// I.*
			if (size >= 1 && name[0] == 'I') {
				// IdentifierExpr.*
				if (size >= 14 && name[1] == 'd' && name[2] == 'e' && name[3] == 'n' && name[4] == 't' && name[5] == 'i' && name[6] == 'f' && name[7] == 'i' && name[8] == 'e' && name[9] == 'r' && name[10] == 'E' && name[11] == 'x' && name[12] == 'p' && name[13] == 'r') {
					// IdentifierExpr
					if (size == 14) return NodePtr(new IdentifierExpr);
				}
				// If.*
				if (size >= 2 && name[1] == 'f') {
					// IfCaseExpr.*
					if (size >= 10 && name[2] == 'C' && name[3] == 'a' && name[4] == 's' && name[5] == 'e' && name[6] == 'E' && name[7] == 'x' && name[8] == 'p' && name[9] == 'r') {
						// IfCaseExpr
						if (size == 10) return NodePtr(new IfCaseExpr);
						// IfCaseExprCond.*
						if (size >= 14 && name[10] == 'C' && name[11] == 'o' && name[12] == 'n' && name[13] == 'd') {
							// IfCaseExprCond
							if (size == 14) return NodePtr(new IfCaseExprCond);
						}
					}
					// IfExpr.*
					if (size >= 6 && name[2] == 'E' && name[3] == 'x' && name[4] == 'p' && name[5] == 'r') {
						// IfExpr
						if (size == 6) return NodePtr(new IfExpr);
					}
				}
				// ImplAccessor.*
				if (size >= 12 && name[1] == 'm' && name[2] == 'p' && name[3] == 'l' && name[4] == 'A' && name[5] == 'c' && name[6] == 'c' && name[7] == 'e' && name[8] == 's' && name[9] == 's' && name[10] == 'o' && name[11] == 'r') {
					// ImplAccessor
					if (size == 12) return NodePtr(new ImplAccessor);
					// ImplAccessorArg.*
					if (size >= 15 && name[12] == 'A' && name[13] == 'r' && name[14] == 'g') {
						// ImplAccessorArg
						if (size == 15) return NodePtr(new ImplAccessorArg);
					}
				}
				// In.*
				if (size >= 2 && name[1] == 'n') {
					// InterfaceQualifier.*
					if (size >= 18 && name[2] == 't' && name[3] == 'e' && name[4] == 'r' && name[5] == 'f' && name[6] == 'a' && name[7] == 'c' && name[8] == 'e' && name[9] == 'Q' && name[10] == 'u' && name[11] == 'a' && name[12] == 'l' && name[13] == 'i' && name[14] == 'f' && name[15] == 'i' && name[16] == 'e' && name[17] == 'r') {
						// InterfaceQualifier
						if (size == 18) return NodePtr(new InterfaceQualifier);
					}
					// InvalidType.*
					if (size >= 11 && name[2] == 'v' && name[3] == 'a' && name[4] == 'l' && name[5] == 'i' && name[6] == 'd' && name[7] == 'T' && name[8] == 'y' && name[9] == 'p' && name[10] == 'e') {
						// InvalidType
						if (size == 11) return NodePtr(new InvalidType);
					}
				}
			}
			// M.*
			if (size >= 1 && name[0] == 'M') {
				// MapConstExpr.*
				if (size >= 12 && name[1] == 'a' && name[2] == 'p' && name[3] == 'C' && name[4] == 'o' && name[5] == 'n' && name[6] == 's' && name[7] == 't' && name[8] == 'E' && name[9] == 'x' && name[10] == 'p' && name[11] == 'r') {
					// MapConstExpr
					if (size == 12) return NodePtr(new MapConstExpr);
					// MapConstExprPair.*
					if (size >= 16 && name[12] == 'P' && name[13] == 'a' && name[14] == 'i' && name[15] == 'r') {
						// MapConstExprPair
						if (size == 16) return NodePtr(new MapConstExprPair);
					}
				}
				// MemberAccessExpr.*
				if (size >= 16 && name[1] == 'e' && name[2] == 'm' && name[3] == 'b' && name[4] == 'e' && name[5] == 'r' && name[6] == 'A' && name[7] == 'c' && name[8] == 'c' && name[9] == 'e' && name[10] == 's' && name[11] == 's' && name[12] == 'E' && name[13] == 'x' && name[14] == 'p' && name[15] == 'r') {
					// MemberAccessExpr
					if (size == 16) return NodePtr(new MemberAccessExpr);
				}
			}
			// N.*
			if (size >= 1 && name[0] == 'N') {
				// Na.*
				if (size >= 2 && name[1] == 'a') {
					// NamedTypeExpr.*
					if (size >= 13 && name[2] == 'm' && name[3] == 'e' && name[4] == 'd' && name[5] == 'T' && name[6] == 'y' && name[7] == 'p' && name[8] == 'e' && name[9] == 'E' && name[10] == 'x' && name[11] == 'p' && name[12] == 'r') {
						// NamedTypeExpr
						if (size == 13) return NodePtr(new NamedTypeExpr);
					}
					// NativeQualifier.*
					if (size >= 15 && name[2] == 't' && name[3] == 'i' && name[4] == 'v' && name[5] == 'e' && name[6] == 'Q' && name[7] == 'u' && name[8] == 'a' && name[9] == 'l' && name[10] == 'i' && name[11] == 'f' && name[12] == 'i' && name[13] == 'e' && name[14] == 'r') {
						// NativeQualifier
						if (size == 15) return NodePtr(new NativeQualifier);
					}
				}
				// NumberConstExpr.*
				if (size >= 15 && name[1] == 'u' && name[2] == 'm' && name[3] == 'b' && name[4] == 'e' && name[5] == 'r' && name[6] == 'C' && name[7] == 'o' && name[8] == 'n' && name[9] == 's' && name[10] == 't' && name[11] == 'E' && name[12] == 'x' && name[13] == 'p' && name[14] == 'r') {
					// NumberConstExpr
					if (size == 15) return NodePtr(new NumberConstExpr);
				}
			}
			// QualifiedType.*
			if (size >= 13 && name[0] == 'Q' && name[1] == 'u' && name[2] == 'a' && name[3] == 'l' && name[4] == 'i' && name[5] == 'f' && name[6] == 'i' && name[7] == 'e' && name[8] == 'd' && name[9] == 'T' && name[10] == 'y' && name[11] == 'p' && name[12] == 'e') {
				// QualifiedType
				if (size == 13) return NodePtr(new QualifiedType);
				// QualifiedTypeExpr.*
				if (size >= 17 && name[13] == 'E' && name[14] == 'x' && name[15] == 'p' && name[16] == 'r') {
					// QualifiedTypeExpr
					if (size == 17) return NodePtr(new QualifiedTypeExpr);
				}
				// QualifiedTypeMember.*
				if (size >= 19 && name[13] == 'M' && name[14] == 'e' && name[15] == 'm' && name[16] == 'b' && name[17] == 'e' && name[18] == 'r') {
					// QualifiedTypeMember
					if (size == 19) return NodePtr(new QualifiedTypeMember);
				}
			}
			// RangeQualifier.*
			if (size >= 14 && name[0] == 'R' && name[1] == 'a' && name[2] == 'n' && name[3] == 'g' && name[4] == 'e' && name[5] == 'Q' && name[6] == 'u' && name[7] == 'a' && name[8] == 'l' && name[9] == 'i' && name[10] == 'f' && name[11] == 'i' && name[12] == 'e' && name[13] == 'r') {
				// RangeQualifier
				if (size == 14) return NodePtr(new RangeQualifier);
			}
			// S.*
			if (size >= 1 && name[0] == 'S') {
				// SetConstExpr.*
				if (size >= 12 && name[1] == 'e' && name[2] == 't' && name[3] == 'C' && name[4] == 'o' && name[5] == 'n' && name[6] == 's' && name[7] == 't' && name[8] == 'E' && name[9] == 'x' && name[10] == 'p' && name[11] == 'r') {
					// SetConstExpr
					if (size == 12) return NodePtr(new SetConstExpr);
				}
				// SpecializedType.*
				if (size >= 15 && name[1] == 'p' && name[2] == 'e' && name[3] == 'c' && name[4] == 'i' && name[5] == 'a' && name[6] == 'l' && name[7] == 'i' && name[8] == 'z' && name[9] == 'e' && name[10] == 'd' && name[11] == 'T' && name[12] == 'y' && name[13] == 'p' && name[14] == 'e') {
					// SpecializedType
					if (size == 15) return NodePtr(new SpecializedType);
					// SpecializedTypeExpr.*
					if (size >= 19 && name[15] == 'E' && name[16] == 'x' && name[17] == 'p' && name[18] == 'r') {
						// SpecializedTypeExpr
						if (size == 19) return NodePtr(new SpecializedTypeExpr);
					}
				}
				// Str.*
				if (size >= 3 && name[1] == 't' && name[2] == 'r') {
					// StringConstExpr.*
					if (size >= 15 && name[3] == 'i' && name[4] == 'n' && name[5] == 'g' && name[6] == 'C' && name[7] == 'o' && name[8] == 'n' && name[9] == 's' && name[10] == 't' && name[11] == 'E' && name[12] == 'x' && name[13] == 'p' && name[14] == 'r') {
						// StringConstExpr
						if (size == 15) return NodePtr(new StringConstExpr);
					}
					// StructureQualifier.*
					if (size >= 18 && name[3] == 'u' && name[4] == 'c' && name[5] == 't' && name[6] == 'u' && name[7] == 'r' && name[8] == 'e' && name[9] == 'Q' && name[10] == 'u' && name[11] == 'a' && name[12] == 'l' && name[13] == 'i' && name[14] == 'f' && name[15] == 'i' && name[16] == 'e' && name[17] == 'r') {
						// StructureQualifier
						if (size == 18) return NodePtr(new StructureQualifier);
						// StructureQualifierMember.*
						if (size >= 24 && name[18] == 'M' && name[19] == 'e' && name[20] == 'm' && name[21] == 'b' && name[22] == 'e' && name[23] == 'r') {
							// StructureQualifierMember
							if (size == 24) return NodePtr(new StructureQualifierMember);
						}
					}
				}
			}
			// T.*
			if (size >= 1 && name[0] == 'T') {
				// TupleType.*
				if (size >= 9 && name[1] == 'u' && name[2] == 'p' && name[3] == 'l' && name[4] == 'e' && name[5] == 'T' && name[6] == 'y' && name[7] == 'p' && name[8] == 'e') {
					// TupleType
					if (size == 9) return NodePtr(new TupleType);
					// TupleTypeArg.*
					if (size >= 12 && name[9] == 'A' && name[10] == 'r' && name[11] == 'g') {
						// TupleTypeArg
						if (size == 12) return NodePtr(new TupleTypeArg);
					}
					// TupleTypeExpr.*
					if (size >= 13 && name[9] == 'E' && name[10] == 'x' && name[11] == 'p' && name[12] == 'r') {
						// TupleTypeExpr
						if (size == 13) return NodePtr(new TupleTypeExpr);
						// TupleTypeExprArg.*
						if (size >= 16 && name[13] == 'A' && name[14] == 'r' && name[15] == 'g') {
							// TupleTypeExprArg
							if (size == 16) return NodePtr(new TupleTypeExprArg);
						}
					}
				}
				// Type.*
				if (size >= 4 && name[1] == 'y' && name[2] == 'p' && name[3] == 'e') {
					// TypeDef.*
					if (size >= 7 && name[4] == 'D' && name[5] == 'e' && name[6] == 'f') {
						// TypeDef
						if (size == 7) return NodePtr(new TypeDef);
					}
					// TypeSet.*
					if (size >= 7 && name[4] == 'S' && name[5] == 'e' && name[6] == 't') {
						// TypeSet
						if (size == 7) return NodePtr(new TypeSet);
					}
				}
			}
			// Un.*
			if (size >= 2 && name[0] == 'U' && name[1] == 'n') {
				// UnaryOpExpr.*
				if (size >= 11 && name[2] == 'a' && name[3] == 'r' && name[4] == 'y' && name[5] == 'O' && name[6] == 'p' && name[7] == 'E' && name[8] == 'x' && name[9] == 'p' && name[10] == 'r') {
					// UnaryOpExpr
					if (size == 11) return NodePtr(new UnaryOpExpr);
				}
				// Union.*
				if (size >= 5 && name[2] == 'i' && name[3] == 'o' && name[4] == 'n') {
					// UnionMappedType.*
					if (size >= 15 && name[5] == 'M' && name[6] == 'a' && name[7] == 'p' && name[8] == 'p' && name[9] == 'e' && name[10] == 'd' && name[11] == 'T' && name[12] == 'y' && name[13] == 'p' && name[14] == 'e') {
						// UnionMappedType
						if (size == 15) return NodePtr(new UnionMappedType);
					}
					// UnionType.*
					if (size >= 9 && name[5] == 'T' && name[6] == 'y' && name[7] == 'p' && name[8] == 'e') {
						// UnionType
						if (size == 9) return NodePtr(new UnionType);
						// UnionTypeExpr.*
						if (size >= 13 && name[9] == 'E' && name[10] == 'x' && name[11] == 'p' && name[12] == 'r') {
							// UnionTypeExpr
							if (size == 13) return NodePtr(new UnionTypeExpr);
						}
					}
				}
			}
			// VarDefExpr.*
			if (size >= 10 && name[0] == 'V' && name[1] == 'a' && name[2] == 'r' && name[3] == 'D' && name[4] == 'e' && name[5] == 'f' && name[6] == 'E' && name[7] == 'x' && name[8] == 'p' && name[9] == 'r') {
				// VarDefExpr
				if (size == 10) return NodePtr(new VarDefExpr);
			}
		}
		throw std::runtime_error("Node class name '" + name + "' not known to NodeFactory.");
	}
};

} // namespace ast

