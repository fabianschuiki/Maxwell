Terminals which are not used

   "symbol"
   "opening bracket ["
   "closing bracket ]"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 body: "opening braces {" "closing braces }"
   24     | "opening braces {" stmts "closing braces }"

   25 stmts: stmt
   26      | stmts stmt

   27 stmt: expr ";"

   28 primary_expr: "identifier"
   29             | "opening paranthesis (" expr "closing paranthesis )"
   30             | "number constant"
   31             | "string constant"

   32 postfix_expr: primary_expr
   33             | postfix_expr OPERATOR
   34             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | postfix_expr "." "identifier"
   37             | "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   39 call_args: call_arg
   40          | call_args "," call_arg

   41 call_arg: "identifier" ":" expr
   42         | expr

   43 prefix_expr: postfix_expr
   44            | any_operator prefix_expr

   45 any_operator: MULTIPLICATIVE_OPERATOR
   46             | ADDITIVE_OPERATOR
   47             | RELATIONAL_OPERATOR
   48             | OPERATOR

   49 multiplicative_expr: prefix_expr
   50                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   51 additive_expr: multiplicative_expr
   52              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   53 relational_expr: additive_expr
   54                | relational_expr RELATIONAL_OPERATOR additive_expr

   55 assignment_expr: relational_expr
   56                | assignment_expr "assignment operator =" relational_expr

   57 expr: assignment_expr
   58     | var_expr
   59     | var_expr "assignment operator =" assignment_expr

   60 var_expr: "var keyword" "identifier" typeexpr
   61         | "var keyword" "identifier"

   62 typeexpr: nonunion_typeexpr
   63         | union_typeexpr

   64 nonunion_typeexpr: "identifier"
   65                  | tuple_typeexpr
   66                  | qualified_typeexpr

   67 union_typeexpr: union_typeexprs

   68 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   70 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   71 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   72                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   73 tuple_typeexpr_arg: typeexpr
   74                   | "identifier" ":" typeexpr

   75 qualified_typeexpr: qualified_typeexpr_qualifiers

   76 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
   77                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

   78 qualified_typeexpr_qualifier: structure_qualifier
   79                             | interface_qualifier
   80                             | native_qualifier
   81                             | range_qualifier

   82 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

   84 structure_qualifier_decl: "value keyword"
   85                         | "object keyword"

   86 structure_qualifier_stmts: structure_qualifier_stmt
   87                          | structure_qualifier_stmts structure_qualifier_stmt

   88 structure_qualifier_stmt: "identifier" ";"
   89                         | "identifier" typeexpr ";"

   90 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
   91                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

   92 interface_qualifier_stmts: interface_qualifier_stmt
   93                          | interface_qualifier_stmts interface_qualifier_stmt

   94 interface_qualifier_stmt: "identifier"

   95 native_qualifier: "native keyword" "identifier"

   96 range_qualifier: range_qualifier_decl
   97                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

   98 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 28 34 35 36 37 38 41 60 61 64 74 88
    89 94 95 98
"number constant" (259) 30 97
"string constant" (260) 31
MULTIPLICATIVE_OPERATOR (261) 45 50
ADDITIVE_OPERATOR (262) 46 52
RELATIONAL_OPERATOR (263) 47 54
OPERATOR (264) 33 48
"symbol" (265)
"func keyword" (266) 10 11 12
"var keyword" (267) 60 61
"type keyword" (268) 22
"unary keyword" (269) 12
"value keyword" (270) 84
"object keyword" (271) 85
"interface keyword" (272) 90 91
"native keyword" (273) 95
"range keyword" (274) 98
"opening paranthesis (" (275) 13 15 29 34 35 37 38 70 97
"closing paranthesis )" (276) 13 15 29 34 35 37 38 70 97
"opening braces {" (277) 23 24 82 83 90 91
"closing braces }" (278) 23 24 82 83 90 91
"opening bracket [" (279)
"closing bracket ]" (280)
"vertical pipe |" (281) 68 69
"." (282) 34 35 36
"," (283) 17 40 71 72 97
":" (284) 41 74
";" (285) 27 88 89
"right arrow ->" (286) 8 9
"assignment operator =" (287) 56 59


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
root (34)
    on left: 1, on right: 0
root_stmts (35)
    on left: 2 3, on right: 1 2
root_stmt (36)
    on left: 4 5, on right: 2 3
func_decl (37)
    on left: 6 7 8 9, on right: 4
func_decl_name (38)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (39)
    on left: 13 14 15, on right: 7 8 9
func_args (40)
    on left: 16 17, on right: 15 17
func_arg (41)
    on left: 18 19, on right: 14 16 17
type_decl (42)
    on left: 20 21, on right: 5
type_decl_name (43)
    on left: 22, on right: 20 21
body (44)
    on left: 23 24, on right: 6 7 8 9
stmts (45)
    on left: 25 26, on right: 24 26
stmt (46)
    on left: 27, on right: 25 26
primary_expr (47)
    on left: 28 29 30 31, on right: 32
postfix_expr (48)
    on left: 32 33 34 35 36 37 38, on right: 33 34 35 36 43
call_args (49)
    on left: 39 40, on right: 35 38 40
call_arg (50)
    on left: 41 42, on right: 39 40
prefix_expr (51)
    on left: 43 44, on right: 44 49 50
any_operator (52)
    on left: 45 46 47 48, on right: 11 12 44
multiplicative_expr (53)
    on left: 49 50, on right: 50 51 52
additive_expr (54)
    on left: 51 52, on right: 52 53 54
relational_expr (55)
    on left: 53 54, on right: 54 55 56
assignment_expr (56)
    on left: 55 56, on right: 56 57 59
expr (57)
    on left: 57 58 59, on right: 27 29 41 42
var_expr (58)
    on left: 60 61, on right: 58 59
typeexpr (59)
    on left: 62 63, on right: 19 21 60 73 74 89
nonunion_typeexpr (60)
    on left: 64 65 66, on right: 62 68 69
union_typeexpr (61)
    on left: 67, on right: 63
union_typeexprs (62)
    on left: 68 69, on right: 67 69
tuple_typeexpr (63)
    on left: 70, on right: 65
tuple_typeexpr_args (64)
    on left: 71 72, on right: 70 72
tuple_typeexpr_arg (65)
    on left: 73 74, on right: 71 72
qualified_typeexpr (66)
    on left: 75, on right: 66
qualified_typeexpr_qualifiers (67)
    on left: 76 77, on right: 75 77
qualified_typeexpr_qualifier (68)
    on left: 78 79 80 81, on right: 76 77
structure_qualifier (69)
    on left: 82 83, on right: 78
structure_qualifier_decl (70)
    on left: 84 85, on right: 82 83
structure_qualifier_stmts (71)
    on left: 86 87, on right: 83 87
structure_qualifier_stmt (72)
    on left: 88 89, on right: 86 87
interface_qualifier (73)
    on left: 90 91, on right: 79
interface_qualifier_stmts (74)
    on left: 92 93, on right: 91 93
interface_qualifier_stmt (75)
    on left: 94, on right: 92 93
native_qualifier (76)
    on left: 95, on right: 80
range_qualifier (77)
    on left: 96 97, on right: 81
range_qualifier_decl (78)
    on left: 98, on right: 96 97


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    body             go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 34
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   45 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 45 (any_operator)


state 12

   46 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 46 (any_operator)


state 13

   47 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 47 (any_operator)


state 14

   48 any_operator: OPERATOR .

    $default  reduce using rule 48 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 48


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 49
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 50

    func_args  go to state 51
    func_arg   go to state 52


state 22

   23 body: "opening braces {" . "closing braces }"
   24     | "opening braces {" . stmts "closing braces }"
   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing braces }"       shift, and go to state 58

    stmts                go to state 59
    stmt                 go to state 60
    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 69
    var_expr             go to state 70


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 71
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 72

    body  go to state 73


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 27

   64 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 64 (nonunion_typeexpr)


state 28

   84 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 84 (structure_qualifier_decl)


state 29

   85 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 85 (structure_qualifier_decl)


state 30

   90 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
   91                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 74


state 31

   95 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 75


state 32

   98 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 76


state 33

   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   70               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   71 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   72                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   73 tuple_typeexpr_arg: . typeexpr
   74                   | . "identifier" ":" typeexpr
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 77
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 78
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_args            go to state 79
    tuple_typeexpr_arg             go to state 80
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 34

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 35

   62 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   68 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 81

    $default  reduce using rule 62 (typeexpr)


state 36

   63 typeexpr: union_typeexpr .

    $default  reduce using rule 63 (typeexpr)


state 37

   67 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", ",", ";", "right arrow ->", "assignment operator ="]
   69 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 82

    $default  reduce using rule 67 (union_typeexpr)


state 38

   65 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 65 (nonunion_typeexpr)


state 39

   66 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 66 (nonunion_typeexpr)


state 40

   75 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   77 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 75 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 83
    structure_qualifier           go to state 42
    structure_qualifier_decl      go to state 43
    interface_qualifier           go to state 44
    native_qualifier              go to state 45
    range_qualifier               go to state 46
    range_qualifier_decl          go to state 47


state 41

   76 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 76 (qualified_typeexpr_qualifiers)


state 42

   78 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 78 (qualified_typeexpr_qualifier)


state 43

   82 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
   83                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 84


state 44

   79 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 79 (qualified_typeexpr_qualifier)


state 45

   80 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 80 (qualified_typeexpr_qualifier)


state 46

   81 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 81 (qualified_typeexpr_qualifier)


state 47

   96 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "closing paranthesis )", "opening braces {", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   97                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 85

    $default  reduce using rule 96 (range_qualifier)


state 48

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 49

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 50

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 51

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 86
    ","                      shift, and go to state 87


state 52

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 53

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]
   37 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   38             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 88

    $default  reduce using rule 28 (primary_expr)


state 54

   30 primary_expr: "number constant" .

    $default  reduce using rule 30 (primary_expr)


state 55

   31 primary_expr: "string constant" .

    $default  reduce using rule 31 (primary_expr)


state 56

   60 var_expr: "var keyword" . "identifier" typeexpr
   61         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 89


state 57

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   29             | "opening paranthesis (" . expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 90
    var_expr             go to state 70


state 58

   23 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 23 (body)


state 59

   24 body: "opening braces {" stmts . "closing braces }"
   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing braces }"       shift, and go to state 91

    stmt                 go to state 92
    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 69
    var_expr             go to state 70


state 60

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


state 61

   32 postfix_expr: primary_expr .

    $default  reduce using rule 32 (postfix_expr)


state 62

   33 postfix_expr: postfix_expr . OPERATOR
   34             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | postfix_expr . "." "identifier"
   43 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 93
    "."       shift, and go to state 94

    $default  reduce using rule 43 (prefix_expr)


state 63

   49 multiplicative_expr: prefix_expr .

    $default  reduce using rule 49 (multiplicative_expr)


state 64

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   44            | any_operator . prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr  go to state 61
    postfix_expr  go to state 62
    prefix_expr   go to state 95
    any_operator  go to state 64


state 65

   50 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 96

    $default  reduce using rule 51 (additive_expr)


state 66

   52 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 97

    $default  reduce using rule 53 (relational_expr)


state 67

   54 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 98

    $default  reduce using rule 55 (assignment_expr)


state 68

   56 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   57 expr: assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 99

    $default  reduce using rule 57 (expr)


state 69

   27 stmt: expr . ";"

    ";"  shift, and go to state 100


state 70

   58 expr: var_expr .  ["closing paranthesis )", ",", ";"]
   59     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 101

    $default  reduce using rule 58 (expr)


state 71

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 102


state 72

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 103
    func_arg         go to state 25


state 73

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 74

   90 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
   91                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
   92 interface_qualifier_stmts: . interface_qualifier_stmt
   93                          | . interface_qualifier_stmts interface_qualifier_stmt
   94 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 104
    "closing braces }"  shift, and go to state 105

    interface_qualifier_stmts  go to state 106
    interface_qualifier_stmt   go to state 107


state 75

   95 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 95 (native_qualifier)


state 76

   98 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 98 (range_qualifier_decl)


state 77

   64 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   74 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 108

    $default  reduce using rule 64 (nonunion_typeexpr)


state 78

   73 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 73 (tuple_typeexpr_arg)


state 79

   70 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   72 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 109
    ","                      shift, and go to state 110


state 80

   71 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 111


state 81

   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   68 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 112
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 82

   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   69 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 113
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 83

   77 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 77 (qualified_typeexpr_qualifiers)


state 84

   82 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
   83                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
   86 structure_qualifier_stmts: . structure_qualifier_stmt
   87                          | . structure_qualifier_stmts structure_qualifier_stmt
   88 structure_qualifier_stmt: . "identifier" ";"
   89                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 114
    "closing braces }"  shift, and go to state 115

    structure_qualifier_stmts  go to state 116
    structure_qualifier_stmt   go to state 117


state 85

   97 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 118


state 86

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 87

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 119


state 88

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   37             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   38             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   39 call_args: . call_arg
   40          | . call_args "," call_arg
   41 call_arg: . "identifier" ":" expr
   42         | . expr
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 120
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing paranthesis )"  shift, and go to state 121

    primary_expr         go to state 61
    postfix_expr         go to state 62
    call_args            go to state 122
    call_arg             go to state 123
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 124
    var_expr             go to state 70


state 89

   60 var_expr: "var keyword" "identifier" . typeexpr
   61         | "var keyword" "identifier" .  ["closing paranthesis )", ",", ";", "assignment operator ="]
   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 61 (var_expr)

    typeexpr                       go to state 125
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 90

   29 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 126


state 91

   24 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 24 (body)


state 92

   26 stmts: stmts stmt .

    $default  reduce using rule 26 (stmts)


state 93

   33 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 33 (postfix_expr)


state 94

   34 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 127


state 95

   44 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 44 (prefix_expr)


state 96

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   50 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr  go to state 61
    postfix_expr  go to state 62
    prefix_expr   go to state 128
    any_operator  go to state 64


state 97

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   52 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 129


state 98

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   54 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 130


state 99

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   56 assignment_expr: assignment_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 131


state 100

   27 stmt: expr ";" .

    $default  reduce using rule 27 (stmt)


state 101

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   59 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 132


state 102

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 103

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 133


state 104

   94 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 94 (interface_qualifier_stmt)


state 105

   90 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 90 (interface_qualifier)


state 106

   91 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
   93 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
   94 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 104
    "closing braces }"  shift, and go to state 134

    interface_qualifier_stmt  go to state 135


state 107

   92 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 92 (interface_qualifier_stmts)


state 108

   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   74 tuple_typeexpr_arg: "identifier" ":" . typeexpr
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 136
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 109

   70 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 70 (tuple_typeexpr)


state 110

   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   72 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   73 tuple_typeexpr_arg: . typeexpr
   74                   | . "identifier" ":" typeexpr
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 77
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 78
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 137
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 111

   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   71 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   73 tuple_typeexpr_arg: . typeexpr
   74                   | . "identifier" ":" typeexpr
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 77
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 78
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 138
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 112

   68 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 68 (union_typeexprs)


state 113

   69 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 69 (union_typeexprs)


state 114

   62 typeexpr: . nonunion_typeexpr
   63         | . union_typeexpr
   64 nonunion_typeexpr: . "identifier"
   65                  | . tuple_typeexpr
   66                  | . qualified_typeexpr
   67 union_typeexpr: . union_typeexprs
   68 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   69                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   70 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   75 qualified_typeexpr: . qualified_typeexpr_qualifiers
   76 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   77                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   78 qualified_typeexpr_qualifier: . structure_qualifier
   79                             | . interface_qualifier
   80                             | . native_qualifier
   81                             | . range_qualifier
   82 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   83                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   84 structure_qualifier_decl: . "value keyword"
   85                         | . "object keyword"
   88 structure_qualifier_stmt: "identifier" . ";"
   89                         | "identifier" . typeexpr ";"
   90 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   91                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
   95 native_qualifier: . "native keyword" "identifier"
   96 range_qualifier: . range_qualifier_decl
   97                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
   98 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    ";"                      shift, and go to state 139

    typeexpr                       go to state 140
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 115

   82 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 82 (structure_qualifier)


state 116

   83 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
   87 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
   88 structure_qualifier_stmt: . "identifier" ";"
   89                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 114
    "closing braces }"  shift, and go to state 141

    structure_qualifier_stmt  go to state 142


state 117

   86 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 86 (structure_qualifier_stmts)


state 118

   97 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 143


state 119

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 120

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   37 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   38             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   41 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 88
    ":"                      shift, and go to state 144

    $default  reduce using rule 28 (primary_expr)


state 121

   37 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 37 (postfix_expr)


state 122

   38 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   40 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 145
    ","                      shift, and go to state 146


state 123

   39 call_args: call_arg .

    $default  reduce using rule 39 (call_args)


state 124

   42 call_arg: expr .

    $default  reduce using rule 42 (call_arg)


state 125

   60 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 60 (var_expr)


state 126

   29 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 29 (primary_expr)


state 127

   34 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   35             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   36             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 147

    $default  reduce using rule 36 (postfix_expr)


state 128

   50 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 50 (multiplicative_expr)


state 129

   50 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   52 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 96

    $default  reduce using rule 52 (additive_expr)


state 130

   52 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   54 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 97

    $default  reduce using rule 54 (relational_expr)


state 131

   54 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   56 assignment_expr: assignment_expr "assignment operator =" relational_expr .  ["closing paranthesis )", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 98

    $default  reduce using rule 56 (assignment_expr)


state 132

   56 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   59 expr: var_expr "assignment operator =" assignment_expr .  ["closing paranthesis )", ",", ";"]

    "assignment operator ="  shift, and go to state 99

    $default  reduce using rule 59 (expr)


state 133

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 134

   91 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 91 (interface_qualifier)


state 135

   93 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 93 (interface_qualifier_stmts)


state 136

   74 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 74 (tuple_typeexpr_arg)


state 137

   72 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 72 (tuple_typeexpr_args)


state 138

   71 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 71 (tuple_typeexpr_args)


state 139

   88 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 88 (structure_qualifier_stmt)


state 140

   89 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 148


state 141

   83 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 83 (structure_qualifier)


state 142

   87 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 87 (structure_qualifier_stmts)


state 143

   97 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 149


state 144

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41 call_arg: "identifier" ":" . expr
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 150
    var_expr             go to state 70


state 145

   38 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 38 (postfix_expr)


state 146

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   40 call_args: call_args "," . call_arg
   41 call_arg: . "identifier" ":" expr
   42         | . expr
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 120
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57

    primary_expr         go to state 61
    postfix_expr         go to state 62
    call_arg             go to state 151
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 124
    var_expr             go to state 70


state 147

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32 postfix_expr: . primary_expr
   33             | . postfix_expr OPERATOR
   34             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   34             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   35             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   35             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   36             | . postfix_expr "." "identifier"
   37             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   38             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   39 call_args: . call_arg
   40          | . call_args "," call_arg
   41 call_arg: . "identifier" ":" expr
   42         | . expr
   43 prefix_expr: . postfix_expr
   44            | . any_operator prefix_expr
   45 any_operator: . MULTIPLICATIVE_OPERATOR
   46             | . ADDITIVE_OPERATOR
   47             | . RELATIONAL_OPERATOR
   48             | . OPERATOR
   49 multiplicative_expr: . prefix_expr
   50                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   51 additive_expr: . multiplicative_expr
   52              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   53 relational_expr: . additive_expr
   54                | . relational_expr RELATIONAL_OPERATOR additive_expr
   55 assignment_expr: . relational_expr
   56                | . assignment_expr "assignment operator =" relational_expr
   57 expr: . assignment_expr
   58     | . var_expr
   59     | . var_expr "assignment operator =" assignment_expr
   60 var_expr: . "var keyword" "identifier" typeexpr
   61         | . "var keyword" "identifier"

    "identifier"             shift, and go to state 120
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing paranthesis )"  shift, and go to state 152

    primary_expr         go to state 61
    postfix_expr         go to state 62
    call_args            go to state 153
    call_arg             go to state 123
    prefix_expr          go to state 63
    any_operator         go to state 64
    multiplicative_expr  go to state 65
    additive_expr        go to state 66
    relational_expr      go to state 67
    assignment_expr      go to state 68
    expr                 go to state 124
    var_expr             go to state 70


state 148

   89 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 89 (structure_qualifier_stmt)


state 149

   97 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 154


state 150

   41 call_arg: "identifier" ":" expr .

    $default  reduce using rule 41 (call_arg)


state 151

   40 call_args: call_args "," call_arg .

    $default  reduce using rule 40 (call_args)


state 152

   34 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 34 (postfix_expr)


state 153

   35 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   40 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 155
    ","                      shift, and go to state 146


state 154

   97 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 97 (range_qualifier)


state 155

   35 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 35 (postfix_expr)
