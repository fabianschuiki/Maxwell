/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/MutableType.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::MutableType;
using ast::NodePtr;
using ast::NodeVector;

MutableType::MutableType() : Node() {}

bool MutableType::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kMutableType;
}

bool MutableType::implements(Interface i) {
	if (Node::implements(i)) return true;
	return false;
}

NodePtr MutableType::copy() {
	Ptr c (new MutableType);
	Node::copy(this->type, c->type);
	return c;
}

bool MutableType::equalTo(const NodePtr& o) {
	const shared_ptr<MutableType>& other = boost::dynamic_pointer_cast<MutableType>(o);
	if (!other) return false;
	if (!equal(this->type, other->type)) return false;
	return true;
}

std::string MutableType::describe(int depth) {
	std::stringstream str, b;
	str << '&' << type->describe(depth);
	return str.str();
}


void MutableType::setType(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType) && !v->isKindOf(kMutableType) && !v->isKindOf(kMutableCastType) && !v->isKindOf(kImmutableCastType)) {
		throw std::runtime_error("'type' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType, MutableType, MutableCastType, ImmutableCastType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, type)) {
		modify("type");
		type = v;
	}
}

const NodePtr& MutableType::getType(bool required) {
	const NodePtr& v = type;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have type set to a non-null value.");
	}
	return v;
}


void MutableType::encode(Encoder& e) {
	e.encode(this->type);
}

void MutableType::decode(Decoder& d) {
	d.decode(this->type);
}


void MutableType::updateHierarchyOfChildren() {
	if (this->type) this->type->updateHierarchy(id + "type", repository, this);
}

const NodePtr& MutableType::resolvePath(const std::string& path) {
	size_t size = path.size();
	// type.*
	if (size >= 4 && path[0] == 't' && path[1] == 'y' && path[2] == 'p' && path[3] == 'e') {
		// type
		if (size == 4) {
			return getType();
		} else if (path[4] == '.') {
			return getType()->resolvePath(path.substr(5));
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector MutableType::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getType(false)) v.push_back(n);
	return v;
}

