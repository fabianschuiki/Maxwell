/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class FunctionDefinition : public Node
{
public:
	FunctionDefinition() : Node() {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kFunctionDefinition;
	}

	virtual string getClassName() const { return "FunctionDefinition"; }

	void setGraphPrev(const NodePtr& v)
	{
		if (v != graphPrev) {
			modify();
			graphPrev = v;
			graphPrev_ref.clear();
		}
	}
	const NodePtr& getGraphPrev()
	{
	if (!graphPrev_ref.empty()) {
		graphPrev = resolveReference(graphPrev_ref);
		graphPrev_ref.clear();
	}
		return graphPrev;
	}

	void setName(const string& v)
	{
		if (v != name) {
			modify();
			name = v;
		}
	}
	const string& getName()
	{
		return name;
	}

	void setIn(const NodePtr& v)
	{
		if (v && !v->isKindOf(kFuncArgTuple)) {
			throw runtime_error("'in' needs to be of kind {FuncArgTuple} or implement interface {}.");
		}
		if (v != in) {
			modify();
			in = v;
		}
	}
	const NodePtr& getIn()
	{
		return in;
	}

	void setOut(const NodePtr& v)
	{
		if (v && !v->isKindOf(kFuncArgTuple)) {
			throw runtime_error("'out' needs to be of kind {FuncArgTuple} or implement interface {}.");
		}
		if (v != out) {
			modify();
			out = v;
		}
	}
	const NodePtr& getOut()
	{
		return out;
	}

	void setBody(const NodePtr& v)
	{
		if (v && !v->isKindOf(kFuncBody)) {
			throw runtime_error("'body' needs to be of kind {FuncBody} or implement interface {}.");
		}
		if (v != body) {
			modify();
			body = v;
		}
	}
	const NodePtr& getBody()
	{
		return body;
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "FunctionDefinition{â€¦}";
		stringstream str, b;
		str << "FunctionDefinition{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = " << indent(this->graphPrev->describe(depth-1));
		if (!this->name.empty()) b << endl << "  \033[1mname\033[0m = '\033[33m" << this->name << "\033[0m'";
		if (this->in) b << endl << "  \033[1min\033[0m = " << indent(this->in->describe(depth-1));
		if (this->out) b << endl << "  \033[1mout\033[0m = " << indent(this->out->describe(depth-1));
		if (this->body) b << endl << "  \033[1mbody\033[0m = " << indent(this->body->describe(depth-1));
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev, &graphPrev_ref);
		e.encode(this->name);
		e.encode(this->in);
		e.encode(this->out);
		e.encode(this->body);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev, &graphPrev_ref);
		d.decode(this->name);
		d.decode(this->in);
		d.decode(this->out);
		d.decode(this->body);
	}

	virtual void updateHierarchy(const NodeId& id, const weak_ptr<Repository>& repository = weak_ptr<Repository>(), const weak_ptr<Node>& parent = weak_ptr<Node>())
	{
		Node::updateHierarchy(id, repository, parent);
		const NodePtr& self(shared_from_this());
		if (this->graphPrev) this->graphPrev->updateHierarchy(id + "graphPrev", repository, self);
		if (this->in) this->in->updateHierarchy(id + "in", repository, self);
		if (this->out) this->out->updateHierarchy(id + "out", repository, self);
		if (this->body) this->body->updateHierarchy(id + "body", repository, self);
	}

protected:
	NodePtr graphPrev;
	NodeId graphPrev_ref;
	string name;
	NodePtr in;
	NodePtr out;
	NodePtr body;
};

} // namespace ast