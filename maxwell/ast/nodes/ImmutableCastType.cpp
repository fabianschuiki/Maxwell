/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/ImmutableCastType.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::ImmutableCastType;
using ast::NodePtr;
using ast::NodeVector;

ImmutableCastType::ImmutableCastType() : Node() {}

bool ImmutableCastType::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kImmutableCastType;
}

bool ImmutableCastType::implements(Interface i) {
	if (Node::implements(i)) return true;
	return false;
}

NodePtr ImmutableCastType::copy() {
	Ptr c (new ImmutableCastType);
	Node::copy(this->in, c->in);
	return c;
}

bool ImmutableCastType::equalTo(const NodePtr& o) {
	const shared_ptr<ImmutableCastType>& other = boost::dynamic_pointer_cast<ImmutableCastType>(o);
	if (!other) return false;
	if (!equal(this->in, other->in)) return false;
	return true;
}

std::string ImmutableCastType::describe(int depth) {
	std::stringstream str, b;
	str << "*(" << in->describe(depth) << ')';
	return str.str();
}


void ImmutableCastType::setIn(const NodePtr& v) {
	if (v && !v->isKindOf(kGenericType) && !v->isKindOf(kInvalidType) && !v->isKindOf(kNilType) && !v->isKindOf(kDefinedType) && !v->isKindOf(kUnionType) && !v->isKindOf(kTupleType) && !v->isKindOf(kFuncType) && !v->isKindOf(kTypeSet) && !v->isKindOf(kQualifiedType) && !v->isKindOf(kSpecializedType) && !v->isKindOf(kUnionMappedType) && !v->isKindOf(kOneTupleMappedType) && !v->isKindOf(kCastType) && !v->isKindOf(kNativeType) && !v->isKindOf(kMutableType) && !v->isKindOf(kMutableCastType) && !v->isKindOf(kImmutableCastType)) {
		throw std::runtime_error("'in' of " + id.str() + " needs to be of kind {GenericType, InvalidType, NilType, DefinedType, UnionType, TupleType, FuncType, TypeSet, QualifiedType, SpecializedType, UnionMappedType, OneTupleMappedType, CastType, NativeType, MutableType, MutableCastType, ImmutableCastType} or implement interface {}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, in)) {
		modify("in");
		in = v;
	}
}

const NodePtr& ImmutableCastType::getIn(bool required) {
	const NodePtr& v = in;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have in set to a non-null value.");
	}
	return v;
}


void ImmutableCastType::encode(Encoder& e) {
	e.encode(this->in);
}

void ImmutableCastType::decode(Decoder& d) {
	d.decode(this->in);
}


void ImmutableCastType::updateHierarchyOfChildren() {
	if (this->in) this->in->updateHierarchy(id + "in", repository, this);
}

const NodePtr& ImmutableCastType::resolvePath(const std::string& path) {
	size_t size = path.size();
	// in.*
	if (size >= 2 && path[0] == 'i' && path[1] == 'n') {
		// in
		if (size == 2) {
			return getIn();
		} else if (path[2] == '.') {
			return getIn()->resolvePath(path.substr(3));
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector ImmutableCastType::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getIn(false)) v.push_back(n);
	return v;
}

