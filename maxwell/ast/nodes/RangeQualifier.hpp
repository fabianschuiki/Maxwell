/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "maxwell/ast/Node.hpp"
#include "maxwell/ast/nodes/interfaces.hpp"
#include "maxwell/ast/nodes/types.hpp"

namespace ast {

class Encoder;
class Decoder;

class RangeQualifier : public Node
{
public:
	// constructor
	RangeQualifier();

	// auxiliary functions
	virtual bool isKindOf(Kind k);
	virtual bool implements(Interface i);
	virtual std::string getClassName() const { return "RangeQualifier"; }
	virtual NodePtr copy();
	virtual bool equalTo(const NodePtr& o);
	virtual std::string describe(int depth = -1);

	// accessor functions
	void setGraphPrev(const NodePtr& v);
	void setGraphPrev(const NodeId& v);
	const NodePtr& getGraphPrev(bool required = true);

	void setName(const std::string& v);
	const std::string& getName(bool required = true);

	void setMin(const std::string& v);
	const std::string& getMin(bool required = true);

	void setMax(const std::string& v);
	const std::string& getMax(bool required = true);

	// encoding and decoding
	virtual void encode(Encoder& e);
	virtual void decode(Decoder& d);

	// hierarchy functions
	virtual void updateHierarchyOfChildren();
	virtual const NodePtr& resolvePath(const std::string& path);

	// interfaces
	virtual GraphInterface* asGraph() { return &this->interfaceGraph; }
	virtual NamedInterface* asNamed() { return &this->interfaceNamed; }

	// shared_ptr convenience
	typedef boost::shared_ptr<RangeQualifier> Ptr;
	template<typename T> static Ptr from(const T& n) { return boost::dynamic_pointer_cast<RangeQualifier>(n); }
	template<typename T> static Ptr needFrom(const T& n) {
		Ptr r = boost::dynamic_pointer_cast<RangeQualifier>(n);
		if (!r)
			throw std::runtime_error("Node " + n->getId().str() + " (a " + n->getClassName() + ") cannot be dynamically cast to RangeQualifier.");
		return r;
	}

protected:
	NodeRef graphPrev;
	std::string name;
	std::string min;
	std::string max;

	// interfaces
	GraphInterfaceImpl<RangeQualifier> interfaceGraph;
	NamedInterfaceImpl<RangeQualifier> interfaceNamed;
};

} // namespace ast
