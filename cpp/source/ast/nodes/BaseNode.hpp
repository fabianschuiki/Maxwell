/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include <stdexcept>

namespace ast {

class CallInterface;
class GraphInterface;
class TypeInterface;
class TypeExprInterface;

class BaseNode
{
public:
	virtual CallInterface* asCall() { return NULL; }
	CallInterface* needCall() { CallInterface* i = asCall(); if (i) return i; throw std::runtime_error("Node does not implement Call interface."); }
	virtual GraphInterface* asGraph() { return NULL; }
	GraphInterface* needGraph() { GraphInterface* i = asGraph(); if (i) return i; throw std::runtime_error("Node does not implement Graph interface."); }
	virtual TypeInterface* asType() { return NULL; }
	TypeInterface* needType() { TypeInterface* i = asType(); if (i) return i; throw std::runtime_error("Node does not implement Type interface."); }
	virtual TypeExprInterface* asTypeExpr() { return NULL; }
	TypeExprInterface* needTypeExpr() { TypeExprInterface* i = asTypeExpr(); if (i) return i; throw std::runtime_error("Node does not implement TypeExpr interface."); }
};

} // namespace ast
