//Style 1
func square
: x Num    -> (x*x);
: v Vector -> (v.x:square + v.y:square);

func length
: v Vector -> sqrt(v:square);

//Style 2
func square
: x Num    -> r Num { r = x*x; }
: v Vector -> r Num { r = square(v.x) + square(v.y); }

func length
: v Vector -> l Num { l = sqrt(square(v)); }

/** Styles Summary */

//Compact style, which defines the function as an expression.
func square: x -> (x*x);

//Body style, which defines the function as a sequence of statements.
func suqare: x -> r {
	r = x*x;
}

/** Grammar */
//Possible function grammar:
func «name»
: «func1»
: «func2»
: «func3»

//Where the individual anonymous functions look as follows:
func sample
: rand();
: x -> (x*x);
: x { print(x); }
: x -> r { r = x*x; }

/** Examples */
//This yields the following functions:
func add: (a, b) -> (a + b);
func square: x -> x*x;
func name: (first, last) -> full {
	full = first." ".last;
}

//Which may be used as the following:
n := name("John", "Doe");
n := name(first: "John", last: "Doe");


//Functions may have alternative names so they can be used as infix and postfix.
func square: x -> x*x, postfix squared;
func add: (a, b) -> (a + b), infix (+);

func square, postfix squared: x -> x*x;
func add, infix (+): (a,b) -> (a + b);

//This gives the following possibilities:
x := 5 + 3;
y := 3|squared;
