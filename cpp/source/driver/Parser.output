Terminals which are not used

   "symbol"


Grammar

    0 $accept: root "end of input"

    1 root: root_stmts

    2 root_stmts: root_stmts root_stmt
    3           | root_stmt

    4 root_stmt: func_decl
    5          | type_decl

    6 func_decl: func_decl_name body
    7          | func_decl_name func_args_tuple body
    8          | func_decl_name "right arrow ->" func_args_tuple body
    9          | func_decl_name func_args_tuple "right arrow ->" func_args_tuple body

   10 func_decl_name: "func keyword" "identifier"
   11               | "func keyword" any_operator
   12               | "func keyword" "unary keyword" any_operator

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )"
   14                | func_arg
   15                | "opening paranthesis (" func_args "closing paranthesis )"

   16 func_args: func_arg
   17          | func_args "," func_arg

   18 func_arg: "identifier"
   19         | "identifier" typeexpr

   20 type_decl: type_decl_name
   21          | type_decl_name typeexpr

   22 type_decl_name: "type keyword" "identifier"

   23 body: "opening braces {" "closing braces }"
   24     | "opening braces {" stmts "closing braces }"

   25 stmts: stmt
   26      | stmts stmt

   27 stmt: expr ";"

   28 primary_expr: "identifier"
   29             | "opening paranthesis (" expr "closing paranthesis )"
   30             | "number constant"
   31             | "string constant"
   32             | "opening bracket [" expr_list "closing bracket ]"
   33             | "opening braces {" expr_list "closing braces }"
   34             | "opening braces {" map_expr_pairs "closing braces }"

   35 map_expr_pairs: map_expr_pair
   36               | map_expr_pairs "," map_expr_pair

   37 map_expr_pair: primary_expr ":" expr

   38 postfix_expr: primary_expr
   39             | postfix_expr OPERATOR
   40             | postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | postfix_expr "." "identifier"
   43             | "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | "identifier" "opening paranthesis (" call_args "closing paranthesis )"

   45 call_args: call_arg
   46          | call_args "," call_arg

   47 call_arg: "identifier" ":" expr
   48         | expr

   49 prefix_expr: postfix_expr
   50            | any_operator prefix_expr

   51 any_operator: MULTIPLICATIVE_OPERATOR
   52             | ADDITIVE_OPERATOR
   53             | RELATIONAL_OPERATOR
   54             | OPERATOR

   55 multiplicative_expr: prefix_expr
   56                    | multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr

   57 additive_expr: multiplicative_expr
   58              | additive_expr ADDITIVE_OPERATOR multiplicative_expr

   59 relational_expr: additive_expr
   60                | relational_expr RELATIONAL_OPERATOR additive_expr

   61 assignment_expr: relational_expr
   62                | assignment_expr "assignment operator =" relational_expr

   63 var_expr: "var keyword" "identifier" typeexpr
   64         | "var keyword" "identifier"

   65 expr: assignment_expr
   66     | var_expr
   67     | var_expr "assignment operator =" assignment_expr

   68 expr_list: expr
   69          | expr_list "," expr

   70 typeexpr: nonunion_typeexpr
   71         | union_typeexpr

   72 nonunion_typeexpr: "identifier"
   73                  | tuple_typeexpr
   74                  | qualified_typeexpr

   75 union_typeexpr: union_typeexprs

   76 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | union_typeexprs "vertical pipe |" nonunion_typeexpr

   78 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"

   79 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg
   80                    | tuple_typeexpr_args "," tuple_typeexpr_arg

   81 tuple_typeexpr_arg: typeexpr
   82                   | "identifier" ":" typeexpr

   83 qualified_typeexpr: qualified_typeexpr_qualifiers

   84 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier
   85                              | qualified_typeexpr_qualifiers qualified_typeexpr_qualifier

   86 qualified_typeexpr_qualifier: structure_qualifier
   87                             | interface_qualifier
   88                             | native_qualifier
   89                             | range_qualifier

   90 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"

   92 structure_qualifier_decl: "value keyword"
   93                         | "object keyword"

   94 structure_qualifier_stmts: structure_qualifier_stmt
   95                          | structure_qualifier_stmts structure_qualifier_stmt

   96 structure_qualifier_stmt: "identifier" ";"
   97                         | "identifier" typeexpr ";"

   98 interface_qualifier: "interface keyword" "opening braces {" "closing braces }"
   99                    | "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"

  100 interface_qualifier_stmts: interface_qualifier_stmt
  101                          | interface_qualifier_stmts interface_qualifier_stmt

  102 interface_qualifier_stmt: "identifier"

  103 native_qualifier: "native keyword" "identifier"

  104 range_qualifier: range_qualifier_decl
  105                | range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

  106 range_qualifier_decl: "range keyword" "identifier"


Terminals, with rules where they appear

"end of input" (0) 0
error (256)
"identifier" (258) 10 18 19 22 28 40 41 42 43 44 47 63 64 72 82 96
    97 102 103 106
"number constant" (259) 30 105
"string constant" (260) 31
MULTIPLICATIVE_OPERATOR (261) 51 56
ADDITIVE_OPERATOR (262) 52 58
RELATIONAL_OPERATOR (263) 53 60
OPERATOR (264) 39 54
"symbol" (265)
"func keyword" (266) 10 11 12
"var keyword" (267) 63 64
"type keyword" (268) 22
"unary keyword" (269) 12
"value keyword" (270) 92
"object keyword" (271) 93
"interface keyword" (272) 98 99
"native keyword" (273) 103
"range keyword" (274) 106
"opening paranthesis (" (275) 13 15 29 40 41 43 44 78 105
"closing paranthesis )" (276) 13 15 29 40 41 43 44 78 105
"opening braces {" (277) 23 24 33 34 90 91 98 99
"closing braces }" (278) 23 24 33 34 90 91 98 99
"opening bracket [" (279) 32
"closing bracket ]" (280) 32
"vertical pipe |" (281) 76 77
"." (282) 40 41 42
"," (283) 17 36 46 69 79 80 105
":" (284) 37 47 82
";" (285) 27 96 97
"right arrow ->" (286) 8 9
"assignment operator =" (287) 62 67


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
root (34)
    on left: 1, on right: 0
root_stmts (35)
    on left: 2 3, on right: 1 2
root_stmt (36)
    on left: 4 5, on right: 2 3
func_decl (37)
    on left: 6 7 8 9, on right: 4
func_decl_name (38)
    on left: 10 11 12, on right: 6 7 8 9
func_args_tuple (39)
    on left: 13 14 15, on right: 7 8 9
func_args (40)
    on left: 16 17, on right: 15 17
func_arg (41)
    on left: 18 19, on right: 14 16 17
type_decl (42)
    on left: 20 21, on right: 5
type_decl_name (43)
    on left: 22, on right: 20 21
body (44)
    on left: 23 24, on right: 6 7 8 9
stmts (45)
    on left: 25 26, on right: 24 26
stmt (46)
    on left: 27, on right: 25 26
primary_expr (47)
    on left: 28 29 30 31 32 33 34, on right: 37 38
map_expr_pairs (48)
    on left: 35 36, on right: 34 36
map_expr_pair (49)
    on left: 37, on right: 35 36
postfix_expr (50)
    on left: 38 39 40 41 42 43 44, on right: 39 40 41 42 49
call_args (51)
    on left: 45 46, on right: 41 44 46
call_arg (52)
    on left: 47 48, on right: 45 46
prefix_expr (53)
    on left: 49 50, on right: 50 55 56
any_operator (54)
    on left: 51 52 53 54, on right: 11 12 50
multiplicative_expr (55)
    on left: 55 56, on right: 56 57 58
additive_expr (56)
    on left: 57 58, on right: 58 59 60
relational_expr (57)
    on left: 59 60, on right: 60 61 62
assignment_expr (58)
    on left: 61 62, on right: 62 65 67
var_expr (59)
    on left: 63 64, on right: 66 67
expr (60)
    on left: 65 66 67, on right: 27 29 37 47 48 68 69
expr_list (61)
    on left: 68 69, on right: 32 33 69
typeexpr (62)
    on left: 70 71, on right: 19 21 63 81 82 97
nonunion_typeexpr (63)
    on left: 72 73 74, on right: 70 76 77
union_typeexpr (64)
    on left: 75, on right: 71
union_typeexprs (65)
    on left: 76 77, on right: 75 77
tuple_typeexpr (66)
    on left: 78, on right: 73
tuple_typeexpr_args (67)
    on left: 79 80, on right: 78 80
tuple_typeexpr_arg (68)
    on left: 81 82, on right: 79 80
qualified_typeexpr (69)
    on left: 83, on right: 74
qualified_typeexpr_qualifiers (70)
    on left: 84 85, on right: 83 85
qualified_typeexpr_qualifier (71)
    on left: 86 87 88 89, on right: 84 85
structure_qualifier (72)
    on left: 90 91, on right: 86
structure_qualifier_decl (73)
    on left: 92 93, on right: 90 91
structure_qualifier_stmts (74)
    on left: 94 95, on right: 91 95
structure_qualifier_stmt (75)
    on left: 96 97, on right: 94 95
interface_qualifier (76)
    on left: 98 99, on right: 87
interface_qualifier_stmts (77)
    on left: 100 101, on right: 99 101
interface_qualifier_stmt (78)
    on left: 102, on right: 100 101
native_qualifier (79)
    on left: 103, on right: 88
range_qualifier (80)
    on left: 104 105, on right: 89
range_qualifier_decl (81)
    on left: 106, on right: 104 105


state 0

    0 $accept: . root "end of input"
    1 root: . root_stmts
    2 root_stmts: . root_stmts root_stmt
    3           | . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    root            go to state 3
    root_stmts      go to state 4
    root_stmt       go to state 5
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 1

   10 func_decl_name: "func keyword" . "identifier"
   11               | "func keyword" . any_operator
   12               | "func keyword" . "unary keyword" any_operator
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR

    "identifier"             shift, and go to state 10
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "unary keyword"          shift, and go to state 15

    any_operator  go to state 16


state 2

   22 type_decl_name: "type keyword" . "identifier"

    "identifier"  shift, and go to state 17


state 3

    0 $accept: root . "end of input"

    "end of input"  shift, and go to state 18


state 4

    1 root: root_stmts .  ["end of input"]
    2 root_stmts: root_stmts . root_stmt
    4 root_stmt: . func_decl
    5          | . type_decl
    6 func_decl: . func_decl_name body
    7          | . func_decl_name func_args_tuple body
    8          | . func_decl_name "right arrow ->" func_args_tuple body
    9          | . func_decl_name func_args_tuple "right arrow ->" func_args_tuple body
   10 func_decl_name: . "func keyword" "identifier"
   11               | . "func keyword" any_operator
   12               | . "func keyword" "unary keyword" any_operator
   20 type_decl: . type_decl_name
   21          | . type_decl_name typeexpr
   22 type_decl_name: . "type keyword" "identifier"

    "func keyword"  shift, and go to state 1
    "type keyword"  shift, and go to state 2

    $default  reduce using rule 1 (root)

    root_stmt       go to state 19
    func_decl       go to state 6
    func_decl_name  go to state 7
    type_decl       go to state 8
    type_decl_name  go to state 9


state 5

    3 root_stmts: root_stmt .

    $default  reduce using rule 3 (root_stmts)


state 6

    4 root_stmt: func_decl .

    $default  reduce using rule 4 (root_stmt)


state 7

    6 func_decl: func_decl_name . body
    7          | func_decl_name . func_args_tuple body
    8          | func_decl_name . "right arrow ->" func_args_tuple body
    9          | func_decl_name . func_args_tuple "right arrow ->" func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21
    "opening braces {"       shift, and go to state 22
    "right arrow ->"         shift, and go to state 23

    func_args_tuple  go to state 24
    func_arg         go to state 25
    body             go to state 26


state 8

    5 root_stmt: type_decl .

    $default  reduce using rule 5 (root_stmt)


state 9

   20 type_decl: type_decl_name .  ["end of input", "func keyword", "type keyword"]
   21          | type_decl_name . typeexpr
   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 20 (type_decl)

    typeexpr                       go to state 34
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 10

   10 func_decl_name: "func keyword" "identifier" .

    $default  reduce using rule 10 (func_decl_name)


state 11

   51 any_operator: MULTIPLICATIVE_OPERATOR .

    $default  reduce using rule 51 (any_operator)


state 12

   52 any_operator: ADDITIVE_OPERATOR .

    $default  reduce using rule 52 (any_operator)


state 13

   53 any_operator: RELATIONAL_OPERATOR .

    $default  reduce using rule 53 (any_operator)


state 14

   54 any_operator: OPERATOR .

    $default  reduce using rule 54 (any_operator)


state 15

   12 func_decl_name: "func keyword" "unary keyword" . any_operator
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR

    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14

    any_operator  go to state 48


state 16

   11 func_decl_name: "func keyword" any_operator .

    $default  reduce using rule 11 (func_decl_name)


state 17

   22 type_decl_name: "type keyword" "identifier" .

    $default  reduce using rule 22 (type_decl_name)


state 18

    0 $accept: root "end of input" .

    $default  accept


state 19

    2 root_stmts: root_stmts root_stmt .

    $default  reduce using rule 2 (root_stmts)


state 20

   18 func_arg: "identifier" .  ["closing paranthesis )", "opening braces {", ",", "right arrow ->"]
   19         | "identifier" . typeexpr
   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 18 (func_arg)

    typeexpr                       go to state 49
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 21

   13 func_args_tuple: "opening paranthesis (" . "closing paranthesis )"
   15                | "opening paranthesis (" . func_args "closing paranthesis )"
   16 func_args: . func_arg
   17          | . func_args "," func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "closing paranthesis )"  shift, and go to state 50

    func_args  go to state 51
    func_arg   go to state 52


state 22

   23 body: "opening braces {" . "closing braces }"
   24     | "opening braces {" . stmts "closing braces }"
   25 stmts: . stmt
   26      | . stmts stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "closing braces }"       shift, and go to state 59
    "opening bracket ["      shift, and go to state 60

    stmts                go to state 61
    stmt                 go to state 62
    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 72


state 23

    8 func_decl: func_decl_name "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 73
    func_arg         go to state 25


state 24

    7 func_decl: func_decl_name func_args_tuple . body
    9          | func_decl_name func_args_tuple . "right arrow ->" func_args_tuple body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22
    "right arrow ->"    shift, and go to state 74

    body  go to state 75


state 25

   14 func_args_tuple: func_arg .

    $default  reduce using rule 14 (func_args_tuple)


state 26

    6 func_decl: func_decl_name body .

    $default  reduce using rule 6 (func_decl)


state 27

   72 nonunion_typeexpr: "identifier" .

    $default  reduce using rule 72 (nonunion_typeexpr)


state 28

   92 structure_qualifier_decl: "value keyword" .

    $default  reduce using rule 92 (structure_qualifier_decl)


state 29

   93 structure_qualifier_decl: "object keyword" .

    $default  reduce using rule 93 (structure_qualifier_decl)


state 30

   98 interface_qualifier: "interface keyword" . "opening braces {" "closing braces }"
   99                    | "interface keyword" . "opening braces {" interface_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 76


state 31

  103 native_qualifier: "native keyword" . "identifier"

    "identifier"  shift, and go to state 77


state 32

  106 range_qualifier_decl: "range keyword" . "identifier"

    "identifier"  shift, and go to state 78


state 33

   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   78               | "opening paranthesis (" . tuple_typeexpr_args "closing paranthesis )"
   79 tuple_typeexpr_args: . tuple_typeexpr_arg "," tuple_typeexpr_arg
   80                    | . tuple_typeexpr_args "," tuple_typeexpr_arg
   81 tuple_typeexpr_arg: . typeexpr
   82                   | . "identifier" ":" typeexpr
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 79
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 80
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_args            go to state 81
    tuple_typeexpr_arg             go to state 82
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 34

   21 type_decl: type_decl_name typeexpr .

    $default  reduce using rule 21 (type_decl)


state 35

   70 typeexpr: nonunion_typeexpr .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   76 union_typeexprs: nonunion_typeexpr . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 83

    $default  reduce using rule 70 (typeexpr)


state 36

   71 typeexpr: union_typeexpr .

    $default  reduce using rule 71 (typeexpr)


state 37

   75 union_typeexpr: union_typeexprs .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", ",", ";", "right arrow ->", "assignment operator ="]
   77 union_typeexprs: union_typeexprs . "vertical pipe |" nonunion_typeexpr

    "vertical pipe |"  shift, and go to state 84

    $default  reduce using rule 75 (union_typeexpr)


state 38

   73 nonunion_typeexpr: tuple_typeexpr .

    $default  reduce using rule 73 (nonunion_typeexpr)


state 39

   74 nonunion_typeexpr: qualified_typeexpr .

    $default  reduce using rule 74 (nonunion_typeexpr)


state 40

   83 qualified_typeexpr: qualified_typeexpr_qualifiers .  ["end of input", "func keyword", "type keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
   85 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers . qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "value keyword"      shift, and go to state 28
    "object keyword"     shift, and go to state 29
    "interface keyword"  shift, and go to state 30
    "native keyword"     shift, and go to state 31
    "range keyword"      shift, and go to state 32

    $default  reduce using rule 83 (qualified_typeexpr)

    qualified_typeexpr_qualifier  go to state 85
    structure_qualifier           go to state 42
    structure_qualifier_decl      go to state 43
    interface_qualifier           go to state 44
    native_qualifier              go to state 45
    range_qualifier               go to state 46
    range_qualifier_decl          go to state 47


state 41

   84 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifier .

    $default  reduce using rule 84 (qualified_typeexpr_qualifiers)


state 42

   86 qualified_typeexpr_qualifier: structure_qualifier .

    $default  reduce using rule 86 (qualified_typeexpr_qualifier)


state 43

   90 structure_qualifier: structure_qualifier_decl . "opening braces {" "closing braces }"
   91                    | structure_qualifier_decl . "opening braces {" structure_qualifier_stmts "closing braces }"

    "opening braces {"  shift, and go to state 86


state 44

   87 qualified_typeexpr_qualifier: interface_qualifier .

    $default  reduce using rule 87 (qualified_typeexpr_qualifier)


state 45

   88 qualified_typeexpr_qualifier: native_qualifier .

    $default  reduce using rule 88 (qualified_typeexpr_qualifier)


state 46

   89 qualified_typeexpr_qualifier: range_qualifier .

    $default  reduce using rule 89 (qualified_typeexpr_qualifier)


state 47

  104 range_qualifier: range_qualifier_decl .  ["end of input", "func keyword", "type keyword", "value keyword", "object keyword", "interface keyword", "native keyword", "range keyword", "closing paranthesis )", "opening braces {", "closing braces }", "closing bracket ]", "vertical pipe |", ",", ";", "right arrow ->", "assignment operator ="]
  105                | range_qualifier_decl . "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 87

    $default  reduce using rule 104 (range_qualifier)


state 48

   12 func_decl_name: "func keyword" "unary keyword" any_operator .

    $default  reduce using rule 12 (func_decl_name)


state 49

   19 func_arg: "identifier" typeexpr .

    $default  reduce using rule 19 (func_arg)


state 50

   13 func_args_tuple: "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 13 (func_args_tuple)


state 51

   15 func_args_tuple: "opening paranthesis (" func_args . "closing paranthesis )"
   17 func_args: func_args . "," func_arg

    "closing paranthesis )"  shift, and go to state 88
    ","                      shift, and go to state 89


state 52

   16 func_args: func_arg .

    $default  reduce using rule 16 (func_args)


state 53

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ":", ";", "assignment operator ="]
   43 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   44             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"

    "opening paranthesis ("  shift, and go to state 90

    $default  reduce using rule 28 (primary_expr)


state 54

   30 primary_expr: "number constant" .

    $default  reduce using rule 30 (primary_expr)


state 55

   31 primary_expr: "string constant" .

    $default  reduce using rule 31 (primary_expr)


state 56

   63 var_expr: "var keyword" . "identifier" typeexpr
   64         | "var keyword" . "identifier"

    "identifier"  shift, and go to state 91


state 57

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   29             | "opening paranthesis (" . expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 92


state 58

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   33             | "opening braces {" . expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   34             | "opening braces {" . map_expr_pairs "closing braces }"
   35 map_expr_pairs: . map_expr_pair
   36               | . map_expr_pairs "," map_expr_pair
   37 map_expr_pair: . primary_expr ":" expr
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr
   68 expr_list: . expr
   69          | . expr_list "," expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 93
    map_expr_pairs       go to state 94
    map_expr_pair        go to state 95
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 96
    expr_list            go to state 97


state 59

   23 body: "opening braces {" "closing braces }" .

    $default  reduce using rule 23 (body)


state 60

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   32             | "opening bracket [" . expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr
   68 expr_list: . expr
   69          | . expr_list "," expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 96
    expr_list            go to state 98


state 61

   24 body: "opening braces {" stmts . "closing braces }"
   26 stmts: stmts . stmt
   27 stmt: . expr ";"
   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "closing braces }"       shift, and go to state 99
    "opening bracket ["      shift, and go to state 60

    stmt                 go to state 100
    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 72


state 62

   25 stmts: stmt .

    $default  reduce using rule 25 (stmts)


state 63

   38 postfix_expr: primary_expr .

    $default  reduce using rule 38 (postfix_expr)


state 64

   39 postfix_expr: postfix_expr . OPERATOR
   40             | postfix_expr . "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | postfix_expr . "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | postfix_expr . "." "identifier"
   49 prefix_expr: postfix_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    OPERATOR  shift, and go to state 101
    "."       shift, and go to state 102

    $default  reduce using rule 49 (prefix_expr)


state 65

   55 multiplicative_expr: prefix_expr .

    $default  reduce using rule 55 (multiplicative_expr)


state 66

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   50            | any_operator . prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr  go to state 63
    postfix_expr  go to state 64
    prefix_expr   go to state 103
    any_operator  go to state 66


state 67

   56 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 104

    $default  reduce using rule 57 (additive_expr)


state 68

   58 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 105

    $default  reduce using rule 59 (relational_expr)


state 69

   60 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: relational_expr .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 106

    $default  reduce using rule 61 (assignment_expr)


state 70

   62 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   65 expr: assignment_expr .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 107

    $default  reduce using rule 65 (expr)


state 71

   66 expr: var_expr .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]
   67     | var_expr . "assignment operator =" assignment_expr

    "assignment operator ="  shift, and go to state 108

    $default  reduce using rule 66 (expr)


state 72

   27 stmt: expr . ";"

    ";"  shift, and go to state 109


state 73

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 110


state 74

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" . func_args_tuple body
   13 func_args_tuple: . "opening paranthesis (" "closing paranthesis )"
   14                | . func_arg
   15                | . "opening paranthesis (" func_args "closing paranthesis )"
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"             shift, and go to state 20
    "opening paranthesis ("  shift, and go to state 21

    func_args_tuple  go to state 111
    func_arg         go to state 25


state 75

    7 func_decl: func_decl_name func_args_tuple body .

    $default  reduce using rule 7 (func_decl)


state 76

   98 interface_qualifier: "interface keyword" "opening braces {" . "closing braces }"
   99                    | "interface keyword" "opening braces {" . interface_qualifier_stmts "closing braces }"
  100 interface_qualifier_stmts: . interface_qualifier_stmt
  101                          | . interface_qualifier_stmts interface_qualifier_stmt
  102 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 112
    "closing braces }"  shift, and go to state 113

    interface_qualifier_stmts  go to state 114
    interface_qualifier_stmt   go to state 115


state 77

  103 native_qualifier: "native keyword" "identifier" .

    $default  reduce using rule 103 (native_qualifier)


state 78

  106 range_qualifier_decl: "range keyword" "identifier" .

    $default  reduce using rule 106 (range_qualifier_decl)


state 79

   72 nonunion_typeexpr: "identifier" .  ["closing paranthesis )", "vertical pipe |", ","]
   82 tuple_typeexpr_arg: "identifier" . ":" typeexpr

    ":"  shift, and go to state 116

    $default  reduce using rule 72 (nonunion_typeexpr)


state 80

   81 tuple_typeexpr_arg: typeexpr .

    $default  reduce using rule 81 (tuple_typeexpr_arg)


state 81

   78 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args . "closing paranthesis )"
   80 tuple_typeexpr_args: tuple_typeexpr_args . "," tuple_typeexpr_arg

    "closing paranthesis )"  shift, and go to state 117
    ","                      shift, and go to state 118


state 82

   79 tuple_typeexpr_args: tuple_typeexpr_arg . "," tuple_typeexpr_arg

    ","  shift, and go to state 119


state 83

   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   76 union_typeexprs: nonunion_typeexpr "vertical pipe |" . nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 120
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 84

   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   77 union_typeexprs: union_typeexprs "vertical pipe |" . nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    nonunion_typeexpr              go to state 121
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 85

   85 qualified_typeexpr_qualifiers: qualified_typeexpr_qualifiers qualified_typeexpr_qualifier .

    $default  reduce using rule 85 (qualified_typeexpr_qualifiers)


state 86

   90 structure_qualifier: structure_qualifier_decl "opening braces {" . "closing braces }"
   91                    | structure_qualifier_decl "opening braces {" . structure_qualifier_stmts "closing braces }"
   94 structure_qualifier_stmts: . structure_qualifier_stmt
   95                          | . structure_qualifier_stmts structure_qualifier_stmt
   96 structure_qualifier_stmt: . "identifier" ";"
   97                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 122
    "closing braces }"  shift, and go to state 123

    structure_qualifier_stmts  go to state 124
    structure_qualifier_stmt   go to state 125


state 87

  105 range_qualifier: range_qualifier_decl "opening paranthesis (" . "number constant" "," "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 126


state 88

   15 func_args_tuple: "opening paranthesis (" func_args "closing paranthesis )" .

    $default  reduce using rule 15 (func_args_tuple)


state 89

   17 func_args: func_args "," . func_arg
   18 func_arg: . "identifier"
   19         | . "identifier" typeexpr

    "identifier"  shift, and go to state 20

    func_arg  go to state 127


state 90

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   43             | "identifier" "opening paranthesis (" . "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   44             | "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   45 call_args: . call_arg
   46          | . call_args "," call_arg
   47 call_arg: . "identifier" ":" expr
   48         | . expr
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 128
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing paranthesis )"  shift, and go to state 129
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    call_args            go to state 130
    call_arg             go to state 131
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 132


state 91

   63 var_expr: "var keyword" "identifier" . typeexpr
   64         | "var keyword" "identifier" .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]
   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    $default  reduce using rule 64 (var_expr)

    typeexpr                       go to state 133
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 92

   29 primary_expr: "opening paranthesis (" expr . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 134


state 93

   37 map_expr_pair: primary_expr . ":" expr
   38 postfix_expr: primary_expr .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing braces }", ".", ",", "assignment operator ="]

    ":"  shift, and go to state 135

    $default  reduce using rule 38 (postfix_expr)


state 94

   34 primary_expr: "opening braces {" map_expr_pairs . "closing braces }"
   36 map_expr_pairs: map_expr_pairs . "," map_expr_pair

    "closing braces }"  shift, and go to state 136
    ","                 shift, and go to state 137


state 95

   35 map_expr_pairs: map_expr_pair .

    $default  reduce using rule 35 (map_expr_pairs)


state 96

   68 expr_list: expr .

    $default  reduce using rule 68 (expr_list)


state 97

   33 primary_expr: "opening braces {" expr_list . "closing braces }"
   69 expr_list: expr_list . "," expr

    "closing braces }"  shift, and go to state 138
    ","                 shift, and go to state 139


state 98

   32 primary_expr: "opening bracket [" expr_list . "closing bracket ]"
   69 expr_list: expr_list . "," expr

    "closing bracket ]"  shift, and go to state 140
    ","                  shift, and go to state 139


state 99

   24 body: "opening braces {" stmts "closing braces }" .

    $default  reduce using rule 24 (body)


state 100

   26 stmts: stmts stmt .

    $default  reduce using rule 26 (stmts)


state 101

   39 postfix_expr: postfix_expr OPERATOR .

    $default  reduce using rule 39 (postfix_expr)


state 102

   40 postfix_expr: postfix_expr "." . "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | postfix_expr "." . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | postfix_expr "." . "identifier"

    "identifier"  shift, and go to state 141


state 103

   50 prefix_expr: any_operator prefix_expr .

    $default  reduce using rule 50 (prefix_expr)


state 104

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   56 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR . prefix_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr  go to state 63
    postfix_expr  go to state 64
    prefix_expr   go to state 142
    any_operator  go to state 66


state 105

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   58 additive_expr: additive_expr ADDITIVE_OPERATOR . multiplicative_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 143


state 106

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   60 relational_expr: relational_expr RELATIONAL_OPERATOR . additive_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 144


state 107

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   62 assignment_expr: assignment_expr "assignment operator =" . relational_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 145


state 108

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   67 expr: var_expr "assignment operator =" . assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 146


state 109

   27 stmt: expr ";" .

    $default  reduce using rule 27 (stmt)


state 110

    8 func_decl: func_decl_name "right arrow ->" func_args_tuple body .

    $default  reduce using rule 8 (func_decl)


state 111

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple . body
   23 body: . "opening braces {" "closing braces }"
   24     | . "opening braces {" stmts "closing braces }"

    "opening braces {"  shift, and go to state 22

    body  go to state 147


state 112

  102 interface_qualifier_stmt: "identifier" .

    $default  reduce using rule 102 (interface_qualifier_stmt)


state 113

   98 interface_qualifier: "interface keyword" "opening braces {" "closing braces }" .

    $default  reduce using rule 98 (interface_qualifier)


state 114

   99 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts . "closing braces }"
  101 interface_qualifier_stmts: interface_qualifier_stmts . interface_qualifier_stmt
  102 interface_qualifier_stmt: . "identifier"

    "identifier"        shift, and go to state 112
    "closing braces }"  shift, and go to state 148

    interface_qualifier_stmt  go to state 149


state 115

  100 interface_qualifier_stmts: interface_qualifier_stmt .

    $default  reduce using rule 100 (interface_qualifier_stmts)


state 116

   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   82 tuple_typeexpr_arg: "identifier" ":" . typeexpr
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 150
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 117

   78 tuple_typeexpr: "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )" .

    $default  reduce using rule 78 (tuple_typeexpr)


state 118

   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   80 tuple_typeexpr_args: tuple_typeexpr_args "," . tuple_typeexpr_arg
   81 tuple_typeexpr_arg: . typeexpr
   82                   | . "identifier" ":" typeexpr
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 79
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 80
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 151
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 119

   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   79 tuple_typeexpr_args: tuple_typeexpr_arg "," . tuple_typeexpr_arg
   81 tuple_typeexpr_arg: . typeexpr
   82                   | . "identifier" ":" typeexpr
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 79
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33

    typeexpr                       go to state 80
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    tuple_typeexpr_arg             go to state 152
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 120

   76 union_typeexprs: nonunion_typeexpr "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 76 (union_typeexprs)


state 121

   77 union_typeexprs: union_typeexprs "vertical pipe |" nonunion_typeexpr .

    $default  reduce using rule 77 (union_typeexprs)


state 122

   70 typeexpr: . nonunion_typeexpr
   71         | . union_typeexpr
   72 nonunion_typeexpr: . "identifier"
   73                  | . tuple_typeexpr
   74                  | . qualified_typeexpr
   75 union_typeexpr: . union_typeexprs
   76 union_typeexprs: . nonunion_typeexpr "vertical pipe |" nonunion_typeexpr
   77                | . union_typeexprs "vertical pipe |" nonunion_typeexpr
   78 tuple_typeexpr: . "opening paranthesis (" tuple_typeexpr_args "closing paranthesis )"
   83 qualified_typeexpr: . qualified_typeexpr_qualifiers
   84 qualified_typeexpr_qualifiers: . qualified_typeexpr_qualifier
   85                              | . qualified_typeexpr_qualifiers qualified_typeexpr_qualifier
   86 qualified_typeexpr_qualifier: . structure_qualifier
   87                             | . interface_qualifier
   88                             | . native_qualifier
   89                             | . range_qualifier
   90 structure_qualifier: . structure_qualifier_decl "opening braces {" "closing braces }"
   91                    | . structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }"
   92 structure_qualifier_decl: . "value keyword"
   93                         | . "object keyword"
   96 structure_qualifier_stmt: "identifier" . ";"
   97                         | "identifier" . typeexpr ";"
   98 interface_qualifier: . "interface keyword" "opening braces {" "closing braces }"
   99                    | . "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }"
  103 native_qualifier: . "native keyword" "identifier"
  104 range_qualifier: . range_qualifier_decl
  105                | . range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )"
  106 range_qualifier_decl: . "range keyword" "identifier"

    "identifier"             shift, and go to state 27
    "value keyword"          shift, and go to state 28
    "object keyword"         shift, and go to state 29
    "interface keyword"      shift, and go to state 30
    "native keyword"         shift, and go to state 31
    "range keyword"          shift, and go to state 32
    "opening paranthesis ("  shift, and go to state 33
    ";"                      shift, and go to state 153

    typeexpr                       go to state 154
    nonunion_typeexpr              go to state 35
    union_typeexpr                 go to state 36
    union_typeexprs                go to state 37
    tuple_typeexpr                 go to state 38
    qualified_typeexpr             go to state 39
    qualified_typeexpr_qualifiers  go to state 40
    qualified_typeexpr_qualifier   go to state 41
    structure_qualifier            go to state 42
    structure_qualifier_decl       go to state 43
    interface_qualifier            go to state 44
    native_qualifier               go to state 45
    range_qualifier                go to state 46
    range_qualifier_decl           go to state 47


state 123

   90 structure_qualifier: structure_qualifier_decl "opening braces {" "closing braces }" .

    $default  reduce using rule 90 (structure_qualifier)


state 124

   91 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts . "closing braces }"
   95 structure_qualifier_stmts: structure_qualifier_stmts . structure_qualifier_stmt
   96 structure_qualifier_stmt: . "identifier" ";"
   97                         | . "identifier" typeexpr ";"

    "identifier"        shift, and go to state 122
    "closing braces }"  shift, and go to state 155

    structure_qualifier_stmt  go to state 156


state 125

   94 structure_qualifier_stmts: structure_qualifier_stmt .

    $default  reduce using rule 94 (structure_qualifier_stmts)


state 126

  105 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" . "," "number constant" "closing paranthesis )"

    ","  shift, and go to state 157


state 127

   17 func_args: func_args "," func_arg .

    $default  reduce using rule 17 (func_args)


state 128

   28 primary_expr: "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", ".", ",", "assignment operator ="]
   43 postfix_expr: "identifier" . "opening paranthesis (" "closing paranthesis )"
   44             | "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   47 call_arg: "identifier" . ":" expr

    "opening paranthesis ("  shift, and go to state 90
    ":"                      shift, and go to state 158

    $default  reduce using rule 28 (primary_expr)


state 129

   43 postfix_expr: "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 43 (postfix_expr)


state 130

   44 postfix_expr: "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   46 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 159
    ","                      shift, and go to state 160


state 131

   45 call_args: call_arg .

    $default  reduce using rule 45 (call_args)


state 132

   48 call_arg: expr .

    $default  reduce using rule 48 (call_arg)


state 133

   63 var_expr: "var keyword" "identifier" typeexpr .

    $default  reduce using rule 63 (var_expr)


state 134

   29 primary_expr: "opening paranthesis (" expr "closing paranthesis )" .

    $default  reduce using rule 29 (primary_expr)


state 135

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   37 map_expr_pair: primary_expr ":" . expr
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 161


state 136

   34 primary_expr: "opening braces {" map_expr_pairs "closing braces }" .

    $default  reduce using rule 34 (primary_expr)


state 137

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   36 map_expr_pairs: map_expr_pairs "," . map_expr_pair
   37 map_expr_pair: . primary_expr ":" expr

    "identifier"             shift, and go to state 162
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr   go to state 163
    map_expr_pair  go to state 164


state 138

   33 primary_expr: "opening braces {" expr_list "closing braces }" .

    $default  reduce using rule 33 (primary_expr)


state 139

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr
   69 expr_list: expr_list "," . expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 165


state 140

   32 primary_expr: "opening bracket [" expr_list "closing bracket ]" .

    $default  reduce using rule 32 (primary_expr)


state 141

   40 postfix_expr: postfix_expr "." "identifier" . "opening paranthesis (" "closing paranthesis )"
   41             | postfix_expr "." "identifier" . "opening paranthesis (" call_args "closing paranthesis )"
   42             | postfix_expr "." "identifier" .  [MULTIPLICATIVE_OPERATOR, ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ".", ",", ";", "assignment operator ="]

    "opening paranthesis ("  shift, and go to state 166

    $default  reduce using rule 42 (postfix_expr)


state 142

   56 multiplicative_expr: multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr .

    $default  reduce using rule 56 (multiplicative_expr)


state 143

   56 multiplicative_expr: multiplicative_expr . MULTIPLICATIVE_OPERATOR prefix_expr
   58 additive_expr: additive_expr ADDITIVE_OPERATOR multiplicative_expr .  [ADDITIVE_OPERATOR, RELATIONAL_OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    MULTIPLICATIVE_OPERATOR  shift, and go to state 104

    $default  reduce using rule 58 (additive_expr)


state 144

   58 additive_expr: additive_expr . ADDITIVE_OPERATOR multiplicative_expr
   60 relational_expr: relational_expr RELATIONAL_OPERATOR additive_expr .  [RELATIONAL_OPERATOR, "closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    ADDITIVE_OPERATOR  shift, and go to state 105

    $default  reduce using rule 60 (relational_expr)


state 145

   60 relational_expr: relational_expr . RELATIONAL_OPERATOR additive_expr
   62 assignment_expr: assignment_expr "assignment operator =" relational_expr .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";", "assignment operator ="]

    RELATIONAL_OPERATOR  shift, and go to state 106

    $default  reduce using rule 62 (assignment_expr)


state 146

   62 assignment_expr: assignment_expr . "assignment operator =" relational_expr
   67 expr: var_expr "assignment operator =" assignment_expr .  ["closing paranthesis )", "closing braces }", "closing bracket ]", ",", ";"]

    "assignment operator ="  shift, and go to state 107

    $default  reduce using rule 67 (expr)


state 147

    9 func_decl: func_decl_name func_args_tuple "right arrow ->" func_args_tuple body .

    $default  reduce using rule 9 (func_decl)


state 148

   99 interface_qualifier: "interface keyword" "opening braces {" interface_qualifier_stmts "closing braces }" .

    $default  reduce using rule 99 (interface_qualifier)


state 149

  101 interface_qualifier_stmts: interface_qualifier_stmts interface_qualifier_stmt .

    $default  reduce using rule 101 (interface_qualifier_stmts)


state 150

   82 tuple_typeexpr_arg: "identifier" ":" typeexpr .

    $default  reduce using rule 82 (tuple_typeexpr_arg)


state 151

   80 tuple_typeexpr_args: tuple_typeexpr_args "," tuple_typeexpr_arg .

    $default  reduce using rule 80 (tuple_typeexpr_args)


state 152

   79 tuple_typeexpr_args: tuple_typeexpr_arg "," tuple_typeexpr_arg .

    $default  reduce using rule 79 (tuple_typeexpr_args)


state 153

   96 structure_qualifier_stmt: "identifier" ";" .

    $default  reduce using rule 96 (structure_qualifier_stmt)


state 154

   97 structure_qualifier_stmt: "identifier" typeexpr . ";"

    ";"  shift, and go to state 167


state 155

   91 structure_qualifier: structure_qualifier_decl "opening braces {" structure_qualifier_stmts "closing braces }" .

    $default  reduce using rule 91 (structure_qualifier)


state 156

   95 structure_qualifier_stmts: structure_qualifier_stmts structure_qualifier_stmt .

    $default  reduce using rule 95 (structure_qualifier_stmts)


state 157

  105 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," . "number constant" "closing paranthesis )"

    "number constant"  shift, and go to state 168


state 158

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   47 call_arg: "identifier" ":" . expr
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 53
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 169


state 159

   44 postfix_expr: "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 44 (postfix_expr)


state 160

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   46 call_args: call_args "," . call_arg
   47 call_arg: . "identifier" ":" expr
   48         | . expr
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 128
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    call_arg             go to state 170
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 132


state 161

   37 map_expr_pair: primary_expr ":" expr .

    $default  reduce using rule 37 (map_expr_pair)


state 162

   28 primary_expr: "identifier" .

    $default  reduce using rule 28 (primary_expr)


state 163

   37 map_expr_pair: primary_expr . ":" expr

    ":"  shift, and go to state 135


state 164

   36 map_expr_pairs: map_expr_pairs "," map_expr_pair .

    $default  reduce using rule 36 (map_expr_pairs)


state 165

   69 expr_list: expr_list "," expr .

    $default  reduce using rule 69 (expr_list)


state 166

   28 primary_expr: . "identifier"
   29             | . "opening paranthesis (" expr "closing paranthesis )"
   30             | . "number constant"
   31             | . "string constant"
   32             | . "opening bracket [" expr_list "closing bracket ]"
   33             | . "opening braces {" expr_list "closing braces }"
   34             | . "opening braces {" map_expr_pairs "closing braces }"
   38 postfix_expr: . primary_expr
   39             | . postfix_expr OPERATOR
   40             | . postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )"
   40             | postfix_expr "." "identifier" "opening paranthesis (" . "closing paranthesis )"
   41             | . postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   41             | postfix_expr "." "identifier" "opening paranthesis (" . call_args "closing paranthesis )"
   42             | . postfix_expr "." "identifier"
   43             | . "identifier" "opening paranthesis (" "closing paranthesis )"
   44             | . "identifier" "opening paranthesis (" call_args "closing paranthesis )"
   45 call_args: . call_arg
   46          | . call_args "," call_arg
   47 call_arg: . "identifier" ":" expr
   48         | . expr
   49 prefix_expr: . postfix_expr
   50            | . any_operator prefix_expr
   51 any_operator: . MULTIPLICATIVE_OPERATOR
   52             | . ADDITIVE_OPERATOR
   53             | . RELATIONAL_OPERATOR
   54             | . OPERATOR
   55 multiplicative_expr: . prefix_expr
   56                    | . multiplicative_expr MULTIPLICATIVE_OPERATOR prefix_expr
   57 additive_expr: . multiplicative_expr
   58              | . additive_expr ADDITIVE_OPERATOR multiplicative_expr
   59 relational_expr: . additive_expr
   60                | . relational_expr RELATIONAL_OPERATOR additive_expr
   61 assignment_expr: . relational_expr
   62                | . assignment_expr "assignment operator =" relational_expr
   63 var_expr: . "var keyword" "identifier" typeexpr
   64         | . "var keyword" "identifier"
   65 expr: . assignment_expr
   66     | . var_expr
   67     | . var_expr "assignment operator =" assignment_expr

    "identifier"             shift, and go to state 128
    "number constant"        shift, and go to state 54
    "string constant"        shift, and go to state 55
    MULTIPLICATIVE_OPERATOR  shift, and go to state 11
    ADDITIVE_OPERATOR        shift, and go to state 12
    RELATIONAL_OPERATOR      shift, and go to state 13
    OPERATOR                 shift, and go to state 14
    "var keyword"            shift, and go to state 56
    "opening paranthesis ("  shift, and go to state 57
    "closing paranthesis )"  shift, and go to state 171
    "opening braces {"       shift, and go to state 58
    "opening bracket ["      shift, and go to state 60

    primary_expr         go to state 63
    postfix_expr         go to state 64
    call_args            go to state 172
    call_arg             go to state 131
    prefix_expr          go to state 65
    any_operator         go to state 66
    multiplicative_expr  go to state 67
    additive_expr        go to state 68
    relational_expr      go to state 69
    assignment_expr      go to state 70
    var_expr             go to state 71
    expr                 go to state 132


state 167

   97 structure_qualifier_stmt: "identifier" typeexpr ";" .

    $default  reduce using rule 97 (structure_qualifier_stmt)


state 168

  105 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" . "closing paranthesis )"

    "closing paranthesis )"  shift, and go to state 173


state 169

   47 call_arg: "identifier" ":" expr .

    $default  reduce using rule 47 (call_arg)


state 170

   46 call_args: call_args "," call_arg .

    $default  reduce using rule 46 (call_args)


state 171

   40 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" "closing paranthesis )" .

    $default  reduce using rule 40 (postfix_expr)


state 172

   41 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args . "closing paranthesis )"
   46 call_args: call_args . "," call_arg

    "closing paranthesis )"  shift, and go to state 174
    ","                      shift, and go to state 160


state 173

  105 range_qualifier: range_qualifier_decl "opening paranthesis (" "number constant" "," "number constant" "closing paranthesis )" .

    $default  reduce using rule 105 (range_qualifier)


state 174

   41 postfix_expr: postfix_expr "." "identifier" "opening paranthesis (" call_args "closing paranthesis )" .

    $default  reduce using rule 41 (postfix_expr)
