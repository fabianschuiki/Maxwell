/* Copyright (c) 2013 Fabian Schuiki */

type Complex value { r Real; i Real; }

func makeComplex (r Real) = { var v Complex; v.r = r; v.i = 0.0; v; }
func makeComplex (r Real, i Real) = { var v Complex; v.r = r; v.i = i; v; }
func abs2 v Complex = v.r*v.r + v.i*v.i;
func re v Complex = v.r;
func im v Complex = v.i;
func conjugate v Complex = makeComplex(v.r, -v.i);
//func cast (r Real) -> (v Complex) { v.r = r; v.i = 0; }

func * (a Complex, b Complex) = makeComplex(a.r*b.r - a.i*b.i, a.r*b.i + a.i*b.r);
func + (a Complex, b Complex) = makeComplex(a.r+b.r, a.i+b.i);
func - (a Complex, b Complex) = makeComplex(a.r-b.r, a.i-b.i);

func main
{
	var c = makeComplex(0.0, 1.0);
	var d = c*c;
}