/* Automatically generated by ast-gen. DO NOT MODIFY. */
#include "maxwell/ast/nodes/MapConstExprPair.hpp"
#include "maxwell/ast/Coder.hpp"
#include <cstdio>
#include <sstream>
#include <stdexcept>
using ast::MapConstExprPair;
using ast::NodePtr;
using ast::NodeVector;

MapConstExprPair::MapConstExprPair() : Node(),
	interfaceGraph(this) {}

bool MapConstExprPair::isKindOf(Kind k) {
	if (Node::isKindOf(k)) return true;
	return k == kMapConstExprPair;
}

bool MapConstExprPair::implements(Interface i) {
	if (Node::implements(i)) return true;
	if (i == kGraphInterface) return true;
	return false;
}

NodePtr MapConstExprPair::copy() {
	Ptr c (new MapConstExprPair);
	Node::copy(this->graphPrev, c->graphPrev);
	Node::copy(this->key, c->key);
	Node::copy(this->value, c->value);
	return c;
}

bool MapConstExprPair::equalTo(const NodePtr& o) {
	const shared_ptr<MapConstExprPair>& other = boost::dynamic_pointer_cast<MapConstExprPair>(o);
	if (!other) return false;
	if (!equal(this->graphPrev, other->graphPrev)) return false;
	if (!equal(this->key, other->key)) return false;
	if (!equal(this->value, other->value)) return false;
	return true;
}

std::string MapConstExprPair::describe(int depth) {
	std::stringstream str, b;
	if (depth == 0) return "MapConstExprPair{â€¦}";
	str << "MapConstExprPair{";
	if (this->graphPrev) b << "\n  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
	if (this->key) b << "\n  \033[1mkey\033[0m = " << indent(this->key->describe(depth-1));
	if (this->value) b << "\n  \033[1mvalue\033[0m = " << indent(this->value->describe(depth-1));
	string bs = b.str();
	if (!bs.empty()) str << bs << '\n';
	str << "}";
	return str.str();
}


void MapConstExprPair::setGraphPrev(const NodePtr& v) {
	if (!v && graphPrev) {
		modify("graphPrev");
		graphPrev.reset();
	}
	if (!graphPrev || v->getId() != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

void MapConstExprPair::setGraphPrev(const NodeId& v) {
	if (v != graphPrev.id) {
		modify("graphPrev");
		graphPrev.set(v);
	}
}

const NodePtr& MapConstExprPair::getGraphPrev(bool required) {
	const NodePtr& v = graphPrev.get(repository);
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
	}
	return v;
}


void MapConstExprPair::setKey(const NodePtr& v) {
	if (v && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'key' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, key)) {
		modify("key");
		key = v;
	}
}

const NodePtr& MapConstExprPair::getKey(bool required) {
	const NodePtr& v = key;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have key set to a non-null value.");
	}
	return v;
}


void MapConstExprPair::setValue(const NodePtr& v) {
	if (v && !v->implements(kTypeInterface)) {
		throw std::runtime_error("'value' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
	}
	if (!equal(v, value)) {
		modify("value");
		value = v;
	}
}

const NodePtr& MapConstExprPair::getValue(bool required) {
	const NodePtr& v = value;
	if (required && !v) {
		throw std::runtime_error("Node " + getId().str() + " is required to have value set to a non-null value.");
	}
	return v;
}


void MapConstExprPair::encode(Encoder& e) {
	e.encode(this->graphPrev);
	e.encode(this->key);
	e.encode(this->value);
}

void MapConstExprPair::decode(Decoder& d) {
	d.decode(this->graphPrev);
	d.decode(this->key);
	d.decode(this->value);
}


void MapConstExprPair::updateHierarchyOfChildren() {
	if (this->key) this->key->updateHierarchy(id + "key", repository, this);
	if (this->value) this->value->updateHierarchy(id + "value", repository, this);
}

const NodePtr& MapConstExprPair::resolvePath(const std::string& path) {
	size_t size = path.size();
	// .*
	if (true) {
		// graphPrev.*
		if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
			// graphPrev
			if (size == 9) {
				return getGraphPrev();
			} else if (path[9] == '.') {
				return getGraphPrev()->resolvePath(path.substr(10));
			}
		}
		// key.*
		if (size >= 3 && path[0] == 'k' && path[1] == 'e' && path[2] == 'y') {
			// key
			if (size == 3) {
				return getKey();
			} else if (path[3] == '.') {
				return getKey()->resolvePath(path.substr(4));
			}
		}
		// value.*
		if (size >= 5 && path[0] == 'v' && path[1] == 'a' && path[2] == 'l' && path[3] == 'u' && path[4] == 'e') {
			// value
			if (size == 5) {
				return getValue();
			} else if (path[5] == '.') {
				return getValue()->resolvePath(path.substr(6));
			}
		}
	}
	throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
}

NodeVector MapConstExprPair::getChildren() {
	NodeVector v;
	if (const NodePtr& n = this->getKey(false)) v.push_back(n);
	if (const NodePtr& n = this->getValue(false)) v.push_back(n);
	return v;
}

