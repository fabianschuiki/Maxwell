/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include "interfaces.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class IdentifierExpr : public Node
{
public:
	IdentifierExpr() : Node(),
		interfaceGraph(this) {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kIdentifierExpr;
	}

	virtual string getClassName() const { return "IdentifierExpr"; }

	void setGraphPrev(const NodePtr& v)
	{
		if (!v && graphPrev) {
			modify();
			graphPrev.reset();
		}
		if (!graphPrev || v->getId() != graphPrev.id) {
			modify();
			graphPrev.set(v);
		}
	}
	void setGraphPrev(const NodeId& v)
	{
		if (v != graphPrev.id) {
			modify();
			graphPrev.set(v);
		}
	}
	const NodePtr& getGraphPrev()
	{
		return graphPrev.get(repository);
	}

	void setName(const string& v)
	{
		if (v != name) {
			modify();
			name = v;
		}
	}
	const string& getName()
	{
		return name;
	}

	void setBindingTarget(const NodePtr& v)
	{
		if (!v && bindingTarget) {
			modify();
			bindingTarget.reset();
		}
		if (!bindingTarget || v->getId() != bindingTarget.id) {
			modify();
			bindingTarget.set(v);
		}
	}
	void setBindingTarget(const NodeId& v)
	{
		if (v != bindingTarget.id) {
			modify();
			bindingTarget.set(v);
		}
	}
	const NodePtr& getBindingTarget()
	{
		return bindingTarget.get(repository);
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "IdentifierExpr{â€¦}";
		stringstream str, b;
		str << "IdentifierExpr{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = " << "\033[36m" << this->graphPrev.id << "\033[0m";
		if (!this->name.empty()) b << endl << "  \033[1mname\033[0m = '\033[33m" << this->name << "\033[0m'";
		if (this->bindingTarget) b << endl << "  \033[1mbindingTarget\033[0m = " << "\033[36m" << this->bindingTarget.id << "\033[0m";
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev);
		e.encode(this->name);
		e.encode(this->bindingTarget);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev);
		d.decode(this->name);
		d.decode(this->bindingTarget);
	}

	virtual void updateHierarchy(const NodeId& id, Repository* repository = NULL, Node* parent = NULL)
	{
		Node::updateHierarchy(id, repository, parent);
	}

	virtual const NodePtr& resolvePath(const string& path)
	{
		size_t size = path.size();
		// .*
		if (true) {
			// bindingTarget.*
			if (size >= 13 && path[0] == 'b' && path[1] == 'i' && path[2] == 'n' && path[3] == 'd' && path[4] == 'i' && path[5] == 'n' && path[6] == 'g' && path[7] == 'T' && path[8] == 'a' && path[9] == 'r' && path[10] == 'g' && path[11] == 'e' && path[12] == 't') {
				// bindingTarget
				if (size == 13) {
					return getBindingTarget();
				} else if (path[13] == '.') {
					return getBindingTarget()->resolvePath(path.substr(14));
				}
			}
			// graphPrev.*
			if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
				// graphPrev
				if (size == 9) {
					return getGraphPrev();
				} else if (path[9] == '.') {
					return getGraphPrev()->resolvePath(path.substr(10));
				}
			}
		}
		throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
	}

	// Interfaces
	virtual GraphInterface* asGraph() { return &this->interfaceGraph; }

protected:
	NodeRef graphPrev;
	string name;
	NodeRef bindingTarget;

	// Interfaces
	GraphInterfaceImpl<IdentifierExpr> interfaceGraph;
};

} // namespace ast