/* Automatically generated by ast-gen. DO NOT MODIFY. */
#pragma once
#include "../Node.hpp"
#include "../Coder.hpp"
#include "interfaces.hpp"
#include <vector>
#include <string>
#include <sstream>
#include <boost/smart_ptr.hpp>
#include <stdexcept>

namespace ast {

using std::vector;
using std::string;
using std::stringstream;
using std::endl;
using std::runtime_error;

class MapConstExprPair : public Node
{
public:
	MapConstExprPair() : Node(),
		interfaceGraph(this) {}

	virtual bool isKindOf(Kind k)
	{
		if (Node::isKindOf(k)) return true;
		return k == kMapConstExprPair;
	}

	virtual bool implements(Interface i)
	{
		if (Node::implements(i)) return true;
		if (i == kGraphInterface) return true;
		return false;
	}

	virtual string getClassName() const { return "MapConstExprPair"; }

	void setGraphPrev(const NodePtr& v)
	{
		if (!v && graphPrev) {
			modify("graphPrev");
			graphPrev.reset();
		}
		if (!graphPrev || v->getId() != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	void setGraphPrev(const NodeId& v)
	{
		if (v != graphPrev.id) {
			modify("graphPrev");
			graphPrev.set(v);
		}
	}
	const NodePtr& getGraphPrev(bool required = true)
	{
		const NodePtr& v = graphPrev.get(repository);
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have graphPrev set to a non-null value.");
		}
		return v;
	}

	void setKey(const NodePtr& v)
	{
		if (v && !v->implements(kTypeInterface)) {
			throw runtime_error("'key' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, key)) {
			modify("key");
			key = v;
		}
	}
	const NodePtr& getKey(bool required = true)
	{
		const NodePtr& v = key;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have key set to a non-null value.");
		}
		return v;
	}

	void setValue(const NodePtr& v)
	{
		if (v && !v->implements(kTypeInterface)) {
			throw runtime_error("'value' of " + id.str() + " needs to be of kind {} or implement interface {Type}, got " + v->getClassName() + " (" + v->getId().str() + ") instead.");
		}
		if (!equal(v, value)) {
			modify("value");
			value = v;
		}
	}
	const NodePtr& getValue(bool required = true)
	{
		const NodePtr& v = value;
		if (required && !v) {
			throw runtime_error("Node " + getId().str() + " is required to have value set to a non-null value.");
		}
		return v;
	}

	virtual string describe(int depth = -1)
	{
		if (depth == 0) return "MapConstExprPair{â€¦}";
		stringstream str, b;
		str << "MapConstExprPair{";
		if (this->graphPrev) b << endl << "  \033[1mgraphPrev\033[0m = \033[36m" << this->graphPrev.id << "\033[0m";
		if (this->key) b << endl << "  \033[1mkey\033[0m = " << indent(this->key->describe(depth-1));
		if (this->value) b << endl << "  \033[1mvalue\033[0m = " << indent(this->value->describe(depth-1));
		string bs = b.str();
		if (!bs.empty()) str << bs << endl;
		str << "}";
		return str.str();
	}

	virtual void encode(Encoder& e)
	{
		e.encode(this->graphPrev);
		e.encode(this->key);
		e.encode(this->value);
	}

	virtual void decode(Decoder& d)
	{
		d.decode(this->graphPrev);
		d.decode(this->key);
		d.decode(this->value);
	}

	virtual void updateHierarchyOfChildren()
	{
		if (this->key) this->key->updateHierarchy(id + "key", repository, this);
		if (this->value) this->value->updateHierarchy(id + "value", repository, this);
	}

	virtual const NodePtr& resolvePath(const string& path)
	{
		size_t size = path.size();
		// .*
		if (true) {
			// graphPrev.*
			if (size >= 9 && path[0] == 'g' && path[1] == 'r' && path[2] == 'a' && path[3] == 'p' && path[4] == 'h' && path[5] == 'P' && path[6] == 'r' && path[7] == 'e' && path[8] == 'v') {
				// graphPrev
				if (size == 9) {
					return getGraphPrev();
				} else if (path[9] == '.') {
					return getGraphPrev()->resolvePath(path.substr(10));
				}
			}
			// key.*
			if (size >= 3 && path[0] == 'k' && path[1] == 'e' && path[2] == 'y') {
				// key
				if (size == 3) {
					return getKey();
				} else if (path[3] == '.') {
					return getKey()->resolvePath(path.substr(4));
				}
			}
			// value.*
			if (size >= 5 && path[0] == 'v' && path[1] == 'a' && path[2] == 'l' && path[3] == 'u' && path[4] == 'e') {
				// value
				if (size == 5) {
					return getValue();
				} else if (path[5] == '.') {
					return getValue()->resolvePath(path.substr(6));
				}
			}
		}
		throw std::runtime_error("Node path '" + path + "' does not point to a node or array of nodes.");
	}

	virtual NodeVector getChildren()
	{
		NodeVector v;
		if (const NodePtr& n = this->getKey(false)) v.push_back(n);
		if (const NodePtr& n = this->getValue(false)) v.push_back(n);
		return v;
	}

	virtual bool equalTo(const NodePtr& o)
	{
		const shared_ptr<MapConstExprPair>& other = boost::dynamic_pointer_cast<MapConstExprPair>(o);
		if (!other) return false;
		if (!equal(this->graphPrev, other->graphPrev)) return false;
		if (!equal(this->key, other->key)) return false;
		if (!equal(this->value, other->value)) return false;
		return true;
	}

	// Interfaces
	virtual GraphInterface* asGraph() { return &this->interfaceGraph; }

	typedef boost::shared_ptr<MapConstExprPair> Ptr;
	template<typename T> static Ptr from(const T& n) { return boost::dynamic_pointer_cast<MapConstExprPair>(n); }
	template<typename T> static Ptr needFrom(const T& n) { Ptr r = boost::dynamic_pointer_cast<MapConstExprPair>(n); if (!r) throw std::runtime_error("Node " + n->getId().str() + " cannot be dynamically casted to MapConstExprPair."); return r; }
protected:
	NodeRef graphPrev;
	NodePtr key;
	NodePtr value;

	// Interfaces
	GraphInterfaceImpl<MapConstExprPair> interfaceGraph;
};

} // namespace ast